{
    "prompt": "Below is the focal class and test class for reference:\n\npackage adlnet.jxapi;\n\npublic class SubStatement {\npublic ArrayList < Attachment > getAttachments ( ) {\nreturn attachments ;\n}\n}\n\npackage adlnet.jxapi;\n\npublic class SubStatementTest {\n@Test\npublic void testSetAttachments ( ) throws URISyntaxException , NoSuchAlgorithmException , IOException {\nArrayList < Attachment > expected = attachments ;\nexpected . remove ( 0 ) ;\nAttachment att = new Attachment ( ) ;\nHashMap < String , String > attDisplay = new HashMap < String , String > ( ) ;\nattDisplay . put ( \"STR\" , \"STR\" ) ;\natt . setDisplay ( attDisplay ) ;\nHashMap < String , String > description = new HashMap < String , String > ( ) ;\ndescription . put ( \"STR\" , \"STR\" ) ;\natt . setDescription ( description ) ;\nURI usageType = new URI ( \"STR\" ) ;\natt . setUsageType ( usageType ) ;\nString attach = \"STR\" ;\nString contentType = \"STR\" ;\natt . addAttachment ( attach , contentType ) ;\nexpected . add ( att ) ;\nArrayList < Attachment > actual = substatement . getAttachments ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertEquals(expected.size(), actual.size());\nAssert.assertTrue(actual.contains(att));\nAssert.assertEquals(expected.get(0), actual.get(0));\nAssert.assertEquals(att, actual.get(actual.size() - 1));\nAssert.assertTrue(actual.stream().anyMatch(a -> a.getDisplay().equals(attDisplay)));\nAssert.assertTrue(actual.stream().anyMatch(a -> a.getDescription().equals(description)));\nAssert.assertTrue(actual.stream().anyMatch(a -> a.getUsageType().equals(usageType)));\nAssert.assertTrue(actual.stream().anyMatch(a -> a.getAttachments().containsKey(attach)));\nAssert.assertTrue(actual.stream().anyMatch(a -> a.getAttachments().containsValue(contentType)));\nAssert.assertTrue(actual.stream().allMatch(a -> a.getDisplay().containsValue(\"STR\")));\nAssert.assertTrue(actual.stream().allMatch(a -> a.getDescription().containsValue(\"STR\")));\nAssert.assertTrue(actual.stream().allMatch(a -> a.getUsageType().toString().equals(\"STR\")));\nAssert.assertTrue(actual.stream().allMatch(a -> a.getAttachments().keySet().contains(\"STR\")));\nAssert.assertTrue(actual.stream().allMatch(a -> a.getAttachments().values().contains(\"STR\")));\nAssert.assertTrue(actual.stream().noneMatch(a -> a.getDisplay().isEmpty()));\nAssert.assertTrue(actual.stream().noneMatch(a -> a.getDescription().isEmpty()));\nAssert.assertTrue(actual.stream().noneMatch(a -> a.getUsageType().toString().isEmpty()));\nAssert.assertTrue(actual.stream().noneMatch(a -> a.getAttachments().isEmpty()));\nAssert.assertTrue(actual.stream().noneMatch(a -> a.getAttachments().keySet().isEmpty()));\nAssert.assertTrue(actual.stream().noneMatch(a -> a.getAttachments().values().isEmpty()));\n====================\n\n",
    "scores": [
        0.566,
        0.515,
        0.469,
        0.469,
        0.345,
        0.33,
        0.33,
        0.316,
        0.312,
        0.309,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.297,
        0.291,
        0.286,
        0.286,
        0.28
    ],
    "ground_truth": "assertNotNull(actual);"
}