{
    "prompt": "Below is the focal class and test class for reference:\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStr {\npublic String convert ( Double theMoney ) {\nif ( theMoney == null ) {\nthrow new IllegalArgumentException ( \"STR\" ) ;\n} Long intPart = theMoney . longValue ( ) ;\nLong fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ;\nif ( currency == Currency . PER1000 ) {\nfractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ;\n} return convert ( intPart , fractPart ) ;\n}\n}\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStrTest {\n@Test\npublic void checkPER1000 ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"\u0441\u0442\u043e \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u0440\u0438 \u0440\u0443\u0431\u043b\u044f 45 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(123.45));\nassertEquals(\"\u0434\u0432\u0435\u0441\u0442\u0438 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(200.0));\nassertEquals(\"\u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0440\u0443\u0431\u043b\u0435\u0439 99 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(500.99));\nassertEquals(\"\u0442\u044b\u0441\u044f\u0447\u0430 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(1000.0));\nassertEquals(\"\u0434\u0432\u0435 \u0442\u044b\u0441\u044f\u0447\u0438 \u0440\u0443\u0431\u043b\u0435\u0439 50 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(2000.50));\nassertEquals(\"\u043f\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 75 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(5000.75));\nassertEquals(\"\u0434\u0435\u0441\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(10000.0));\nassertEquals(\"\u043f\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 30 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(15000.30));\nassertEquals(\"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 99 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(20000.99));\nassertEquals(\"\u043f\u044f\u0442\u044c\u0434\u0435\u0441\u044f\u0442 \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(50000.0));\nassertEquals(\"\u0441\u0442\u043e \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 50 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(100000.50));\nassertEquals(\"\u0434\u0432\u0435\u0441\u0442\u0438 \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 75 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(200000.75));\nassertEquals(\"\u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(500000.0));\nassertEquals(\"\u043c\u0438\u043b\u043b\u0438\u043e\u043d \u0440\u0443\u0431\u043b\u0435\u0439 99 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(1000000.99));\nassertEquals(\"\u0434\u0432\u0430 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(2000000.0));\nassertEquals(\"\u043f\u044f\u0442\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0440\u0443\u0431\u043b\u0435\u0439 50 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(5000000.50));\nassertEquals(\"\u0434\u0435\u0441\u044f\u0442\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0440\u0443\u0431\u043b\u0435\u0439 75 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(10000000.75));\nassertEquals(\"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432\n====================\n\n",
    "scores": [
        0.684,
        0.678,
        0.667,
        0.65,
        0.65,
        0.645,
        0.645,
        0.645,
        0.634,
        0.633,
        0.63,
        0.629,
        0.624,
        0.618,
        0.613,
        0.6,
        0.598,
        0.333
    ],
    "ground_truth": "assertEquals(\"STR\",moneyToStrPER1000.convert(12.346));"
}