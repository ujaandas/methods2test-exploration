{
    "prompt": "Below is the focal class and test class for reference:\n\npackage NanoHttpd.nanohttpd.nanolets;\n\npublic class Nanolets {\n@Override\npublic String toString ( ) {\nreturn new StringBuilder ( \"STR\" ) . append ( ( uri == null ? \"STR\" : uri ) ) . append ( \"STR\" ) . append ( uriParams ) . append ( '}' ) . toString ( ) ;\n}\n}\n\npackage NanoHttpd.nanohttpd.nanolets;\n\npublic class TestNanolets {\n@Test\npublic void uriToString ( ) throws Exception {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"STR/endpoint\", nanolets.toString());\nassertEquals(\"STR/endpoint{param1=value1, param2=value2}\", nanolets.toString());\nassertEquals(\"STR/endpoint{}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param1=value1}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param2=value2}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param1=value1, param2=value2, param3=value3}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param3=value3}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param4=value4}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param5=value5}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param6=value6}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param7=value7}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param8=value8}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param9=value9}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param10=value10}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param11=value11}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param12=value12}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param13=value13}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param14=value14}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param15=value15}\", nanolets.toString());\nassertEquals(\"STR/endpoint{param16=value16}\", nanolets.toString());\n====================\n\n",
    "scores": [
        0.592,
        0.583,
        0.529,
        0.529,
        0.529,
        0.529,
        0.529,
        0.529,
        0.529,
        0.529,
        0.529,
        0.521,
        0.521,
        0.521,
        0.521,
        0.521,
        0.521,
        0.521,
        0.481,
        0.44
    ],
    "ground_truth": "Assert.assertEquals(\"STR\",newUriResource(\"STR\",100,GeneralHandler.class).toString());"
}