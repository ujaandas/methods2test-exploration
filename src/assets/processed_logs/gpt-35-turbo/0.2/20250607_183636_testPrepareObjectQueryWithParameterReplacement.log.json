{
    "prompt": "Below is the focal class and test class for reference:\n\npackage amlinv.stat-collection-utils;\n\npublic class ObjectQueryPreparer {\npublic Object getTarget ( ) {\nreturn target ;\n}\n}\n\npackage amlinv.stat-collection-utils;\n\npublic class ObjectQueryPreparerTest {\n@Test\npublic void testPrepareObjectQueryWithParameterReplacement ( ) throws Exception {\nObjectQueryInfo result ;\nthis . initPreparer ( ) ;\nMockito . when ( this . mockParameterReplacer . replaceObjectNameParameters ( TEST_ONAME_STR002 , this . testTarget002 ) ) . thenReturn ( TEST_ONAME_STR002B ) ;\nresult = this . preparer . prepareObjectQuery ( this . testTarget002 ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertNotNull(result);\nAssert.assertEquals(TEST_ONAME_STR002B, result.getObjectName());\nAssert.assertEquals(TEST_ONAME_STR002, result.getOriginalObjectName());\nAssert.assertEquals(this.testTarget002, result.getTarget());\nAssert.assertEquals(0, result.getParameters().size());\nAssert.assertEquals(ObjectQueryType.OBJECT, result.getQueryType());\nAssert.assertEquals(ObjectQueryOperation.GET, result.getQueryOperation());\nAssert.assertEquals(ObjectQueryFormat.DEFAULT, result.getQueryFormat());\nAssert.assertEquals(ObjectQueryLanguage.DEFAULT, result.getQueryLanguage());\nAssert.assertEquals(ObjectQuerySource.DEFAULT, result.getQuerySource());\nAssert.assertEquals(ObjectQueryScope.DEFAULT, result.getQueryScope());\nAssert.assertEquals(ObjectQueryCategory.DEFAULT, result.getQueryCategory());\nAssert.assertEquals(ObjectQueryStatus.DEFAULT, result.getQueryStatus());\nAssert.assertEquals(ObjectQueryPriority.DEFAULT, result.getQueryPriority());\nAssert.assertEquals(ObjectQueryLevel.DEFAULT, result.getQueryLevel());\nAssert.assertEquals(ObjectQueryVisibility.DEFAULT, result.getQueryVisibility());\nAssert.assertEquals(ObjectQueryAccess.DEFAULT, result.getQueryAccess());\nAssert.assertEquals(ObjectQuerySecurity.DEFAULT, result.getQuerySecurity());\nAssert.assertEquals(ObjectQueryValidity.DEFAULT, result.getQueryValidity());\nAssert.assertEquals(ObjectQueryConsistency.DEFAULT, result.getQueryConsistency());\n====================\n\n",
    "scores": [
        0.92,
        0.574,
        0.519,
        0.517,
        0.505,
        0.505,
        0.5,
        0.5,
        0.492,
        0.491,
        0.491,
        0.483,
        0.483,
        0.483,
        0.483,
        0.483,
        0.482,
        0.473,
        0.464,
        0.4
    ],
    "ground_truth": "assertSame(this.testTarget002,result.getTarget());"
}