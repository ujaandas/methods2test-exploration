{
    "prompt": "Below is the focal class and test class for reference:\n\npackage amlinv.stat-collection-utils;\n\npublic class ParameterReplacer {\npublic String replaceObjectNameParameters ( String pattern , MBeanLocationParameterSource parameterSource ) {\nMatcher matcher = replaceParamPattern . matcher ( pattern ) ;\nStringBuffer result = new StringBuffer ( ) ;\nwhile ( matcher . find ( ) ) {\nString name = matcher . group ( \"STR\" ) ;\nString value = parameterSource . getParameter ( name ) ;\nif ( value != null ) {\nmatcher . appendReplacement ( result , value ) ;\n} else {\nmatcher . appendReplacement ( result , Matcher . quoteReplacement ( matcher . group ( ) ) ) ;\n} } matcher . appendTail ( result ) ;\nreturn result . toString ( ) ;\n}\n}\n\npackage amlinv.stat-collection-utils;\n\npublic class ParameterReplacerTest {\n@Test\npublic void testReplaceObjectNameParameters ( ) throws Exception {\nMockito . when ( this . mockSource . getParameter ( \"STR\" ) ) . thenReturn ( \"STR\" ) ;\nMockito . when ( this . mockSource . getParameter ( \"STR\" ) ) . thenReturn ( \"STR\" ) ;\nMockito . when ( this . mockSource . getParameter ( \"STR\" ) ) . thenReturn ( \"STR\" ) ;\nString result ;\nresult = this . replacer . replaceObjectNameParameters ( \"STR\" , mockSource ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertEquals(\"STR\", result);\nAssert.assertNotEquals(\"STR123\", result);\nAssert.assertTrue(result.contains(\"STR\"));\nAssert.assertFalse(result.isEmpty());\nAssert.assertNotNull(result);\nAssert.assertNull(null);\nAssert.assertTrue(result.startsWith(\"S\"));\nAssert.assertTrue(result.endsWith(\"R\"));\nAssert.assertEquals(3, result.length());\nAssert.assertTrue(result.matches(\"[A-Z]+\"));\nAssert.assertTrue(result.equalsIgnoreCase(\"str\"));\nAssert.assertTrue(result.contains(\"S\"));\nAssert.assertFalse(result.contains(\"X\"));\nAssert.assertTrue(result.equals(\"STR\"));\nAssert.assertNotEquals(\"str\", result);\nAssert.assertTrue(result.compareTo(\"STR\") == 0);\nAssert.assertTrue(result.compareToIgnoreCase(\"str\") == 0);\nAssert.assertTrue(result.toLowerCase().equals(\"str\"));\nAssert.assertTrue(result.toUpperCase().equals(\"STR\"));\nAssert.assertTrue(result.trim().equals(\"STR\"));\nAssert.assertTrue(result.replace(\"S\", \"X\").equals(\"XTR\"));\n====================\n\n",
    "scores": [
        1.0,
        0.897,
        0.836,
        0.737,
        0.681,
        0.621,
        0.618,
        0.576,
        0.554,
        0.533,
        0.517,
        0.517,
        0.5,
        0.5,
        0.484,
        0.469,
        0.453,
        0.441,
        0.429,
        0.417,
        0.405
    ],
    "ground_truth": "assertEquals(\"STR\",result);"
}