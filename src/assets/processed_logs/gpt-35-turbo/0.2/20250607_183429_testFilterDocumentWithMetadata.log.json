{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class BasicIndexing {\npublic void setValue ( String key , String value ) {\ncheckLockException ( ) ;\nmd . put ( key , new String [ ] {\nvalue } ) ;\n}\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class BasicIndexingTest {\n@Test\npublic void testFilterDocumentWithMetadata ( ) throws Exception {\nMap config = new HashMap ( ) ;\nconfig . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ;\nconfig . put ( AbstractIndexerBolt . metadataFilterParamName , \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nmetadata . setValue ( \"STR\" , \"STR\" ) ;\nprepareIndexerBolt ( config ) ;\nindex ( URL , metadata ) ;\nMap < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"STR\", fields.get(\"STR\"));\nassertEquals(1, fields.size());\nassertTrue(fields.containsKey(\"STR\"));\nassertFalse(fields.containsKey(\"OTHER_KEY\"));\nassertNotNull(fields.get(\"STR\"));\nassertNull(fields.get(\"OTHER_KEY\"));\nassertEquals(\"STR\", fields.remove(\"STR\"));\nassertTrue(fields.isEmpty());\nassertEquals(0, fields.size());\nassertFalse(fields.containsKey(\"STR\"));\nassertTrue(fields.containsKey(\"OTHER_KEY\"));\nassertEquals(\"STR\", fields.put(\"STR\", \"NEW_VALUE\"));\nassertEquals(\"NEW_VALUE\", fields.get(\"STR\"));\nassertTrue(fields.containsValue(\"NEW_VALUE\"));\nassertFalse(fields.containsValue(\"OLD_VALUE\"));\nassertTrue(fields.containsValue(\"NEW_VALUE\"));\nassertFalse(fields.containsValue(\"OLD_VALUE\"));\nassertTrue(fields.keySet().contains(\"STR\"));\nassertFalse(fields.keySet().contains(\"OTHER_KEY\"));\nassertTrue(fields.values().contains(\"NEW_VALUE\"));\nassertFalse(fields.values().contains(\"OLD_VALUE\"));\nassertEquals(\"NEW_VALUE\", fields.putIfAbsent(\"STR\", \"ANOTHER_VALUE\"));\nassertEquals(\"NEW_VALUE\", fields.get(\"STR\"));\n====================\n\n",
    "scores": [
        0.925,
        0.843,
        0.791,
        0.791,
        0.761,
        0.72,
        0.694,
        0.694,
        0.667,
        0.642,
        0.6,
        0.6,
        0.581,
        0.575,
        0.559,
        0.535,
        0.535,
        0.517,
        0.517,
        0.516,
        0.478,
        0.477,
        0.477
    ],
    "ground_truth": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));"
}