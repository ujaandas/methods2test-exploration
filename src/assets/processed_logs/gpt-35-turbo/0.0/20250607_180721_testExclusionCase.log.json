{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class TextExtractor {\npublic String text ( Element element ) {\nif ( noText ) return \"STR\" ;\nif ( inclusionPatterns . size ( ) == 0 && excludedTags . size ( ) == 0 ) {\nreturn _text ( element ) ;\n} Elements matches = new Elements ( ) ;\nfor ( String pattern : inclusionPatterns ) {\nmatches = element . select ( pattern ) ;\nif ( ! matches . isEmpty ( ) ) break ;\n} if ( matches . isEmpty ( ) ) {\nmatches . add ( element ) ;\n} final StringBuilder accum = new StringBuilder ( ) ;\nfor ( Element node : matches ) {\naccum . append ( _text ( node ) ) . append ( \"STR\" ) ;\n} return accum . toString ( ) . trim ( ) ;\n}\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class TextExtractorTest {\n@Test\npublic void testExclusionCase ( ) throws IOException {\nConfig conf = new Config ( ) ;\nconf . put ( TextExtractor . EXCLUDE_PARAM_NAME , \"STR\" ) ;\nTextExtractor extractor = new TextExtractor ( conf ) ;\nString content = \"STR\" ;\nDocument jsoupDoc = Parser . htmlParser ( ) . parseInput ( content , \"STR\" ) ;\nString text = extractor . text ( jsoupDoc . body ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"STR\", text);\nassertNotEquals(\"test\", text);\nassertTrue(text.contains(\"example\"));\nassertFalse(text.isEmpty());\nassertNotNull(text);\nassertNull(nullText);\nassertSame(expectedText, text);\nassertNotSame(unexpectedText, text);\nassertEqualsIgnoringCase(\"STR\", text);\nassertArrayEquals(expectedArray, actualArray);\nassertIterableEquals(expectedList, actualList);\nassertLinesMatch(expectedLines, actualLines);\nassertTimeout(Duration.ofSeconds(1), () -> {\n// code that may take longer than 1 second to execute\n});\nassertThrows(Exception.class, () -> {\n// code that should throw an exception\n});\nassertAll(\n() -> assertTrue(text.contains(\"first\")),\n() -> assertFalse(text.contains(\"second\"))\n);\nassertThat(text, containsString(\"substring\"));\nassertThat(text, startsWith(\"prefix\"));\nassertThat(text, endsWith(\"suffix\"));\nassertThat(text, matchesPattern(\"regexPattern\"));\n====================\n\n",
    "scores": [
        1.0,
        0.808,
        0.8,
        0.651,
        0.636,
        0.588,
        0.566,
        0.5,
        0.493,
        0.483,
        0.441,
        0.433,
        0.426,
        0.382,
        0.366,
        0.328,
        0.298,
        0.25,
        0.222
    ],
    "ground_truth": "assertEquals(\"STR\",text);"
}