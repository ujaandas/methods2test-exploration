{
    "prompt": "Below is the focal class and test class for reference:\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStore {\npublic static SSLServerSocketFactory makeSSLSocketFactory ( String keyAndTrustStoreClasspathPath , char [ ] passphrase ) throws IOException {\ntry {\nKeyStore keystore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ;\nInputStream keystoreStream = NanoHTTPD . class . getResourceAsStream ( keyAndTrustStoreClasspathPath ) ;\nif ( keystoreStream == null ) {\nthrow new IOException ( \"STR\" + keyAndTrustStoreClasspathPath ) ;\n} keystore . load ( keystoreStream , passphrase ) ;\nKeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ;\nkeyManagerFactory . init ( keystore , passphrase ) ;\nreturn makeSSLSocketFactory ( keystore , keyManagerFactory ) ;\n} catch ( Exception e ) {\nthrow new IOException ( e . getMessage ( ) ) ;\n} }\n}\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStoreTest {\n@Test\npublic void loadNonExistentKeyStoreFromResources ( ) throws Exception {\nString nonExistentPath = \"STR\" ;\nInputStream resourceAsStream = this . getClass ( ) . getResourceAsStream ( nonExistentPath ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertNull(resourceAsStream);\nAssert.assertNotNull(resourceAsStream);\nAssert.assertTrue(resourceAsStream == null);\nAssert.assertFalse(resourceAsStream != null);\nAssert.assertEquals(null, resourceAsStream);\nAssert.assertNotEquals(\"test\", resourceAsStream);\nAssert.assertSame(null, resourceAsStream);\nAssert.assertNotSame(\"test\", resourceAsStream);\nAssert.assertArrayEquals(null, resourceAsStream);\nAssert.assertNotEquals(0, resourceAsStream);\nAssert.assertTrue(resourceAsStream instanceof InputStream);\nAssert.assertFalse(resourceAsStream instanceof String);\nAssert.assertTrue(resourceAsStream == null || resourceAsStream.available() == 0);\nAssert.assertTrue(resourceAsStream != null && resourceAsStream.available() > 0);\nAssert.assertTrue(resourceAsStream == null || resourceAsStream.markSupported());\nAssert.assertTrue(resourceAsStream != null && resourceAsStream.markSupported());\nAssert.assertTrue(resourceAsStream == null || resourceAsStream.read() == -1);\nAssert.assertTrue(resourceAsStream != null && resourceAsStream.read() != -1);\nAssert.assertTrue(resourceAsStream == null || resourceAsStream.markSupported() && resourceAsStream.available() == 0);\nAssert.assertTrue(resourceAsStream != null && resourceAsStream.markSupported() && resourceAsStream.available() > 0);\n====================\n\n",
    "scores": [
        1.0,
        0.949,
        0.857,
        0.852,
        0.825,
        0.806,
        0.794,
        0.794,
        0.765,
        0.758,
        0.685,
        0.649,
        0.549,
        0.549,
        0.532,
        0.526,
        0.521,
        0.521,
        0.391,
        0.388
    ],
    "ground_truth": "assertNull(resourceAsStream);"
}