{
    "prompt": "Below is the focal class and test class for reference:\n\npackage PeterisP.morphology;\n\npublic class Morphology {\npublic boolean isRecognized ( ) {\nreturn ! wordforms . isEmpty ( ) ;\n}\n}\n\npackage PeterisP.morphology;\n\npublic class MorphologyTest {\n@Test\npublic void jaundzimu\u0161\u0101kais ( ) {\nWord w = loc\u012bt\u0101js . analyze ( \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertTrue(w.isRecognized());\nAssert.assertEquals(\"STR\", w.getWordForm());\nAssert.assertNotNull(w.getLemma());\nAssert.assertNotEquals(0, w.getFrequency());\nAssert.assertTrue(w.getPOS().equals(\"noun\") || w.getPOS().equals(\"adjective\"));\nAssert.assertTrue(w.getGender().equals(\"masculine\") || w.getGender().equals(\"feminine\") || w.getGender().equals(\"neuter\"));\nAssert.assertTrue(w.getNumber().equals(\"singular\") || w.getNumber().equals(\"plural\"));\nAssert.assertTrue(w.getCase().equals(\"nominative\") || w.getCase().equals(\"genitive\") || w.getCase().equals(\"dative\") || w.getCase().equals(\"accusative\") || w.getCase().equals(\"instrumental\") || w.getCase().equals(\"locative\") || w.getCase().equals(\"vocative\"));\nAssert.assertTrue(w.getDegree().equals(\"positive\") || w.getDegree().equals(\"comparative\") || w.getDegree().equals(\"superlative\"));\nAssert.assertTrue(w.getPerson().equals(\"first\") || w.getPerson().equals(\"second\") || w.getPerson().equals(\"third\"));\nAssert.assertTrue(w.getTense().equals(\"present\") || w.getTense().equals(\"past\") || w.getTense().equals(\"future\"));\nAssert.assertTrue(w.getMood().equals(\"indicative\") || w.getMood().equals(\"imperative\") || w.getMood().equals(\"subjunctive\"));\nAssert.assertTrue(w.getVoice().equals(\"active\") || w.getVoice().equals(\"passive\"));\nAssert.assertTrue(w.getAspect().equals(\"imperfective\") || w.getAspect().equals(\"perfective\"));\nAssert.assertTrue(w.getAnimacy().equals(\"animate\") || w.getAnimacy().equals(\"inanimate\"));\nAssert.assertTrue(w.getDefiniteness().equals(\"definite\") || w.getDefiniteness().equals(\"indefinite\"));\nAssert.assertTrue(w.getReflexivity().equals(\"reflexive\") || w.getReflexivity().equals(\"non-reflexive\"));\nAssert.assertTrue(w.getTransitivity().equals(\"transitive\") || w.getTransitivity().equals(\"intransitive\"));\n====================\n\n",
    "scores": [
        1.0,
        0.545,
        0.476,
        0.413,
        0.412,
        0.356,
        0.352,
        0.348,
        0.346,
        0.339,
        0.333,
        0.331,
        0.311,
        0.301,
        0.29,
        0.277,
        0.27,
        0.112
    ],
    "ground_truth": "assertTrue(w.isRecognized());"
}