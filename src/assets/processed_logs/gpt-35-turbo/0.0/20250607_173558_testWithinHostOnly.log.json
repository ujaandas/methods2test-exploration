{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class HostURLFilter {\n@Override\npublic String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) {\nif ( sourceUrl == null || ( ! ignoreOutsideHost && ! ignoreOutsideDomain ) ) {\nreturn urlToFilter ;\n} URL tURL ;\ntry {\ntURL = new URL ( urlToFilter ) ;\n} catch ( MalformedURLException e1 ) {\nreturn null ;\n} String fromHost ;\nString fromDomain = null ;\nif ( sourceUrl == previousSourceUrl ) {\nfromHost = previousSourceHost ;\nif ( ignoreOutsideDomain ) {\nfromDomain = previousSourceDomain ;\n} } else {\nfromHost = sourceUrl . getHost ( ) ;\nif ( ignoreOutsideDomain ) {\nfromDomain = PaidLevelDomain . getPLD ( fromHost ) ;\n} previousSourceHost = fromHost ;\npreviousSourceDomain = fromDomain ;\npreviousSourceUrl = sourceUrl ;\n} String toHost = tURL . getHost ( ) ;\nif ( ignoreOutsideHost ) {\nif ( toHost == null || ! toHost . equalsIgnoreCase ( fromHost ) ) {\nreturn null ;\n} } if ( ignoreOutsideDomain ) {\nString toDomain = PaidLevelDomain . getPLD ( toHost ) ;\nif ( toDomain == null || ! toDomain . equals ( fromDomain ) ) {\nreturn null ;\n} } return urlToFilter ;\n}\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class HostURLFilterTest {\n@Test\npublic void testWithinHostOnly ( ) throws MalformedURLException {\nHostURLFilter allAllowed = createFilter ( true , false ) ;\nURL sourceURL = new URL ( \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nString filterResult = allAllowed . filter ( sourceURL , metadata , \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"STR\", filterResult);\nassertNotNull(filterResult);\nassertNotEquals(\"\", filterResult);\nassertTrue(filterResult.contains(\"STR\"));\nassertFalse(filterResult.isEmpty());\nassertEquals(\"STR\", filterResult.trim());\nassertTrue(filterResult.startsWith(\"S\"));\nassertTrue(filterResult.endsWith(\"R\"));\nassertTrue(filterResult.matches(\"[A-Z]+\"));\nassertTrue(filterResult.length() > 0);\nassertTrue(filterResult.equals(\"STR\"));\nassertFalse(filterResult.equalsIgnoreCase(\"str\"));\nassertTrue(filterResult.contains(\"S\") && filterResult.contains(\"R\"));\nassertTrue(filterResult.matches(\"[A-Z]{3}\"));\nassertTrue(filterResult.indexOf(\"T\") == 2);\nassertTrue(filterResult.lastIndexOf(\"R\") == 2);\nassertTrue(filterResult.substring(1, 2).equals(\"T\"));\nassertTrue(filterResult.replace(\"S\", \"T\").equals(\"TTR\"));\nassertTrue(filterResult.toUpperCase().equals(\"STR\"));\nassertTrue(filterResult.toLowerCase().equals(\"str\"));\n====================\n\n",
    "scores": [
        1.0,
        0.906,
        0.901,
        0.746,
        0.687,
        0.627,
        0.6,
        0.6,
        0.583,
        0.583,
        0.583,
        0.568,
        0.568,
        0.553,
        0.553,
        0.506,
        0.5,
        0.5,
        0.483,
        0.429
    ],
    "ground_truth": "Assert.assertEquals(\"STR\",filterResult);"
}