{
    "prompt": "Below is the focal class and test class for reference:\n\npackage redraiment.jactiverecord;\n\npublic class Seq {\npublic static String join ( Collection < ? > list , String delimiter ) {\nif ( list == null || list . isEmpty ( ) ) {\nreturn \"STR\" ;\n} if ( delimiter == null ) {\ndelimiter = \"STR\" ;\n} StringBuilder s = new StringBuilder ( ) ;\nboolean first = true ;\nfor ( Object e : list ) {\nif ( first ) {\nfirst = false ;\n} else {\ns . append ( delimiter ) ;\n} s . append ( e ) ;\n} return s . toString ( ) ;\n}\n}\n\npackage redraiment.jactiverecord;\n\npublic class SeqTest {\n@Test\npublic void testCommaList ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"\", Seq.join(Collections.emptyList(), \",\"));\n\nassertEquals(\"1\", Seq.join(Collections.singletonList(1), \",\"));\n\nassertEquals(\"1,2,3\", Seq.join(Arrays.asList(1, 2, 3), \",\"));\n\nassertEquals(\"a,b,c\", Seq.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"));\n\nassertEquals(\"true,false,true\", Seq.join(Arrays.asList(true, false, true), \",\"));\n\nassertEquals(\"apple,banana,orange\", Seq.join(Arrays.asList(\"apple\", \"banana\", \"orange\"), \",\"));\n\nassertEquals(\"1-2-3\", Seq.join(Arrays.asList(1, 2, 3), \"-\"));\n\nassertEquals(\"a b c\", Seq.join(Arrays.asList(\"a\", \"b\", \"c\"), \" \"));\n\nassertEquals(\"true false true\", Seq.join(Arrays.asList(true, false, true), \" \"));\n\nassertEquals(\"apple banana orange\", Seq.join(Arrays.asList(\"apple\", \"banana\", \"orange\"), \" \"));\n\nassertEquals(\"1,2,3,4,5\", Seq.join(Arrays.asList(1, 2, 3, 4, 5), \",\"));\n\nassertEquals(\"a,b,c,d,e\", Seq.join(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\"), \",\"));\n\nassertEquals(\"true,false,true,false,true\", Seq.join(Arrays.asList(true, false, true, false, true), \",\"));\n\nassertEquals(\"apple,banana,orange,grape\", Seq.join(Arrays.asList(\"apple\", \"banana\", \"orange\", \"grape\"), \",\"));\n\nassertEquals(\"1-2-3-4-5\", Seq.join(Arrays.asList(1, 2, 3, 4, 5), \"-\"));\n\nassertEquals(\"a b c d e\", Seq.join(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\"), \" \"));\n\nassertEquals(\"true false true false true\", Seq.join(Arrays.asList(true, false, true, false, true), \" \"));\n\nassertEquals(\"apple banana orange grape\", Seq.join(Arrays.asList(\"apple\", \"banana\", \"orange\", \"grape\"), \" \"));\n====================\n\n",
    "scores": [
        0.835,
        0.815,
        0.774,
        0.758,
        0.746,
        0.712,
        0.71,
        0.684,
        0.671,
        0.667,
        0.667,
        0.631,
        0.616,
        0.611,
        0.607,
        0.594,
        0.584,
        0.53
    ],
    "ground_truth": "Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));"
}