{
    "prompt": "Below is the focal class and test class for reference:\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStr {\npublic String convert ( Double theMoney ) {\nif ( theMoney == null ) {\nthrow new IllegalArgumentException ( \"STR\" ) ;\n} Long intPart = theMoney . longValue ( ) ;\nLong fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ;\nif ( currency == Currency . PER1000 ) {\nfractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ;\n} return convert ( intPart , fractPart ) ;\n}\n}\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStrTest {\n@Test\npublic void checkUSDUKR ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(1.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(2.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(5.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(10.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(20.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(50.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(100.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(500.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(1000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(2000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(5000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(10000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(50000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(100000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(500000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(1000000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(5000000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(10000000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(50000000.0));\nassertEquals(\"\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0421\u0428\u0410\", moneyToStr.convert(100000000.0));\n====================\n\n",
    "scores": [
        0.772,
        0.772,
        0.772,
        0.765,
        0.765,
        0.76,
        0.76,
        0.76,
        0.757,
        0.757,
        0.757,
        0.75,
        0.75,
        0.743,
        0.743,
        0.736,
        0.736,
        0.729,
        0.729,
        0.722
    ],
    "ground_truth": "assertEquals(\"STR\",moneyToStrUSD.convert(V_300D));"
}