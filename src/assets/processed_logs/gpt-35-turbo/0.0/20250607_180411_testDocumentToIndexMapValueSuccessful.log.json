{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OCompositeIndexDefinition {\npublic Object getDocumentValueToIndex ( final ODocument iDocument ) {\nfinal List < OCompositeKey > compositeKeys = new ArrayList < OCompositeKey > ( 10 ) ;\nfinal OCompositeKey firstKey = new OCompositeKey ( ) ;\nboolean containsCollection = false ;\ncompositeKeys . add ( firstKey ) ;\nfor ( final OIndexDefinition indexDefinition : indexDefinitions ) {\nfinal Object result = indexDefinition . getDocumentValueToIndex ( iDocument ) ;\nif ( result == null && isNullValuesIgnored ( ) ) return null ;\nif ( result instanceof Collection && ( ( Collection ) result ) . isEmpty ( ) && isNullValuesIgnored ( ) ) return null ;\ncontainsCollection = addKey ( firstKey , compositeKeys , containsCollection , result ) ;\n} if ( ! containsCollection ) return firstKey ;\nreturn compositeKeys ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OCompositeIndexDefinitionTest {\n@Test\npublic void testDocumentToIndexMapValueSuccessful ( ) {\nfinal ODocument document = new ODocument ( ) ;\nfinal Map < String , String > stringMap = new HashMap < String , String > ( ) ;\nstringMap . put ( \"STR\" , \"STR\" ) ;\nstringMap . put ( \"STR\" , \"STR\" ) ;\ndocument . field ( \"STR\" , 12 ) ;\ndocument . field ( \"STR\" , stringMap ) ;\nfinal OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ;\ncompositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ;\ncompositeIndexDefinition . addIndex ( new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ) ;\nfinal Object result = compositeIndexDefinition . getDocumentValueToIndex ( document ) ;\nfinal Collection < OCompositeKey > collectionResult = ( Collection < OCompositeKey > ) result ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertNotNull(result);\nAssert.assertTrue(result instanceof Collection);\nAssert.assertEquals(2, collectionResult.size());\nAssert.assertTrue(collectionResult.contains(new OCompositeKey(\"STR\", 12)));\nAssert.assertTrue(collectionResult.contains(new OCompositeKey(\"STR\", \"STR\")));\nAssert.assertFalse(collectionResult.contains(new OCompositeKey(\"STR\", \"OTHER\")));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().containsKey(\"STR\")));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().containsValue(\"STR\")));\nAssert.assertTrue(collectionResult.stream().anyMatch(key -> key.getKeys().containsKey(\"STR\") && key.getKeys().containsValue(12)));\nAssert.assertTrue(collectionResult.stream().anyMatch(key -> key.getKeys().containsKey(\"STR\") && key.getKeys().containsValue(\"STR\")));\nAssert.assertTrue(collectionResult.stream().noneMatch(key -> key.getKeys().containsKey(\"OTHER\")));\nAssert.assertTrue(collectionResult.stream().noneMatch(key -> key.getKeys().containsValue(\"OTHER\")));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().size() == 1 || key.getKeys().size() == 2));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().values().stream().allMatch(value -> value instanceof String || value instanceof Integer)));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().keySet().stream().allMatch(keyName -> keyName.equals(\"STR\"))));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().values().stream().allMatch(value -> value.equals(\"STR\") || value.equals(12))));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().values().stream().allMatch(value -> value.equals(\"STR\") || value.equals(\"STR\"))));\nAssert.assertTrue(collectionResult.stream().allMatch(key -> key.getKeys().values().stream().allMatch(value -> value.equals(12) || value.equals(\"STR\"))));\n====================\n\n",
    "scores": [
        0.949,
        0.615,
        0.6,
        0.579,
        0.5,
        0.494,
        0.492,
        0.484,
        0.481,
        0.472,
        0.471,
        0.395,
        0.388,
        0.366,
        0.348,
        0.348,
        0.331,
        0.323
    ],
    "ground_truth": "Assert.assertEquals(collectionResult.size(),2);"
}