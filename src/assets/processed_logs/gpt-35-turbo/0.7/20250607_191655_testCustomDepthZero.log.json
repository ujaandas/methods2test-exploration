{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilter {\npublic String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilterTest {\n@Test\npublic void testCustomDepthZero ( ) throws MalformedURLException {\nURLFilter filter = createFilter ( \"STR\" , 3 ) ;\nURL url = new URL ( \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nmetadata . setValue ( MetadataTransfer . maxDepthKeyName , \"STR\" ) ;\nString filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"Expected result\", filterResult);\nassertFalse(\"Expected false result\", filterResult.isEmpty());\nassertNotNull(\"Expected non-null result\", filterResult);\nassertSame(\"Expected same object\", url, url);\nassertTrue(\"Expected true result\", filterResult.contains(\"substring\"));\nassertNotEquals(\"Expected different result\", \"expected\", filterResult);\nassertArrayEquals(\"Expected array equality\", expectedArray, actualArray);\nassertThat(\"Expected condition met\", filterResult, containsString(\"substring\"));\nassertThat(\"Expected condition met\", filterResult, startsWith(\"prefix\"));\nassertThat(\"Expected condition met\", filterResult, endsWith(\"suffix\"));\nassertThat(\"Expected condition met\", filterResult, equalToIgnoringCase(\"expected\"));\nassertThat(\"Expected condition met\", filterResult, hasSize(5));\nassertThat(\"Expected condition met\", filterResult, containsInAnyOrder(\"a\", \"b\", \"c\"));\nassertThat(\"Expected condition met\", filterResult, hasItem(\"item\"));\nassertThat(\"Expected condition met\", filterResult, hasItems(\"item1\", \"item2\"));\nassertThat(\"Expected condition met\", filterResult, notNullValue());\nassertThat(\"Expected condition met\", filterResult, nullValue());\nassertThat(\"Expected condition met\", filterResult, isA(String.class));\nassertThat(\"Expected condition met\", filterResult, is(not(equalTo(\"not expected\"))));\n====================\n\n",
    "scores": [
        0.784,
        0.619,
        0.602,
        0.591,
        0.51,
        0.494,
        0.489,
        0.473,
        0.468,
        0.458,
        0.454,
        0.444,
        0.424,
        0.423,
        0.415,
        0.4,
        0.4,
        0.4,
        0.338
    ],
    "ground_truth": "Assert.assertEquals(null,filterResult);"
}