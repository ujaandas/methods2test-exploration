{
    "prompt": "Below is the focal class and test class for reference:\n\npackage sofastack.sofa-bolt;\n\npublic class UserProcessorRegisterHelper {\npublic static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) {\nif ( null == processor ) {\nthrow new RuntimeException ( \"STR\" ) ;\n} if ( processor instanceof MultiInterestUserProcessor ) {\nregisterUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ;\n} else {\nif ( StringUtils . isBlank ( processor . interest ( ) ) ) {\nthrow new RuntimeException ( \"STR\" ) ;\n} UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ;\nif ( preProcessor != null ) {\nString errMsg = \"STR\" + processor . interest ( ) + \"STR\" ;\nthrow new RuntimeException ( errMsg ) ;\n} } }\n}\n\npackage sofastack.sofa-bolt;\n\npublic class UserProcessorRegisterHelperTest {\n@Test\npublic void testRegisterMultiInterestUserProcessor ( ) {\nUserProcessor multiInterestUserProcessor = new SimpleServerMultiInterestUserProcessor ( ) ;\nUserProcessorRegisterHelper . registerUserProcessor ( multiInterestUserProcessor , userProcessors ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertNotNull(preProcessor);\nAssert.assertEquals(multiInterestUserProcessor, preProcessor);\nAssert.assertTrue(userProcessors.containsKey(multiInterestUserProcessor.interest()));\nAssert.assertEquals(1, userProcessors.size());\nAssert.assertEquals(\"STR\", errMsg);\nAssert.assertThrows(RuntimeException.class, () -> UserProcessorRegisterHelper.registerUserProcessor(multiInterestUserProcessor, userProcessors));\nAssert.assertThrows(RuntimeException.class, () -> UserProcessorRegisterHelper.registerUserProcessor(null, userProcessors));\nAssert.assertThrows(RuntimeException.class, () -> UserProcessorRegisterHelper.registerUserProcessor(multiInterestUserProcessor, null));\nAssert.assertThrows(RuntimeException.class, () -> UserProcessorRegisterHelper.registerUserProcessor(null, null));\nAssert.assertEquals(1, userProcessors.size());\nAssert.assertNotNull(userProcessors.get(multiInterestUserProcessor.interest()));\nAssert.assertEquals(multiInterestUserProcessor, userProcessors.get(multiInterestUserProcessor.interest()));\nAssert.assertNull(userProcessors.putIfAbsent(multiInterestUserProcessor.interest(), multiInterestUserProcessor));\nAssert.assertEquals(1, userProcessors.size());\nAssert.assertNotNull(userProcessors.get(multiInterestUserProcessor.interest()));\nAssert.assertEquals(multiInterestUserProcessor, userProcessors.get(multiInterestUserProcessor.interest()));\nAssert.assertThrows(RuntimeException.class, () -> UserProcessorRegisterHelper.registerUserProcessor(multiInterestUserProcessor, userProcessors));\nAssert.assertEquals(1, userProcessors.size());\nAssert.assertNotNull(userProcessors.get(multiInterestUserProcessor.interest()));\n====================\n\n",
    "scores": [
        0.593,
        0.593,
        0.593,
        0.588,
        0.58,
        0.567,
        0.563,
        0.546,
        0.546,
        0.542,
        0.542,
        0.474,
        0.464,
        0.439,
        0.439,
        0.439,
        0.439,
        0.261,
        0.26
    ],
    "ground_truth": "Assert.assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());"
}