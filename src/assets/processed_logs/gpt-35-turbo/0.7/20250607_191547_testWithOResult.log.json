{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OSQLMethodKeys {\n@Override\npublic Object execute ( Object iThis , OIdentifiable iCurrentRecord , OCommandContext iContext , Object ioResult , Object [ ] iParams ) {\nif ( ioResult instanceof Map ) {\nreturn ( ( Map < ? , ? > ) ioResult ) . keySet ( ) ;\n} if ( ioResult instanceof ODocument ) {\nreturn Arrays . asList ( ( ( ODocument ) ioResult ) . fieldNames ( ) ) ;\n} if ( ioResult instanceof OResult ) {\nOResult res = ( OResult ) ioResult ;\nreturn res . getPropertyNames ( ) ;\n} if ( ioResult instanceof Collection ) {\nList result = new ArrayList ( ) ;\nfor ( Object o : ( Collection ) ioResult ) {\nresult . addAll ( ( Collection ) execute ( iThis , iCurrentRecord , iContext , o , iParams ) ) ;\n} return result ;\n} return null ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OSQLMethodKeysTest {\n@Test\npublic void testWithOResult ( ) {\nOResultInternal resultInternal = new OResultInternal ( ) ;\nresultInternal . setProperty ( \"STR\" , \"STR\" ) ;\nresultInternal . setProperty ( \"STR\" , \"STR\" ) ;\nObject result = function . execute ( null , null , null , resultInternal , null ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertNotNull(result);\nassertTrue(result instanceof List);\nList<String> keyList = (List<String>) result;\nassertEquals(2, keyList.size());\nassertTrue(keyList.contains(\"STR\"));\nassertFalse(keyList.contains(\"INT\"));\nassertFalse(keyList.contains(\"BOOL\"));\nassertFalse(keyList.contains(\"DECIMAL\"));\nassertFalse(keyList.contains(\"DATE\"));\nassertFalse(keyList.contains(\"LIST\"));\nassertFalse(keyList.contains(\"SET\"));\nassertFalse(keyList.contains(\"MAP\"));\nassertFalse(keyList.contains(\"LINK\"));\nassertFalse(keyList.contains(\"LINKSET\"));\nassertFalse(keyList.contains(\"LINKLIST\"));\nassertFalse(keyList.contains(\"LINKMAP\"));\nassertFalse(keyList.contains(\"BYTE\"));\nassertFalse(keyList.contains(\"SHORT\"));\nassertFalse(keyList.contains(\"LONG\"));\nassertFalse(keyList.contains(\"FLOAT\"));\nassertFalse(keyList.contains(\"DOUBLE\"));\nassertFalse(keyList.contains(\"BINARY\"));\n====================\n\n",
    "scores": [
        0.484,
        0.475,
        0.471,
        0.466,
        0.46,
        0.457,
        0.455,
        0.453,
        0.451,
        0.451,
        0.447,
        0.442,
        0.436,
        0.431,
        0.431,
        0.431,
        0.423,
        0.419,
        0.419,
        0.372,
        0.309,
        0.248
    ],
    "ground_truth": "assertEquals(newLinkedHashSet(Arrays.asList(\"STR\",\"STR\")),result);"
}