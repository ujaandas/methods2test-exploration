{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilter {\npublic String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilterTest {\n@Test\npublic void testCustomDepth ( ) throws MalformedURLException {\nURLFilter filter = createFilter ( \"STR\" , 1 ) ;\nURL url = new URL ( \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nmetadata . setValue ( MetadataTransfer . maxDepthKeyName , \"STR\" ) ;\nmetadata . setValue ( MetadataTransfer . depthKeyName , \"STR\" ) ;\nString filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "Assert.assertEquals(\"Expected result\", filterResult);\nAssert.assertNotNull(filterResult);\nAssert.assertNotEquals(\"Unexpected result\", filterResult);\nAssert.assertTrue(filterResult.contains(\"expected\"));\nAssert.assertFalse(filterResult.isEmpty());\nAssert.assertNull(filterResult);\nAssert.assertNotSame(\"Not the same object\", filterResult);\nAssert.assertArrayEquals(new String[]{\"expected1\", \"expected2\"}, filterResult.split(\",\"));\nAssert.assertTrue(filterResult.matches(\"[a-zA-Z0-9]+\"));\nAssert.assertEqualsIgnoringCase(\"Expected result\", filterResult);\nAssert.assertSame(\"Same object\", filterResult);\nAssert.assertTrue(filterResult.startsWith(\"http\"));\nAssert.assertFalse(filterResult.endsWith(\"pdf\"));\nAssert.assertTrue(filterResult.length() > 0);\nAssert.assertTrue(filterResult.containsIgnoreCase(\"EXPECTED\"));\nAssert.assertNotEquals(0, filterResult.length());\nAssert.assertThat(filterResult, CoreMatchers.containsString(\"expected\"));\nAssert.assertTrue(filterResult.matches(\"\\\\w+\"));\nAssert.assertTrue(filterResult.equals(\"expected\"));\nAssert.assertNotEquals(100, filterResult.length());\n====================\n\n",
    "scores": [
        0.733,
        0.674,
        0.647,
        0.621,
        0.62,
        0.607,
        0.595,
        0.561,
        0.548,
        0.523,
        0.512,
        0.495,
        0.492,
        0.483,
        0.467,
        0.467,
        0.457,
        0.442,
        0.412,
        0.378
    ],
    "ground_truth": "Assert.assertEquals(url.toExternalForm(),filterResult);"
}