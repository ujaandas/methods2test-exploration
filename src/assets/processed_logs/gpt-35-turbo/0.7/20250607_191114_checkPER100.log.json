{
    "prompt": "Below is the focal class and test class for reference:\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStr {\npublic String convert ( Double theMoney ) {\nif ( theMoney == null ) {\nthrow new IllegalArgumentException ( \"STR\" ) ;\n} Long intPart = theMoney . longValue ( ) ;\nLong fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ;\nif ( currency == Currency . PER1000 ) {\nfractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ;\n} return convert ( intPart , fractPart ) ;\n}\n}\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStrTest {\n@Test\npublic void checkPER100 ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"\u0441\u0442\u043e \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u0440\u0438 \u0440\u0443\u0431\u043b\u044f 45 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(123.45));\nassertEquals(\"\u0434\u0432\u0435\u0441\u0442\u0438 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(200.0));\nassertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0441\u043e\u0440\u043e\u043a \u0440\u0443\u0431\u043b\u0435\u0439 10 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(340.10));\nassertEquals(\"\u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u0434\u0432\u0430 \u0440\u0443\u0431\u043b\u044f 99 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(522.99));\nassertEquals(\"\u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0440\u0443\u0431\u043b\u0435\u0439 50 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(600.50));\nassertEquals(\"\u0432\u043e\u0441\u0435\u043c\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0448\u0435\u0441\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 78 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(876.78));\nassertEquals(\"\u0442\u044b\u0441\u044f\u0447\u0430 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(1000.0));\nassertEquals(\"\u0434\u0432\u0435 \u0442\u044b\u0441\u044f\u0447\u0438 \u0440\u0443\u0431\u043b\u0435\u0439 30 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(2000.30));\nassertEquals(\"\u0442\u0440\u0438 \u0442\u044b\u0441\u044f\u0447\u0438 \u0440\u0443\u0431\u043b\u0435\u0439 15 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(3000.15));\nassertEquals(\"\u0447\u0435\u0442\u044b\u0440\u0435 \u0442\u044b\u0441\u044f\u0447\u0438 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0440\u0443\u0431\u043b\u0435\u0439 99 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(4500.99));\nassertEquals(\"\u043f\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 50 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(5000.50));\nassertEquals(\"\u0448\u0435\u0441\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0441\u043e\u0440\u043e\u043a \u0440\u0443\u0431\u043b\u0435\u0439 60 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(6040.60));\nassertEquals(\"\u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u0432\u043e\u0441\u0435\u043c\u044c\u0441\u043e\u0442 \u0440\u0443\u0431\u043b\u0435\u0439 70 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(7800.70));\nassertEquals(\"\u0434\u0435\u0432\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0434\u0435\u0432\u044f\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 99 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(9999.99));\nassertEquals(\"\u0434\u0435\u0441\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439 0 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(10000.0));\nassertEquals(\"\u043f\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0440\u0443\u0431\u043b\u0435\u0439 25 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStr.convert(15500.25));\nassertEquals(\"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c\n====================\n\n",
    "scores": [
        0.678,
        0.667,
        0.645,
        0.645,
        0.644,
        0.633,
        0.633,
        0.633,
        0.618,
        0.603,
        0.589,
        0.585,
        0.583,
        0.582,
        0.556,
        0.507,
        0.373
    ],
    "ground_truth": "assertEquals(\"STR\",moneyToStrPER100.convert(V_1_01D));"
}