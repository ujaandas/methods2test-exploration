{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class PerformanceStatsCollector {\npublic String formatIntervalPerformanceNumbers ( String testId ) {\nPerformanceStats latest = get ( testId , false ) ;\nif ( latest . isEmpty ( ) || latest . getOperationCount ( ) < 1 ) {\nreturn \"STR\" ;\n} String latencyUnit = \"STR\" ;\nlong latencyAvg = NANOSECONDS . toMicros ( round ( latest . getIntervalLatencyAvgNanos ( ) ) ) ;\nlong latency999Percentile = NANOSECONDS . toMicros ( latest . getIntervalLatency999PercentileNanos ( ) ) ;\nlong latencyMax = NANOSECONDS . toMicros ( latest . getIntervalLatencyMaxNanos ( ) ) ;\nif ( latencyAvg > DISPLAY_LATENCY_AS_MICROS_MAX_VALUE ) {\nlatencyUnit = \"STR\" ;\nlatencyAvg = MICROSECONDS . toMillis ( latencyAvg ) ;\nlatency999Percentile = MICROSECONDS . toMillis ( latency999Percentile ) ;\nlatencyMax = MICROSECONDS . toMillis ( latencyMax ) ;\n} return format ( \"STR\" , formatLong ( latest . getOperationCount ( ) , OPERATION_COUNT_FORMAT_LENGTH ) , formatDouble ( latest . getIntervalThroughput ( ) , THROUGHPUT_FORMAT_LENGTH ) , formatLong ( latencyAvg , LATENCY_FORMAT_LENGTH ) , latencyUnit , formatLong ( latency999Percentile , LATENCY_FORMAT_LENGTH ) , latencyUnit , INTERVAL_LATENCY_PERCENTILE , formatLong ( latencyMax , LATENCY_FORMAT_LENGTH ) , latencyUnit ) ;\n}\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class PerformanceStatsCollectorTest {\n@Test\npublic void testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold ( ) throws Exception {\nSimulatorAddress worker = workerAddress ( 3 , 1 ) ;\nMap < String , PerformanceStats > performanceStats = new HashMap < String , PerformanceStats > ( ) ;\nperformanceStats . put ( TEST_CASE_ID_1 , new PerformanceStats ( 800 , 100 , 300 , SECONDS . toNanos ( 3 ) , MICROSECONDS . toNanos ( 2400 ) , MICROSECONDS . toNanos ( 2500 ) ) ) ;\nperformanceStatsCollector . update ( worker , performanceStats ) ;\nString performance = performanceStatsCollector . formatIntervalPerformanceNumbers ( TEST_CASE_ID_1 ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "assertEquals(\"800\", performance.substring(0, 3));\nassertEquals(\"100.0\", performance.substring(4, 8));\nassertEquals(\"2.4\", performance.substring(9, 12));\nassertEquals(\"\u00b5s\", performance.substring(13, 15));\nassertEquals(\"2.5\", performance.substring(16, 19));\nassertEquals(\"\u00b5s\", performance.substring(20, 22));\nassertEquals(\"99\", performance.substring(23, 25));\nassertEquals(\"2.5\", performance.substring(26, 29));\nassertEquals(\"\u00b5s\", performance.substring(30, 32));\nassertEquals(32, performance.length());\nassertEquals(\"800\", performance.substring(0, 3));\nassertEquals(\"100.0\", performance.substring(4, 8));\nassertEquals(\"2.4\", performance.substring(9, 12));\nassertEquals(\"\u00b5s\", performance.substring(13, 15));\nassertEquals(\"2.5\", performance.substring(16, 19));\nassertEquals(\"\u00b5s\", performance.substring(20, 22));\nassertEquals(\"99\", performance.substring(23, 25));\nassertEquals(\"2.5\", performance.substring(26, 29));\nassertEquals(\"\u00b5s\", performance.substring(30, 32));\nassertEquals(32, performance.length());\n====================\n\n",
    "scores": [
        0.658,
        0.658,
        0.612,
        0.612,
        0.605,
        0.605,
        0.605,
        0.605,
        0.605,
        0.605,
        0.605,
        0.605,
        0.605,
        0.605,
        0.598,
        0.598,
        0.598,
        0.598,
        0.598,
        0.598
    ],
    "ground_truth": "assertTrue(performance.contains(\"STR\"));"
}