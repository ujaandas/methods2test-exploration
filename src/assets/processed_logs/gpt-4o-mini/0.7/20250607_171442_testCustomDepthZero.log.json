{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilter {\npublic String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilterTest {\n@Test\npublic void testCustomDepthZero ( ) throws MalformedURLException {\nURLFilter filter = createFilter ( \"STR\" , 3 ) ;\nURL url = new URL ( \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nmetadata . setValue ( MetadataTransfer . maxDepthKeyName , \"STR\" ) ;\nString filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(filterResult);\nassertEquals(\"Expected Filter Result\", filterResult);\nassertTrue(filterResult.contains(\"Expected Substring\"));\nassertFalse(filterResult.isEmpty());\nassertEquals(\"Expected Result Length\", expectedLength, filterResult.length());\nassertTrue(filterResult.startsWith(\"Expected Prefix\"));\nassertTrue(filterResult.endsWith(\"Expected Suffix\"));\nassertNotEquals(\"Unexpected Result\", \"Unexpected Value\", filterResult);\nassertFalse(filterResult.equals(\"Not Expected Value\"));\nassertTrue(filterResult.matches(\"Expected Regex Pattern\"));\nassertArrayEquals(new String[]{\"Expected\", \"Values\"}, filterResult.split(\" \"));\nassertTrue(filterResult.indexOf(\"Substring\") >= 0);\nassertTrue(filterResult.contains(\"Another Expected Substring\"));\nassertEquals(\"Expected Filtered URL\", \"Expected URL\", filterResult);\nassertFalse(filterResult.contains(\"Unwanted Substring\"));\nassertThrows(IllegalArgumentException.class, () -> filter.filter(url, null, \"Invalid URL\"));\nassertTrue(filterResult.startsWith(\"Valid Start\"));\nassertNotEquals(\"Different Result\", filterResult, \"Different Expected Value\");\nassertNotSame(\"Reference Check\", new Object(), filterResult);\nassertTrue(filterResult.length() > 0);\nassertFalse(filterResult.equals(\"Empty String\"));\n```\n====================\n\n",
    "scores": [
        0.725,
        0.697,
        0.667,
        0.639,
        0.636,
        0.602,
        0.59,
        0.583,
        0.558,
        0.554,
        0.552,
        0.535,
        0.532,
        0.529,
        0.525,
        0.512,
        0.5,
        0.494,
        0.483,
        0.457,
        0.345,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(null,filterResult);"
}