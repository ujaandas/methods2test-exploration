{
    "prompt": "Below is the focal class and test class for reference:\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class AbstractServiceSetup {\nprotected final String getProperty ( final String name ) {\nreturn env . get ( name ) ;\n}\n}\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class AbstractServiceSetupTest {\n@Test\npublic void testGetProperty ( ) {\nMap < String , String > env = new HashMap < String , String > ( ) ;\nenv . put ( \"STR\" , \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nAbstractServiceSetup serviceSetup = new AbstractServiceSetup() {\n@Override\nprotected String getProperty(String name) {\nreturn env.get(name);\n}\n};\n\nassertEquals(\"STR\", serviceSetup.getProperty(\"STR\"));\nassertNull(serviceSetup.getProperty(\"NON_EXISTENT_KEY\"));\nenv.put(\"KEY1\", \"VALUE1\");\nassertEquals(\"VALUE1\", serviceSetup.getProperty(\"KEY1\"));\nenv.put(\"KEY2\", \"VALUE2\");\nassertEquals(\"VALUE2\", serviceSetup.getProperty(\"KEY2\"));\nassertNull(serviceSetup.getProperty(\"ANOTHER_NON_EXISTENT_KEY\"));\nenv.put(\"KEY3\", \"VALUE3\");\nassertEquals(\"VALUE3\", serviceSetup.getProperty(\"KEY3\"));\nenv.put(\"EMPTY_KEY\", \"\");\nassertEquals(\"\", serviceSetup.getProperty(\"EMPTY_KEY\"));\nenv.put(\"NULL_KEY\", null);\nassertNull(serviceSetup.getProperty(\"NULL_KEY\"));\nenv.put(\"KEY_WITH_SPACES\", \"VALUE WITH SPACES\");\nassertEquals(\"VALUE WITH SPACES\", serviceSetup.getProperty(\"KEY_WITH_SPACES\"));\nenv.put(\"KEY_WITH_SPECIAL_CHARS\", \"!@#$%^&*()\");\nassertEquals(\"!@#$%^&*()\", serviceSetup.getProperty(\"KEY_WITH_SPECIAL_CHARS\"));\nassertNull(serviceSetup.getProperty(\"MISSING_KEY\"));\nenv.put(\"NUMERIC_KEY\", \"12345\");\nassertEquals(\"12345\", serviceSetup.getProperty(\"NUMERIC_KEY\"));\nenv.put(\"KEY_WITH_NEWLINE\", \"VALUE\\nWITH\\nNEWLINE\");\nassertEquals(\"VALUE\\nWITH\\nNEWLINE\", serviceSetup.getProperty(\"KEY_WITH_NEWLINE\"));\nenv.put(\"LONG_KEY\", \"LONG_VALUE\");\nassertEquals(\"LONG_VALUE\", serviceSetup.getProperty(\"LONG_KEY\"));\nenv.put(\"KEY_WITH_TAB\", \"VALUE\\tWITH\\tTAB\");\nassertEquals(\"VALUE\\tWITH\\tTAB\", serviceSetup.getProperty(\"KEY_WITH_TAB\"));\nenv.put(\"REPEATED_KEY\", \"VALUE\");\nassertEquals(\"VALUE\", serviceSetup.getProperty(\"REPEATED_KEY\"));\nenv.put(\"CASE_SENSITIVE_KEY\", \"CaseSensitiveValue\");\nassertEquals(\"CaseSensitiveValue\", serviceSetup.getProperty(\"CASE_SENSITIVE_KEY\"));\nenv.put(\"KEY1\", \"NEW_VALUE1\");\nassertEquals(\"NEW_VALUE1\", serviceSetup.getProperty(\"KEY1\"));\n```\n====================\n\n",
    "scores": [
        0.832,
        0.712,
        0.686,
        0.686,
        0.686,
        0.667,
        0.661,
        0.661,
        0.637,
        0.618,
        0.608,
        0.598,
        0.595,
        0.594,
        0.592,
        0.585,
        0.58,
        0.544,
        0.321,
        0.274,
        0.25,
        0.247,
        0.243,
        0.243,
        0.243,
        0.243,
        0.234,
        0.231,
        0.229,
        0.22,
        0.22,
        0.217,
        0.2,
        0.0,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",create(env).getProperty(\"STR\"));"
}