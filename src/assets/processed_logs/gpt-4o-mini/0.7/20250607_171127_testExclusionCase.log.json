{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class TextExtractor {\npublic String text ( Element element ) {\nif ( noText ) return \"STR\" ;\nif ( inclusionPatterns . size ( ) == 0 && excludedTags . size ( ) == 0 ) {\nreturn _text ( element ) ;\n} Elements matches = new Elements ( ) ;\nfor ( String pattern : inclusionPatterns ) {\nmatches = element . select ( pattern ) ;\nif ( ! matches . isEmpty ( ) ) break ;\n} if ( matches . isEmpty ( ) ) {\nmatches . add ( element ) ;\n} final StringBuilder accum = new StringBuilder ( ) ;\nfor ( Element node : matches ) {\naccum . append ( _text ( node ) ) . append ( \"STR\" ) ;\n} return accum . toString ( ) . trim ( ) ;\n}\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class TextExtractorTest {\n@Test\npublic void testExclusionCase ( ) throws IOException {\nConfig conf = new Config ( ) ;\nconf . put ( TextExtractor . EXCLUDE_PARAM_NAME , \"STR\" ) ;\nTextExtractor extractor = new TextExtractor ( conf ) ;\nString content = \"STR\" ;\nDocument jsoupDoc = Parser . htmlParser ( ) . parseInput ( content , \"STR\" ) ;\nString text = extractor . text ( jsoupDoc . body ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(\"\", text);\nassertTrue(text.isEmpty());\nassertNotNull(text);\nassertFalse(text.contains(\"STR\"));\nassertNotEquals(\"STR\", text);\nassertEquals(\"Expected empty string when exclusion pattern matches\", \"\", text);\nassertTrue(\"Text should not contain excluded text\", !text.contains(\"STR\"));\nassertFalse(\"Text should not match exclusion pattern\", text.matches(\".*STR.*\"));\nassertThat(text, isEmptyOrNullString());\nassertEquals(\"Length of text should be 0\", 0, text.length());\nassertTrue(\"Text should be trimmed\", text.trim().isEmpty());\nassertFalse(\"Text should not have leading or trailing spaces\", text.startsWith(\" \") || text.endsWith(\" \"));\nassertNotSame(\"Text should not be equal to excluded content\", \"STR\", text);\nassertThat(\"Text must not contain exclusion string\", text, not(containsString(\"STR\")));\nassertEquals(\"Text extraction should return empty string\", \"\", text);\nassertFalse(\"Text should not contain any exclusion pattern\", text.contains(\"STR\"));\nassertTrue(\"Text should be empty after exclusion\", text.equals(\"\"));\nassertThat(\"Final text should be empty\", text, is(\"\"));\nassertEquals(\"Extracted text should be empty\", \"\", text);\nassertTrue(\"No text should have been extracted\", text.length() == 0);\n```\n====================\n\n",
    "scores": [
        0.941,
        0.792,
        0.651,
        0.568,
        0.561,
        0.545,
        0.52,
        0.518,
        0.472,
        0.447,
        0.444,
        0.43,
        0.419,
        0.392,
        0.381,
        0.37,
        0.353,
        0.33,
        0.323,
        0.322,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",text);"
}