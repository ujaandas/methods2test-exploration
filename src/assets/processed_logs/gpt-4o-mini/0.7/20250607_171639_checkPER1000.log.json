{
    "prompt": "Below is the focal class and test class for reference:\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStr {\npublic String convert ( Double theMoney ) {\nif ( theMoney == null ) {\nthrow new IllegalArgumentException ( \"STR\" ) ;\n} Long intPart = theMoney . longValue ( ) ;\nLong fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ;\nif ( currency == Currency . PER1000 ) {\nfractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ;\n} return convert ( intPart , fractPart ) ;\n}\n}\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStrTest {\n@Test\npublic void checkPER1000 ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(\"\u041e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(1000.0));\nassertEquals(\"\u0414\u0432\u0435 \u0442\u044b\u0441\u044f\u0447\u0438 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(2000.0));\nassertEquals(\"\u0422\u0440\u0438 \u0442\u044b\u0441\u044f\u0447\u0438 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(3000.0));\nassertEquals(\"\u0427\u0435\u0442\u044b\u0440\u0435 \u0442\u044b\u0441\u044f\u0447\u0438 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(4000.0));\nassertEquals(\"\u041f\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(5000.0));\nassertEquals(\"\u0428\u0435\u0441\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(6000.0));\nassertEquals(\"\u0421\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(7000.0));\nassertEquals(\"\u0412\u043e\u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(8000.0));\nassertEquals(\"\u0414\u0435\u0432\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(9000.0));\nassertEquals(\"\u0414\u0435\u0441\u044f\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(10000.0));\nassertEquals(\"\u041e\u0434\u0438\u043d\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(11000.0));\nassertEquals(\"\u0414\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(12000.0));\nassertEquals(\"\u0422\u0440\u0438\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(13000.0));\nassertEquals(\"\u0427\u0435\u0442\u044b\u0440\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(14000.0));\nassertEquals(\"\u041f\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(15000.0));\nassertEquals(\"\u0428\u0435\u0441\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(16000.0));\nassertEquals(\"\u0421\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(17000.0));\nassertEquals(\"\u0412\u043e\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(18000.0));\nassertEquals(\"\u0414\u0435\u0432\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(19000.0));\nassertEquals(\"\u0414\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447 \u0440\u0443\u0431\u043b\u0435\u0439\", new MoneyToStr().convert(20000.0));\n```\n====================\n\n",
    "scores": [
        0.655,
        0.639,
        0.638,
        0.638,
        0.638,
        0.634,
        0.632,
        0.628,
        0.627,
        0.627,
        0.622,
        0.618,
        0.618,
        0.618,
        0.613,
        0.613,
        0.608,
        0.608,
        0.608,
        0.608,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",moneyToStrPER1000.convert(12.346));"
}