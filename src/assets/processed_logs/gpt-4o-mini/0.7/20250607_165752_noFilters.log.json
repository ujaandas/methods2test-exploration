{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class WorkerQuery {\npublic List < WorkerData > execute ( List < WorkerData > input ) {\nswitch ( targetType ) {\ncase ALL : return select ( input , null ) ;\ncase MEMBER : return select ( input , true ) ;\ncase CLIENT : return select ( input , false ) ;\ncase PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ;\nreturn ! result . isEmpty ( ) ? result : select ( input , true ) ;\ndefault : throw new IllegalStateException ( \"STR\" + targetType ) ;\n} }\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class WorkerQueryTest {\n@Test\npublic void noFilters ( ) {\nlist . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ;\nlist . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ;\nlist . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ;\nList < WorkerData > result = new WorkerQuery ( ) . execute ( list ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(result);\nassertEquals(3, result.size());\nassertTrue(result.contains(new WorkerData(newParameters(agent1, 1, \"STR\", \"STR\"))));\nassertTrue(result.contains(new WorkerData(newParameters(agent1, 2, \"STR\", \"STR\"))));\nassertTrue(result.contains(new WorkerData(newParameters(agent1, 3, \"STR\", \"STR\"))));\nassertFalse(result.isEmpty());\nassertEquals(\"STR\", result.get(0).getSomeProperty()); // Replace getSomeProperty with actual property name\nassertEquals(\"STR\", result.get(1).getSomeProperty());\nassertEquals(\"STR\", result.get(2).getSomeProperty());\nassertNotEquals(result.get(0), result.get(1));\nassertNotEquals(result.get(1), result.get(2));\nassertNotEquals(result.get(0), result.get(2));\nassertTrue(result.stream().allMatch(workerData -> workerData.getAgent().equals(agent1))); // Modify as needed\nassertTrue(result.stream().allMatch(workerData -> workerData.getId() > 0));\nassertTrue(result.stream().allMatch(workerData -> workerData.getStatus().equals(\"STR\"))); // Modify as needed\nassertSame(result.get(0), new WorkerData(newParameters(agent1, 1, \"STR\", \"STR\")));\nassertSame(result.get(1), new WorkerData(newParameters(agent1, 2, \"STR\", \"STR\")));\nassertSame(result.get(2), new WorkerData(newParameters(agent1, 3, \"STR\", \"STR\")));\nassertEquals(result.get(0).getAgent(), agent1);\nassertEquals(result.get(1).getAgent(), agent1);\nassertEquals(result.get(2).getAgent(), agent1);\n```\n====================\n\n",
    "scores": [
        0.778,
        0.667,
        0.667,
        0.667,
        0.63,
        0.593,
        0.571,
        0.571,
        0.571,
        0.553,
        0.553,
        0.341,
        0.297,
        0.297,
        0.288,
        0.288,
        0.288,
        0.268,
        0.254,
        0.252,
        0.234,
        0.0
    ],
    "ground_truth": "assertEquals(list,result);"
}