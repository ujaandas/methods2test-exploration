{
    "prompt": "Below is the focal class and test class for reference:\n\npackage cucumber-ltd.cucumber-pro-plugin-jvm;\n\npublic class YamlConfigLoader {\npublic String getString ( String key ) {\nreturn getIn ( normalize ( key ) , false ) . getString ( ) ;\n}\n}\n\npackage cucumber-ltd.cucumber-pro-plugin-jvm;\n\npublic class YamlConfigLoaderTest {\n@Test\npublic void removes_underscores_from_keys ( ) {\nConfig config = new Config ( ) ;\nConfigLoader configLoader = new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) ;\nconfigLoader . load ( config ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(\"Expected value for STR1\", config.getString(\"STR1\"));\nassertEquals(\"Expected value for STR2\", config.getString(\"STR2\"));\nassertEquals(\"Expected value for STR3\", config.getString(\"STR3\"));\nassertNotNull(config.getString(\"STR1\"));\nassertNotNull(config.getString(\"STR2\"));\nassertNotNull(config.getString(\"STR3\"));\nassertTrue(config.getString(\"STR1\").length() > 0);\nassertTrue(config.getString(\"STR2\").length() > 0);\nassertTrue(config.getString(\"STR3\").length() > 0);\nassertEquals(\"Value for STR1 should match\", \"Expected value for STR1\", config.getString(\"STR1\"));\nassertEquals(\"Value for STR2 should match\", \"Expected value for STR2\", config.getString(\"STR2\"));\nassertEquals(\"Value for STR3 should match\", \"Expected value for STR3\", config.getString(\"STR3\"));\nassertThrows(SomeExpectedException.class, () -> config.getString(\"NON_EXISTENT_KEY\"));\nassertFalse(config.getString(\"STR1\").isEmpty());\nassertFalse(config.getString(\"STR2\").isEmpty());\nassertFalse(config.getString(\"STR3\").isEmpty());\nassertEquals(\"Default value if key doesn't exist\", \"default\", config.getString(\"NON_EXISTENT_KEY\", \"default\"));\nassertNotEquals(\"Should not return empty string\", \"\", config.getString(\"STR1\"));\nassertNotEquals(\"Should not return empty string\", \"\", config.getString(\"STR2\"));\nassertNotEquals(\"Should not return empty string\", \"\", config.getString(\"STR3\"));\nassertSame(\"Same instance expected for STR1\", config.getString(\"STR1\"), config.getString(\"STR1\"));\nassertSame(\"Same instance expected for STR2\", config.getString(\"STR2\"), config.getString(\"STR2\"));\nassertSame(\"Same instance expected for STR3\", config.getString(\"STR3\"), config.getString(\"STR3\"));\nassertTrue(config.getString(\"STR1\").contains(\"Expected substring\"));\nassertTrue(config.getString(\"STR2\").contains(\"Expected substring\"));\nassertTrue(config.getString(\"STR3\").contains(\"Expected substring\"));\n```\n====================\n\n",
    "scores": [
        0.827,
        0.827,
        0.805,
        0.805,
        0.805,
        0.768,
        0.756,
        0.756,
        0.756,
        0.711,
        0.711,
        0.711,
        0.707,
        0.707,
        0.707,
        0.662,
        0.662,
        0.662,
        0.587,
        0.587,
        0.587,
        0.567,
        0.567,
        0.567,
        0.538,
        0.528,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",config.getString(\"STR\"));"
}