{
    "prompt": "Below is the focal class and test class for reference:\n\npackage AlejandroRivera.embedded-rabbitmq;\n\npublic class ExtractorFactory {\npublic Extractor getNewInstance ( ) {\nExtractor extractor = new BasicExtractor ( config ) ;\nif ( config . shouldCachedDownload ( ) ) {\nextractor = new CachedExtractor ( extractor , config ) ;\n} return extractor ;\n}\n}\n\npackage AlejandroRivera.embedded-rabbitmq;\n\npublic class ExtractorFactoryTest {\n@Test\npublic void withCaching ( ) throws Exception {\nbuilder . useCachedDownload ( true ) ;\nExtractor extractor = new ExtractorFactory ( builder . build ( ) ) . getNewInstance ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(extractor);\nassertTrue(extractor instanceof CachedExtractor);\nassertEquals(extractor.getConfig(), builder.build());\nassertEquals(((CachedExtractor) extractor).getWrappedExtractor().getClass(), BasicExtractor.class);\nassertTrue(((CachedExtractor) extractor).isCachingEnabled());\nassertTrue(((CachedExtractor) extractor).getCache().isEmpty());\nassertTrue(extractor.getDataSource() instanceof CachedDataSource);\nassertEquals(extractor.getDataFormat(), \"expectedFormat\");\nassertNotNull(extractor.getCache());\nassertTrue(extractor.getCache().size() == 0);\nassertEquals(extractor.getExtractionStrategy(), \"expectedStrategy\");\nassertTrue(extractor.isInitialized());\nassertTrue(extractor.supportsStreaming());\nassertEquals(extractor.getCacheExpiration(), 3600);\nassertEquals(extractor.getMaxCacheSize(), 1024);\nassertTrue(extractor.getDownloadPolicy().isCached());\nassertNotNull(extractor.getMetrics());\nassertEquals(extractor.getMetrics().getCacheHits(), 0);\nassertEquals(extractor.getMetrics().getCacheMisses(), 0);\nassertTrue(extractor.getLogger() instanceof Logger);\nassertTrue(extractor.getExecutorService().isShutdown());\n```\n====================\n\n",
    "scores": [
        0.685,
        0.667,
        0.635,
        0.613,
        0.609,
        0.608,
        0.598,
        0.577,
        0.545,
        0.542,
        0.541,
        0.537,
        0.537,
        0.531,
        0.53,
        0.516,
        0.505,
        0.505,
        0.485,
        0.43,
        0.383,
        0.0
    ],
    "ground_truth": "assertTrue(extractor.getClass().equals(CachedExtractor.class));"
}