{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class TagUtils {\npublic static Map < String , String > parseTags ( String s ) {\nMap < String , String > result = new HashMap < > ( ) ;\nif ( \"STR\" . equals ( s ) ) {\nreturn result ;\n} for ( String keyValue : s . split ( \"STR\" ) ) {\nif ( keyValue . contains ( \"STR\" ) ) {\nString [ ] array = keyValue . split ( \"STR\" ) ;\nresult . put ( array [ 0 ] , array [ 1 ] ) ;\n} else {\nresult . put ( keyValue , \"STR\" ) ;\n} } return result ;\n}\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class TagUtilsTest {\n@Test\npublic void parseTags ( ) {\nMap < String , String > result = TagUtils . parseTags ( \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(result);\nassertTrue(result.isEmpty());\nassertEquals(0, result.size());\n\nresult = TagUtils.parseTags(\"key1STRvalue1STRkey2STRvalue2\");\nassertEquals(2, result.size());\nassertEquals(\"value1\", result.get(\"key1\"));\nassertEquals(\"value2\", result.get(\"key2\"));\n\nresult = TagUtils.parseTags(\"key3\");\nassertEquals(1, result.size());\nassertEquals(\"STR\", result.get(\"key3\"));\n\nresult = TagUtils.parseTags(\"key4STRvalue4\");\nassertEquals(1, result.size());\nassertEquals(\"value4\", result.get(\"key4\"));\n\nresult = TagUtils.parseTags(\"key5STRvalue5STRkey6\");\nassertEquals(2, result.size());\nassertEquals(\"value5\", result.get(\"key5\"));\nassertEquals(\"STR\", result.get(\"key6\"));\n\nresult = TagUtils.parseTags(\"key7STRvalue7STRkey8STRvalue8\");\nassertEquals(3, result.size());\nassertEquals(\"value7\", result.get(\"key7\"));\nassertEquals(\"value8\", result.get(\"key8\"));\n\nresult = TagUtils.parseTags(\"key9STRvalue9STRkey10STR\");\nassertEquals(3, result.size());\nassertEquals(\"value9\", result.get(\"key9\"));\nassertEquals(\"STR\", result.get(\"key10\"));\n\nresult = TagUtils.parseTags(\"key11\");\nassertEquals(1, result.size());\nassertEquals(\"STR\", result.get(\"key11\"));\n\nresult = TagUtils.parseTags(\"key12STRvalue12\");\nassertEquals(1, result.size());\nassertEquals(\"value12\", result.get(\"key12\"));\n```\n====================\n\n",
    "scores": [
        0.515,
        0.515,
        0.51,
        0.51,
        0.457,
        0.457,
        0.457,
        0.457,
        0.457,
        0.457,
        0.457,
        0.457,
        0.457,
        0.442,
        0.442,
        0.442,
        0.442,
        0.442,
        0.442,
        0.442,
        0.434,
        0.348,
        0.33,
        0.146,
        0.144,
        0.133,
        0.131,
        0.125,
        0.121,
        0.116,
        0.116,
        0.0
    ],
    "ground_truth": "assertEquals(toMap(\"STR\",\"STR\",\"STR\",\"STR\",\"STR\",\"STR\"),result);"
}