{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelect {\n@Override\npublic < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) {\ncheckOpenness ( ) ;\nreturn internal . query ( iCommand , iArgs ) ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelectTest {\n@Test\npublic void testMatchesWithQuotes3 ( ) {\nOSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ;\nList < ODocument > results = db . query ( sql ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(results);\nassertFalse(results.isEmpty());\nassertEquals(expectedSize, results.size());\nassertTrue(results.stream().allMatch(doc -> doc.containsField(\"someField\")));\nassertTrue(results.stream().anyMatch(doc -> \"expectedValue\".equals(doc.field(\"someField\"))));\nassertTrue(results.stream().anyMatch(doc -> doc.field(\"anotherField\") instanceof String));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"numericField\") instanceof Number));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"booleanField\") instanceof Boolean));\nassertEquals(\"expectedString\", results.get(0).field(\"someField\"));\nassertNotEquals(\"unexpectedString\", results.get(1).field(\"someField\"));\nassertEquals(100, results.get(2).field(\"numericField\"));\nassertTrue(results.get(3).field(\"booleanField\"));\nassertFalse(results.get(4).field(\"booleanField\"));\nassertTrue(results.stream().noneMatch(doc -> doc.field(\"nonExistentField\") != null));\nassertEquals(expectedDocumentId, results.get(5).getIdentity().toString());\nassertTrue(results.stream().allMatch(doc -> !doc.field(\"ignoredField\").equals(\"ignoredValue\")));\nassertNotEquals(\"unexpectedValue\", results.get(6).field(\"anotherField\"));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"dateField\") instanceof Date));\nassertTrue(results.stream().anyMatch(doc -> doc.field(\"listField\") instanceof List));\nassertTrue(results.stream().allMatch(doc -> ((List<?>) doc.field(\"listField\")).size() > 0));\nassertEquals(\"expectedOutput\", results.stream().map(doc -> doc.field(\"outputField\")).collect(Collectors.joining(\",\")));\n```\n====================\n\n",
    "scores": [
        0.789,
        0.733,
        0.619,
        0.582,
        0.567,
        0.553,
        0.538,
        0.515,
        0.505,
        0.49,
        0.404,
        0.397,
        0.382,
        0.382,
        0.382,
        0.372,
        0.365,
        0.365,
        0.362,
        0.35,
        0.341,
        0.0
    ],
    "ground_truth": "assertEquals(results.size(),1);"
}