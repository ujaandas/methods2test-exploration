{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilter {\npublic String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilterTest {\n@Test\npublic void testCustomDepth ( ) throws MalformedURLException {\nURLFilter filter = createFilter ( \"STR\" , 1 ) ;\nURL url = new URL ( \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nmetadata . setValue ( MetadataTransfer . maxDepthKeyName , \"STR\" ) ;\nmetadata . setValue ( MetadataTransfer . depthKeyName , \"STR\" ) ;\nString filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(filterResult);\nassertTrue(filterResult instanceof String);\nassertEquals(\"Expected Filter Result\", filterResult);\nassertFalse(filterResult.isEmpty());\nassertFalse(filterResult.contains(\"Invalid URL\"));\nassertTrue(filterResult.startsWith(\"http\"));\nassertTrue(filterResult.endsWith(\".com\"));\nassertEquals(\"Filtered URL should match expected format\", \"http://expected.com\", filterResult);\nassertTrue(filterResult.contains(\"depth\"));\nassertFalse(filterResult.contains(\"maxDepth\"));\nassertEquals(\"Depth should be 1\", 1, Integer.parseInt(metadata.getValue(MetadataTransfer.depthKeyName)));\nassertNotEquals(\"URL should not be the same\", url.toExternalForm(), filterResult);\nassertTrue(\"Filter result should not be null\", filterResult != null);\nassertFalse(\"Filter result should not equal original URL\", filterResult.equals(url.toExternalForm()));\nassertTrue(\"Filtered result should be a valid URL\", isValidURL(filterResult));\nassertTrue(\"Filter result should contain 'depth'\", filterResult.contains(\"depth\"));\nassertFalse(\"Filter result should not contain 'error'\", filterResult.contains(\"error\"));\nassertTrue(\"Filter result should have length greater than 10\", filterResult.length() > 10);\nassertTrue(\"Filtered URL should be accessible\", isAccessible(filterResult));\nassertEquals(\"Filter should not exceed max depth\", 1, getDepth(filterResult));\nassertNotSame(\"Filter result should be a new instance\", filterResult, url.toExternalForm());\n```\n====================\n\n",
    "scores": [
        0.777,
        0.688,
        0.564,
        0.561,
        0.537,
        0.522,
        0.505,
        0.5,
        0.495,
        0.484,
        0.483,
        0.477,
        0.477,
        0.472,
        0.468,
        0.467,
        0.462,
        0.462,
        0.441,
        0.435,
        0.384,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(url.toExternalForm(),filterResult);"
}