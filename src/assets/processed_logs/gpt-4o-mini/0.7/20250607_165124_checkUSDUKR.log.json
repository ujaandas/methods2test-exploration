{
    "prompt": "Below is the focal class and test class for reference:\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStr {\npublic String convert ( Double theMoney ) {\nif ( theMoney == null ) {\nthrow new IllegalArgumentException ( \"STR\" ) ;\n} Long intPart = theMoney . longValue ( ) ;\nLong fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ;\nif ( currency == Currency . PER1000 ) {\nfractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ;\n} return convert ( intPart , fractPart ) ;\n}\n}\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStrTest {\n@Test\npublic void checkUSDUKR ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(\"\u041e\u0434\u043d\u0430 \u0433\u0440\u0438\u0432\u043d\u0430\", new MoneyToStr().convert(1.00));\nassertEquals(\"\u0414\u0432\u0435 \u0433\u0440\u0438\u0432\u043d\u044b\", new MoneyToStr().convert(2.00));\nassertEquals(\"\u0422\u0440\u0438 \u0433\u0440\u0438\u0432\u043d\u044b\", new MoneyToStr().convert(3.00));\nassertEquals(\"\u0427\u0435\u0442\u044b\u0440\u0435 \u0433\u0440\u0438\u0432\u043d\u044b\", new MoneyToStr().convert(4.00));\nassertEquals(\"\u041f\u044f\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(5.00));\nassertEquals(\"\u0428\u0435\u0441\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(6.00));\nassertEquals(\"\u0421\u0435\u043c\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(7.00));\nassertEquals(\"\u0412\u043e\u0441\u0435\u043c\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(8.00));\nassertEquals(\"\u0414\u0435\u0432\u044f\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(9.00));\nassertEquals(\"\u0414\u0435\u0441\u044f\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(10.00));\nassertEquals(\"\u041e\u0434\u0438\u043d\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(11.00));\nassertEquals(\"\u0414\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(12.00));\nassertEquals(\"\u0422\u0440\u0438\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(13.00));\nassertEquals(\"\u0427\u0435\u0442\u044b\u0440\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(14.00));\nassertEquals(\"\u041f\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(15.00));\nassertEquals(\"\u0428\u0435\u0441\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(16.00));\nassertEquals(\"\u0421\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(17.00));\nassertEquals(\"\u0412\u043e\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(18.00));\nassertEquals(\"\u0414\u0435\u0432\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(19.00));\nassertEquals(\"\u0414\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u0433\u0440\u0438\u0432\u0435\u043d\", new MoneyToStr().convert(20.00));\n```\n====================\n\n",
    "scores": [
        0.75,
        0.731,
        0.724,
        0.724,
        0.717,
        0.71,
        0.71,
        0.71,
        0.704,
        0.696,
        0.691,
        0.679,
        0.679,
        0.679,
        0.673,
        0.673,
        0.673,
        0.667,
        0.667,
        0.667,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",moneyToStrUSD.convert(V_300D));"
}