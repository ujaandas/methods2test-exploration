{
    "prompt": "Below is the focal class and test class for reference:\n\npackage sofastack.sofa-bolt;\n\npublic class UserProcessorRegisterHelper {\npublic static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) {\nif ( null == processor ) {\nthrow new RuntimeException ( \"STR\" ) ;\n} if ( processor instanceof MultiInterestUserProcessor ) {\nregisterUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ;\n} else {\nif ( StringUtils . isBlank ( processor . interest ( ) ) ) {\nthrow new RuntimeException ( \"STR\" ) ;\n} UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ;\nif ( preProcessor != null ) {\nString errMsg = \"STR\" + processor . interest ( ) + \"STR\" ;\nthrow new RuntimeException ( errMsg ) ;\n} } }\n}\n\npackage sofastack.sofa-bolt;\n\npublic class UserProcessorRegisterHelperTest {\n@Test\npublic void testRegisterMultiInterestUserProcessor ( ) {\nUserProcessor multiInterestUserProcessor = new SimpleServerMultiInterestUserProcessor ( ) ;\nUserProcessorRegisterHelper . registerUserProcessor ( multiInterestUserProcessor , userProcessors ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(userProcessors);\nassertTrue(userProcessors.isEmpty());\n\nUserProcessor<?> retrievedProcessor = userProcessors.get(multiInterestUserProcessor.interest());\nassertNotNull(retrievedProcessor);\nassertEquals(multiInterestUserProcessor, retrievedProcessor);\n\nassertTrue(userProcessors.size() > 0);\nassertTrue(userProcessors.containsKey(multiInterestUserProcessor.interest()));\n\nUserProcessor<?> anotherProcessor = new SimpleServerMultiInterestUserProcessor();\nUserProcessorRegisterHelper.registerUserProcessor(anotherProcessor, userProcessors);\nassertEquals(2, userProcessors.size());\n\nassertThrows(RuntimeException.class, () -> {\nUserProcessorRegisterHelper.registerUserProcessor(null, userProcessors);\n});\n\nassertThrows(RuntimeException.class, () -> {\nUserProcessor invalidProcessor = new SimpleServerUserProcessor();\nUserProcessorRegisterHelper.registerUserProcessor(invalidProcessor, userProcessors);\n});\n\nassertThrows(RuntimeException.class, () -> {\nUserProcessor duplicateProcessor = new SimpleServerMultiInterestUserProcessor();\nUserProcessorRegisterHelper.registerUserProcessor(duplicateProcessor, userProcessors);\n});\n\nassertTrue(userProcessors.containsValue(multiInterestUserProcessor));\n\nUserProcessor<?> anotherMultiInterestProcessor = new SimpleServerMultiInterestUserProcessor();\nUserProcessorRegisterHelper.registerUserProcessor(anotherMultiInterestProcessor, userProcessors);\nassertTrue(userProcessors.containsValue(anotherMultiInterestProcessor));\n\nassertEquals(3, userProcessors.size());\n\nassertTrue(userProcessors.keySet().stream().allMatch(key -> !StringUtils.isBlank(key)));\n\nassertFalse(userProcessors.containsKey(\"non-existing-interest\"));\n\nassertThrows(RuntimeException.class, () -> {\nUserProcessor invalidInterestProcessor = new SimpleServerMultiInterestUserProcessor();\ninvalidInterestProcessor.setInterest(\"\"); // Assuming there's a method to set interest\nUserProcessorRegisterHelper.registerUserProcessor(invalidInterestProcessor, userProcessors);\n});\n\nassertEquals(3, userProcessors.size());\n\nassertTrue(userProcessors.values().stream().allMatch(proc -> proc instanceof MultiInterestUserProcessor));\n```\n====================\n\n",
    "scores": [
        0.596,
        0.591,
        0.588,
        0.552,
        0.55,
        0.526,
        0.526,
        0.503,
        0.466,
        0.443,
        0.439,
        0.439,
        0.439,
        0.435,
        0.419,
        0.414,
        0.402,
        0.4,
        0.395,
        0.383,
        0.377,
        0.364,
        0.344,
        0.325,
        0.305,
        0.287,
        0.264,
        0.016,
        0.016,
        0.016,
        0.016,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());"
}