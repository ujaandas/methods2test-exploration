{
    "prompt": "Below is the focal class and test class for reference:\n\npackage OpenLiberty.ci.common;\n\npublic class DevUtil {\nprotected void deleteFile ( File deletedFile , File dir , File targetDir , String targetFileName ) throws IOException {\nFile targetFile = getTargetFile ( deletedFile , dir , targetDir , targetFileName ) ;\nif ( targetFile . exists ( ) ) {\nif ( targetFile . isDirectory ( ) ) {\ntry {\nFileUtils . deleteDirectory ( targetFile ) ;\ninfo ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" ) ;\n} catch ( IllegalArgumentException e ) {\ndebug ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" + e . getMessage ( ) ) ;\n} catch ( IOException e ) {\nerror ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" + e . getMessage ( ) ) ;\n} } else {\nif ( targetFile . delete ( ) ) {\ninfo ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" ) ;\n} else {\nerror ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" ) ;\n} } } }\n}\n\npackage OpenLiberty.ci.common;\n\npublic class DevUtilTest {\n@Test\npublic void testDeleteFile ( ) throws Exception {\nFile tempSrcFile = new File ( srcDir , \"STR\" ) ;\nFiles . write ( tempSrcFile . toPath ( ) , \"STR\" . getBytes ( ) ) ;\nFile tempTargetFile = new File ( targetDir , \"STR\" ) ;\nFiles . write ( tempTargetFile . toPath ( ) , \"STR\" . getBytes ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertTrue(tempSrcFile.exists());\nassertTrue(tempTargetFile.exists());\nassertEquals(\"STR\", new String(Files.readAllBytes(tempSrcFile.toPath())));\nassertEquals(\"STR\", new String(Files.readAllBytes(tempTargetFile.toPath())));\ndevUtil.deleteFile(tempTargetFile, targetDir, targetDir, \"STR\");\nassertFalse(tempTargetFile.exists());\nassertFalse(tempTargetFile.isDirectory());\nassertFalse(tempSrcFile.exists());\nassertTrue(tempSrcFile.isFile());\nassertFalse(tempSrcFile.isDirectory());\nassertTrue(targetDir.isDirectory());\nassertTrue(targetDir.listFiles().length == 0);\nassertThrows(IOException.class, () -> {\ndevUtil.deleteFile(new File(\"non_existing_file\"), dir, targetDir, \"non_existing_file\");\n});\nassertTrue(targetDir.canRead());\nassertTrue(targetDir.canWrite());\nassertTrue(targetDir.canExecute());\nassertNotNull(devUtil);\nassertNotNull(tempSrcFile);\nassertNotNull(tempTargetFile);\nassertTrue(tempTargetFile.getCanonicalPath().endsWith(\"STR\"));\nassertTrue(targetDir.getCanonicalPath().endsWith(\"targetDir\"));\n```\n====================\n\n",
    "scores": [
        0.896,
        0.892,
        0.889,
        0.875,
        0.794,
        0.743,
        0.69,
        0.658,
        0.627,
        0.625,
        0.606,
        0.603,
        0.59,
        0.587,
        0.581,
        0.505,
        0.489,
        0.453,
        0.444,
        0.37,
        0.305,
        0.059,
        0.0
    ],
    "ground_truth": "assertTrue(tempSrcFile.exists());"
}