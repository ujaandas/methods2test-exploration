{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class WorkerQuery {\npublic List < WorkerData > execute ( List < WorkerData > input ) {\nswitch ( targetType ) {\ncase ALL : return select ( input , null ) ;\ncase MEMBER : return select ( input , true ) ;\ncase CLIENT : return select ( input , false ) ;\ncase PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ;\nreturn ! result . isEmpty ( ) ? result : select ( input , true ) ;\ndefault : throw new IllegalStateException ( \"STR\" + targetType ) ;\n} }\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class WorkerQueryTest {\n@Test\npublic void targetType_whenMember ( ) {\nlist . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ;\nlist . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ;\nlist . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ;\nlist . add ( new WorkerData ( newParameters ( agent1 , 4 , \"STR\" , \"STR\" ) ) ) ;\nList < WorkerData > result = new WorkerQuery ( ) . setTargetType ( TargetType . MEMBER ) . execute ( list ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(result);\nassertEquals(4, result.size());\nassertTrue(result.stream().allMatch(data -> data.isMember()));\nassertTrue(result.stream().noneMatch(data -> data.isClient()));\nassertTrue(result.stream().noneMatch(data -> data.isPreferClient()));\nassertTrue(result.stream().anyMatch(data -> data.getId() == 1));\nassertTrue(result.stream().anyMatch(data -> data.getId() == 2));\nassertTrue(result.stream().anyMatch(data -> data.getId() == 3));\nassertTrue(result.stream().anyMatch(data -> data.getId() == 4));\nassertTrue(result.stream().allMatch(data -> \"STR\".equals(data.getParameter())));\nassertFalse(result.stream().filter(data -> data.getId() == 5).findAny().isPresent());\nassertTrue(result.stream().map(WorkerData::getAgent).distinct().count() == 1);\nassertTrue(result.stream().allMatch(data -> data.getAgent().equals(agent1)));\nassertDoesNotThrow(() -> new WorkerQuery().setTargetType(TargetType.MEMBER).execute(result));\nassertEquals(result.get(0).getAgent(), agent1);\nassertEquals(result.get(1).getAgent(), agent1);\nassertEquals(result.get(2).getAgent(), agent1);\nassertEquals(result.get(3).getAgent(), agent1);\nassertTrue(result.stream().allMatch(data -> data.getStatus().equals(\"ACTIVE\")));\nassertTrue(result.stream().anyMatch(data -> data.getCreationTime() != null));\nassertTrue(result.stream().allMatch(data -> data.isActive()));\nassertTrue(result.stream().noneMatch(data -> data.isInactive()));\n```\n====================\n\n",
    "scores": [
        0.68,
        0.66,
        0.66,
        0.577,
        0.519,
        0.395,
        0.372,
        0.326,
        0.317,
        0.27,
        0.27,
        0.27,
        0.27,
        0.27,
        0.27,
        0.268,
        0.263,
        0.258,
        0.254,
        0.242,
        0.236,
        0.233,
        0.0
    ],
    "ground_truth": "assertEquals(asList(list.get(1),list.get(3)),result);"
}