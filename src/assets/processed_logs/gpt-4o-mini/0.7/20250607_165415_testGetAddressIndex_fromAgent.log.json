{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class SimulatorAddress {\npublic int getAddressIndex ( ) {\nswitch ( addressLevel ) {\ncase AGENT : return agentIndex ;\ncase WORKER : return workerIndex ;\ndefault : throw new IllegalArgumentException ( \"STR\" ) ;\n} }\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class SimulatorAddressTest {\n@Test\npublic void testGetAddressIndex_fromAgent ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nSimulatorAddress simulatorAddress = new SimulatorAddress();\nsimulatorAddress.setAddressLevel(AddressLevel.AGENT);\nsimulatorAddress.setAgentIndex(5);\nassertEquals(5, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAgentIndex(10);\nassertEquals(10, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAgentIndex(0);\nassertEquals(0, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAgentIndex(-1);\nassertEquals(-1, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAgentIndex(Integer.MAX_VALUE);\nassertEquals(Integer.MAX_VALUE, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAddressLevel(AddressLevel.WORKER);\nsimulatorAddress.setWorkerIndex(7);\nassertEquals(7, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(20);\nassertEquals(20, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(3);\nassertEquals(3, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(-5);\nassertEquals(-5, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(Integer.MIN_VALUE);\nassertEquals(Integer.MIN_VALUE, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAddressLevel(AddressLevel.AGENT);\nsimulatorAddress.setAgentIndex(15);\nassertEquals(15, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAgentIndex(30);\nassertEquals(30, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAgentIndex(1);\nassertEquals(1, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAgentIndex(-10);\nassertEquals(-10, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAddressLevel(AddressLevel.WORKER);\nsimulatorAddress.setWorkerIndex(25);\nassertEquals(25, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(0);\nassertEquals(0, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(100);\nassertEquals(100, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(-100);\nassertEquals(-100, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setWorkerIndex(Integer.MAX_VALUE);\nassertEquals(Integer.MAX_VALUE, simulatorAddress.getAddressIndex());\n\nsimulatorAddress.setAddressLevel(AddressLevel.AGENT);\nassertThrows(IllegalArgumentException.class, () -> simulatorAddress.getAddressIndex());\n```\n====================\n\n",
    "scores": [
        0.869,
        0.86,
        0.86,
        0.86,
        0.848,
        0.848,
        0.848,
        0.848,
        0.848,
        0.84,
        0.84,
        0.84,
        0.84,
        0.832,
        0.832,
        0.824,
        0.73,
        0.73,
        0.73,
        0.576,
        0.512,
        0.512,
        0.512,
        0.506,
        0.506,
        0.506,
        0.506,
        0.506,
        0.506,
        0.506,
        0.5,
        0.5,
        0.5,
        0.5,
        0.494,
        0.488,
        0.436,
        0.436,
        0.436,
        0.431,
        0.431,
        0.429,
        0.424,
        0.424,
        0.252,
        0.0
    ],
    "ground_truth": "assertEquals(5,agentAddress(5).getAddressIndex());"
}