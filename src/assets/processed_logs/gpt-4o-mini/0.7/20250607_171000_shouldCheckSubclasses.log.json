{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class CheckClassTypeStep {\ndefault Stream < OResult > stream ( ) {\nreturn StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class CheckClassTypeStepTest {\n@Test\npublic void shouldCheckSubclasses ( ) {\nOBasicCommandContext context = new OBasicCommandContext ( ) ;\ncontext . setDatabase ( database ) ;\nOClass parentClass = createClassInstance ( ) ;\nOClass childClass = createChildClassInstance ( parentClass ) ;\nCheckClassTypeStep step = new CheckClassTypeStep ( childClass . getName ( ) , parentClass . getName ( ) , context , false ) ;\nOResultSet result = step . syncPull ( context , 20 ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nAssert.assertNotNull(result);\nAssert.assertTrue(result.hasNext());\nAssert.assertEquals(20, result.getTotalRecords());\nAssert.assertTrue(result.stream().anyMatch(r -> r.getProperty(\"className\").equals(childClass.getName())));\nAssert.assertTrue(result.stream().anyMatch(r -> r.getProperty(\"className\").equals(parentClass.getName())));\nAssert.assertFalse(result.stream().anyMatch(r -> r.getProperty(\"className\").equals(\"NonExistentClass\")));\nAssert.assertTrue(result.stream().allMatch(r -> r.getProperty(\"parentClassName\").equals(parentClass.getName())));\nAssert.assertTrue(result.stream().allMatch(r -> r.getProperty(\"isSubclass\").equals(true)));\nAssert.assertTrue(result.stream().anyMatch(r -> r.getProperty(\"someProperty\") != null));\nAssert.assertEquals(\"ExpectedValue\", result.stream().findFirst().get().getProperty(\"someProperty\"));\nAssert.assertTrue(result.stream().allMatch(r -> r.getProperty(\"recordStatus\").equals(\"active\")));\nAssert.assertTrue(result.stream().noneMatch(r -> r.getProperty(\"recordStatus\").equals(\"inactive\")));\nAssert.assertEquals(5, result.stream().filter(r -> r.getProperty(\"level\") == 5).count());\nAssert.assertTrue(result.stream().anyMatch(r -> r.getProperty(\"timestamp\") != null));\nAssert.assertTrue(result.stream().allMatch(r -> r.getProperty(\"createdBy\").equals(\"testUser\")));\nAssert.assertTrue(result.stream().anyMatch(r -> r.getProperty(\"description\").contains(\"expected description\")));\nAssert.assertEquals(10, result.stream().filter(r -> r.getProperty(\"type\").equals(\"exampleType\")).count());\nAssert.assertTrue(result.stream().noneMatch(r -> r.getProperty(\"deprecated\").equals(true)));\nAssert.assertTrue(result.stream().anyMatch(r -> r.getProperty(\"active\") == true));\nAssert.assertNotNull(result.stream().findFirst().get().getProperty(\"id\"));\n```\n====================\n\n",
    "scores": [
        0.725,
        0.661,
        0.627,
        0.582,
        0.571,
        0.538,
        0.532,
        0.518,
        0.504,
        0.5,
        0.496,
        0.493,
        0.481,
        0.48,
        0.476,
        0.471,
        0.471,
        0.459,
        0.443,
        0.437,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(0,result.stream().count());"
}