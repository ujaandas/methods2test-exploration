{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class PropertyBindingSupport_bind0_Numerical {\nstatic boolean bind0 ( Object object , String property , String value ) {\nvalue = value . trim ( ) ;\nString [ ] path = property . split ( \"STR\" ) ;\nobject = findTargetObject ( object , property , path ) ;\nif ( object == null ) {\nreturn false ;\n} Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ;\nif ( field == null || isProbeField ( field ) ) {\nreturn false ;\n} try {\nsetField ( field , object , value ) ;\nreturn true ;\n} catch ( Exception e ) {\nthrow new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ;\n} }\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class PropertyBindingSupport_bind0_NumericalTest {\n@Test\npublic void bind_Double ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nObject testObject = new TestClass();\nString propertyName = \"testDoubleProperty\";\nString valueToBind = \"3.14\";\n\n// Assertion 1\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(3.14, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 2\nvalueToBind = \"2.718\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(2.718, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 3\nvalueToBind = \"-1.0\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(-1.0, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 4\nvalueToBind = \"0.0\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(0.0, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 5\nvalueToBind = \"100.5\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(100.5, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 6\nvalueToBind = \"Double.MAX_VALUE\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(Double.MAX_VALUE, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 7\nvalueToBind = \"Double.MIN_VALUE\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(Double.MIN_VALUE, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 8\nvalueToBind = \"NaN\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertTrue(Double.isNaN(testObject.getTestDoubleProperty()));\n\n// Assertion 9\nvalueToBind = \"Infinity\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));\nassertEquals(Double.POSITIVE_INFINITY, testObject.getTestDoubleProperty(), 0.001);\n\n// Assertion 10\n====================\n\n",
    "scores": [
        0.535,
        0.463,
        0.463,
        0.463,
        0.463,
        0.463,
        0.463,
        0.463,
        0.463,
        0.424,
        0.422,
        0.42,
        0.416,
        0.4,
        0.396,
        0.375,
        0.357,
        0.357,
        0.338,
        0.338,
        0.333,
        0.329,
        0.329,
        0.317,
        0.316,
        0.3,
        0.296,
        0.286,
        0.286,
        0.246
    ],
    "ground_truth": "assertTrue(bind0(testObject,\"STR\",\"STR\"));"
}