{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelect {\n@Override\npublic < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) {\ncheckOpenness ( ) ;\nreturn internal . query ( iCommand , iArgs ) ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelectTest {\n@Test\npublic void testAggregations ( ) {\nOSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ;\nList < ODocument > results = db . query ( sql ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(results);\nassertFalse(results.isEmpty());\nassertEquals(expectedSize, results.size());\nassertTrue(results.stream().allMatch(doc -> doc instanceof ODocument));\nassertTrue(results.stream().anyMatch(doc -> doc.containsField(\"fieldName1\")));\nassertTrue(results.stream().anyMatch(doc -> doc.getProperty(\"fieldName1\").equals(expectedValue1)));\nassertEquals(expectedValue2, results.get(0).getProperty(\"fieldName2\"));\nassertTrue(results.stream().allMatch(doc -> doc.getProperty(\"fieldName3\") instanceof String));\nassertTrue(results.stream().allMatch(doc -> (Integer) doc.getProperty(\"fieldName4\") > 0));\nassertTrue(results.stream().noneMatch(doc -> doc.getProperty(\"fieldName5\") == null));\nassertTrue(results.stream().anyMatch(doc -> doc.getProperty(\"fieldName6\").equals(expectedValue3)));\nassertEquals(expectedCount, results.stream().filter(doc -> doc.getProperty(\"fieldName7\").equals(targetValue)).count());\nassertTrue(results.stream().allMatch(doc -> doc.getProperty(\"fieldName8\") instanceof Date));\nassertTrue(results.stream().anyMatch(doc -> doc.getProperty(\"fieldName9\").toString().contains(\"substring\")));\nassertTrue(results.stream().allMatch(doc -> doc.getProperty(\"fieldName10\") instanceof List));\nassertTrue(results.stream().allMatch(doc -> ((List) doc.getProperty(\"fieldName10\")).size() > 0));\nassertFalse(results.stream().anyMatch(doc -> doc.getProperty(\"fieldName11\").equals(\"disallowedValue\")));\nassertEquals(expectedSum, results.stream().mapToInt(doc -> (Integer) doc.getProperty(\"fieldName12\")).sum());\nassertTrue(results.stream().anyMatch(doc -> doc.getProperty(\"fieldName13\").equals(expectedValue4)));\nassertEquals(expectedAverage, results.stream().mapToDouble(doc -> (Double) doc.getProperty(\"fieldName14\")).average().orElse(0.0), delta);\n```\n====================\n\n",
    "scores": [
        0.817,
        0.733,
        0.567,
        0.525,
        0.438,
        0.421,
        0.4,
        0.386,
        0.382,
        0.38,
        0.368,
        0.359,
        0.356,
        0.353,
        0.351,
        0.348,
        0.333,
        0.333,
        0.331,
        0.309,
        0.0
    ],
    "ground_truth": "assertEquals(1,results.size());"
}