{
    "prompt": "Below is the focal class and test class for reference:\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class DirectorySourceLoader {\n@Override\npublic Source load ( final String sourceFile ) throws IOException {\nInputStream stream = locate ( sourceFile ) ;\nif ( stream != null ) {\ntry ( Md5DigestInputStream ds = new Md5DigestInputStream ( stream ) ;\nInputStreamReader reader = new InputStreamReader ( ds , getSourceEncoding ( ) ) ) {\nString source = IOUtil . toString ( reader ) ;\nreturn new Source ( getFileName ( sourceFile ) , source , ds . getDigestHex ( ) ) ;\n} catch ( NoSuchAlgorithmException ex ) {\nthrow new IOException ( \"STR\" , ex ) ;\n} } else {\nreturn null ;\n} }\n}\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class DirectorySourceLoaderTest {\n@Test\npublic void testMissingSourceFileFromDirectory ( ) throws Exception {\nDirectorySourceLoader sourceLoader = new DirectorySourceLoader ( folder . getRoot ( ) , folder . getRoot ( ) , \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nFile missingFile = new File(folder.getRoot(), \"missingFile.txt\");\nSource result = sourceLoader.load(missingFile.getAbsolutePath());\nassertNull(result);\n\nFile existingFile = new File(folder.getRoot(), \"existingFile.txt\");\nFileUtils.writeStringToFile(existingFile, \"Sample content\", StandardCharsets.UTF_8);\nSource resultExisting = sourceLoader.load(existingFile.getAbsolutePath());\nassertNotNull(resultExisting);\n\nassertEquals(existingFile.getName(), resultExisting.getFileName());\nassertEquals(\"Sample content\", resultExisting.getSource());\nassertNotNull(resultExisting.getDigestHex());\nassertTrue(resultExisting.getDigestHex().length() > 0);\n\nassertThrows(IOException.class, () -> {\nsourceLoader.load(null);\n});\n\nassertThrows(IOException.class, () -> {\nsourceLoader.load(\"\");\n});\n\nFile nonReadableFile = new File(folder.getRoot(), \"nonReadableFile.txt\");\nnonReadableFile.setReadable(false);\nSource resultNonReadable = sourceLoader.load(nonReadableFile.getAbsolutePath());\nassertNull(resultNonReadable);\n\nFile emptyFile = new File(folder.getRoot(), \"emptyFile.txt\");\nFileUtils.writeStringToFile(emptyFile, \"\", StandardCharsets.UTF_8);\nSource resultEmpty = sourceLoader.load(emptyFile.getAbsolutePath());\nassertNotNull(resultEmpty);\nassertEquals(\"\", resultEmpty.getSource());\n\nassertNotNull(resultExisting.getDigestHex());\n\nFile specialCharFile = new File(folder.getRoot(), \"special@file.txt\");\nFileUtils.writeStringToFile(specialCharFile, \"Content with special characters !@#$%^&*()\", StandardCharsets.UTF_8);\nSource resultSpecialChar = sourceLoader.load(specialCharFile.getAbsolutePath());\nassertEquals(\"Content with special characters !@#$%^&*()\", resultSpecialChar.getSource());\n\nassertThrows(IOException.class, () -> {\nsourceLoader.load(\"invalidPath/file.txt\");\n});\n\nassertEquals(\"Sample content\", resultExisting.getSource());\nassertTrue(resultExisting.getDigestHex().length() > 0);\n```\n====================\n\n",
    "scores": [
        0.617,
        0.562,
        0.556,
        0.554,
        0.509,
        0.495,
        0.484,
        0.48,
        0.464,
        0.462,
        0.453,
        0.45,
        0.45,
        0.446,
        0.421,
        0.37,
        0.37,
        0.318,
        0.318,
        0.291,
        0.286,
        0.286,
        0.283,
        0.257,
        0.252,
        0.227,
        0.22,
        0.16,
        0.138,
        0.125,
        0.053,
        0.053,
        0.053,
        0.0
    ],
    "ground_truth": "assertNull(sourceLoader.load(\"STR\"));"
}