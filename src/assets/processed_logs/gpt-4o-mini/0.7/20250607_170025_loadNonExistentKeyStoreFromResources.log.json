{
    "prompt": "Below is the focal class and test class for reference:\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStore {\npublic static SSLServerSocketFactory makeSSLSocketFactory ( String keyAndTrustStoreClasspathPath , char [ ] passphrase ) throws IOException {\ntry {\nKeyStore keystore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ;\nInputStream keystoreStream = NanoHTTPD . class . getResourceAsStream ( keyAndTrustStoreClasspathPath ) ;\nif ( keystoreStream == null ) {\nthrow new IOException ( \"STR\" + keyAndTrustStoreClasspathPath ) ;\n} keystore . load ( keystoreStream , passphrase ) ;\nKeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ;\nkeyManagerFactory . init ( keystore , passphrase ) ;\nreturn makeSSLSocketFactory ( keystore , keyManagerFactory ) ;\n} catch ( Exception e ) {\nthrow new IOException ( e . getMessage ( ) ) ;\n} }\n}\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStoreTest {\n@Test\npublic void loadNonExistentKeyStoreFromResources ( ) throws Exception {\nString nonExistentPath = \"STR\" ;\nInputStream resourceAsStream = this . getClass ( ) . getResourceAsStream ( nonExistentPath ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNull(resourceAsStream);\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {}));\nassertThrows(IOException.class, () -> {\ntry {\nLoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {});\n} catch (IOException e) {\nassertEquals(\"STR\" + nonExistentPath, e.getMessage());\nthrow e;\n}\n});\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, null));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"invalid/path/to/keystore\", new char[] {}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'1', '2', '3', '4'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'a', 'b', 'c', 'd'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'k', 'e', 'y'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'t', 'e', 's', 't'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'s', 'e', 'c', 'r', 'e', 't'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'p', 'h', 'r', 'a', 's', 'e'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'t', 'e', 's', 't', '1'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[] {'t', 'e', 's', 't', '2'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonEx\n====================\n\n",
    "scores": [
        0.875,
        0.26,
        0.235,
        0.234,
        0.227,
        0.221,
        0.221,
        0.215,
        0.206,
        0.204,
        0.199,
        0.199,
        0.197,
        0.188,
        0.184,
        0.168,
        0.062,
        0.059
    ],
    "ground_truth": "assertNull(resourceAsStream);"
}