{
    "prompt": "Below is the focal class and test class for reference:\n\npackage arnohaase.a-foundation.a-foundation;\n\npublic class ADiGraph {\npublic boolean hasCycles ( ) {\nreturn ! minimalCycles ( ) . isEmpty ( ) ;\n}\n}\n\npackage arnohaase.a-foundation.a-foundation;\n\npublic class ADiGraphTest {\n@Test\npublic void testTree ( ) {\nfinal ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Arrays . asList ( edge ( \"STR\" , \"STR\" ) , edge ( \"STR\" , \"STR\" ) ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(graph);\nassertTrue(graph.hasCycles());\nassertEquals(2, graph.getEdges().size());\nassertTrue(graph.getVertices().contains(\"STR\"));\nassertFalse(graph.getVertices().isEmpty());\nassertTrue(graph.getEdges().stream().allMatch(edge -> edge.getSource().equals(\"STR\") && edge.getTarget().equals(\"STR\")));\nassertEquals(0, graph.getInDegree(\"STR\"));\nassertEquals(2, graph.getOutDegree(\"STR\"));\nassertTrue(graph.getAdjacentVertices(\"STR\").contains(\"STR\"));\nassertFalse(graph.getAdjacentVertices(\"STR\").isEmpty());\nassertTrue(graph.getEdges().stream().anyMatch(edge -> edge.getSource().equals(\"STR\") && edge.getTarget().equals(\"STR\")));\nassertFalse(graph.hasCycles());\nassertTrue(graph.isDirected());\nassertFalse(graph.isEmpty());\nassertEquals(1, graph.getVertexCount());\nassertEquals(2, graph.getEdgeCount());\nassertTrue(graph.containsVertex(\"STR\"));\nassertFalse(graph.containsVertex(\"NON_EXISTENT\"));\nassertTrue(graph.getEdges().stream().anyMatch(edge -> edge.getSource().equals(\"STR\")));\nassertTrue(graph.getEdges().stream().anyMatch(edge -> edge.getTarget().equals(\"STR\")));\nassertEquals(\"STR\", graph.getEdges().get(0).getSource());\nassertEquals(\"STR\", graph.getEdges().get(0).getTarget());\n```\n====================\n\n",
    "scores": [
        1.0,
        0.881,
        0.793,
        0.667,
        0.667,
        0.609,
        0.608,
        0.606,
        0.588,
        0.588,
        0.58,
        0.571,
        0.563,
        0.519,
        0.494,
        0.494,
        0.483,
        0.467,
        0.333,
        0.333,
        0.26,
        0.26,
        0.0
    ],
    "ground_truth": "assertFalse(graph.hasCycles());"
}