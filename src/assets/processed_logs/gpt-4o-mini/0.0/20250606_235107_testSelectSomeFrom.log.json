{
    "prompt": "Below is the focal class and test class for reference:\n\npackage redraiment.jactiverecord;\n\npublic class TSqlBuilder {\n@Override\npublic String toString ( ) ;\n}\n\npackage redraiment.jactiverecord;\n\npublic class TSqlBuilderTest {\n@Test\npublic void testSelectSomeFrom ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nTSqlBuilder sqlBuilder = new TSqlBuilder();\nString expected = \"SELECT * FROM SomeTable\";\nString actual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT Column1, Column2 FROM SomeTable\";\nsqlBuilder.select(\"Column1\", \"Column2\").from(\"SomeTable\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable WHERE Column1 = 'Value'\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").where(\"Column1 = 'Value'\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable ORDER BY Column1 ASC\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").orderBy(\"Column1 ASC\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable LIMIT 10\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").limit(10);\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT DISTINCT Column1 FROM SomeTable\";\nsqlBuilder.selectDistinct(\"Column1\").from(\"SomeTable\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable WHERE Column1 = 'Value' AND Column2 = 'Value2'\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").where(\"Column1 = 'Value' AND Column2 = 'Value2'\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable WHERE Column1 IN ('Value1', 'Value2')\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").where(\"Column1 IN ('Value1', 'Value2')\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable GROUP BY Column1\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").groupBy(\"Column1\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable HAVING COUNT(Column1) > 1\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").having(\"COUNT(Column1) > 1\");\nactual = sqlBuilder.toString();\nassertEquals(expected, actual);\n\nexpected = \"SELECT * FROM SomeTable WHERE Column1 LIKE 'Value%'\";\nsqlBuilder.select(\"*\").from(\"SomeTable\").where(\"Column1 LIKE 'Value%'\");\nactual = sqlBuilder.toString();\nassert\n====================\n\n",
    "scores": [
        0.5,
        0.481,
        0.464,
        0.459,
        0.453,
        0.447,
        0.447,
        0.447,
        0.447,
        0.447,
        0.447,
        0.447,
        0.447,
        0.447,
        0.447,
        0.443,
        0.431,
        0.43,
        0.42,
        0.417,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.387,
        0.234,
        0.231,
        0.218,
        0.216,
        0.216,
        0.214,
        0.211,
        0.205,
        0.2,
        0.198,
        0.176,
        0.167,
        0.117
    ],
    "ground_truth": "assertEquals(\"STR\",sql.select(\"STR\",\"STR\").from(\"STR\").toString());"
}