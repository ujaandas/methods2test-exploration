{
    "prompt": "Below is the focal class and test class for reference:\n\npackage adlnet.jxapi;\n\npublic class ActivityDefinition {\npublic ActivityDefinition ( HashMap < String , String > name , HashMap < String , String > description ) {\nthis . name = name ;\nthis . description = description ;\n}\n}\n\npackage adlnet.jxapi;\n\npublic class ActivityDefinitionTest {\n@Test\npublic void testActivityDefinitionHashMapOfStringStringHashMapOfStringString ( ) {\nHashMap < String , String > name = new HashMap < String , String > ( ) ;\nHashMap < String , String > description = new HashMap < String , String > ( ) ;\nname . put ( \"STR\" , \"STR\" ) ;\ndescription . put ( \"STR\" , \"STR\" ) ;\nActivityDefinition ad = new ActivityDefinition ( name , description ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(ad);\nassertEquals(name, ad.getName());\nassertEquals(description, ad.getDescription());\nassertTrue(ad.getName().containsKey(\"STR\"));\nassertTrue(ad.getDescription().containsKey(\"STR\"));\nassertEquals(\"STR\", ad.getName().get(\"STR\"));\nassertEquals(\"STR\", ad.getDescription().get(\"STR\"));\nassertEquals(1, ad.getName().size());\nassertEquals(1, ad.getDescription().size());\nassertFalse(ad.getName().isEmpty());\nassertFalse(ad.getDescription().isEmpty());\nassertNotEquals(new HashMap<String, String>(), ad.getName());\nassertNotEquals(new HashMap<String, String>(), ad.getDescription());\nassertTrue(ad.getName().keySet().contains(\"STR\"));\nassertTrue(ad.getDescription().keySet().contains(\"STR\"));\nassertEquals(\"STR\", ad.getName().get(\"STR\"));\nassertEquals(\"STR\", ad.getDescription().get(\"STR\"));\nassertNotSame(name, ad.getName());\nassertNotSame(description, ad.getDescription());\nassertTrue(ad.getName().equals(name));\nassertTrue(ad.getDescription().equals(description));\n```\n====================\n\n",
    "scores": [
        0.81,
        0.531,
        0.423,
        0.417,
        0.413,
        0.407,
        0.407,
        0.405,
        0.385,
        0.373,
        0.37,
        0.367,
        0.358,
        0.358,
        0.333,
        0.333,
        0.333,
        0.328,
        0.324,
        0.323,
        0.301,
        0.0
    ],
    "ground_truth": "assertNotNull(ad);"
}