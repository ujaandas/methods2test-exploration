{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilter {\npublic String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class MaxDepthFilterTest {\n@Test\npublic void testCustomDepthZero ( ) throws MalformedURLException {\nURLFilter filter = createFilter ( \"STR\" , 3 ) ;\nURL url = new URL ( \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nmetadata . setValue ( MetadataTransfer . maxDepthKeyName , \"STR\" ) ;\nString filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(filterResult);\nassertEquals(\"Expected result based on max depth\", filterResult);\nassertTrue(filterResult.contains(\"expectedSubstring\"));\nassertFalse(filterResult.isEmpty());\nassertEquals(\"Expected URL after filtering\", url.toExternalForm(), filterResult);\nassertTrue(filterResult.startsWith(\"http\"));\nassertTrue(filterResult.endsWith(\".com\"));\nassertFalse(filterResult.contains(\"forbiddenSubstring\"));\nassertEquals(\"Expected depth value\", \"3\", metadata.getValue(MetadataTransfer.maxDepthKeyName));\nassertNotEquals(\"Unexpected result\", \"unexpectedValue\", filterResult);\nassertTrue(filterResult.length() > 10);\nassertFalse(filterResult.equals(\"defaultValue\"));\nassertTrue(filterResult.matches(\"http[s]?://.*\"));\nassertNotSame(\"Should not be the same object\", filterResult, url.toExternalForm());\nassertTrue(filterResult.indexOf(\"http\") >= 0);\nassertTrue(filterResult.indexOf(\"://\") > 0);\nassertFalse(filterResult.contains(\"error\"));\nassertTrue(filterResult.contains(\"validSubstring\"));\nassertEquals(\"Expected metadata value\", \"STR\", metadata.getValue(\"someOtherKey\"));\nassertTrue(filterResult.equalsIgnoreCase(url.toExternalForm()));\nassertNotNull(metadata);\nassertTrue(filterResult.length() < 100);\n```\n====================\n\n",
    "scores": [
        0.697,
        0.667,
        0.652,
        0.639,
        0.627,
        0.622,
        0.618,
        0.585,
        0.583,
        0.583,
        0.582,
        0.568,
        0.568,
        0.529,
        0.525,
        0.512,
        0.494,
        0.453,
        0.447,
        0.444,
        0.333,
        0.314,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(null,filterResult);"
}