{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelect {\n@Override\npublic < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) {\ncheckOpenness ( ) ;\nreturn internal . query ( iCommand , iArgs ) ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelectTest {\n@Test\npublic void testAggregations ( ) {\nOSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ;\nList < ODocument > results = db . query ( sql ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(results);\nassertFalse(results.isEmpty());\nassertEquals(expectedSize, results.size());\nassertTrue(results.stream().allMatch(doc -> doc instanceof ODocument));\nassertTrue(results.stream().allMatch(doc -> doc.containsField(\"fieldName\")));\nassertEquals(expectedValue, results.get(0).field(\"fieldName\"));\nassertEquals(expectedValue, results.get(1).field(\"fieldName\"));\nassertEquals(expectedValue, results.get(2).field(\"fieldName\"));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"numericField\") instanceof Number));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"stringField\") instanceof String));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"booleanField\") instanceof Boolean));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"dateField\") instanceof Date));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"listField\") instanceof List));\nassertTrue(results.stream().allMatch(doc -> ((List) doc.field(\"listField\")).size() > 0));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"mapField\") instanceof Map));\nassertTrue(results.stream().allMatch(doc -> ((Map) doc.field(\"mapField\")).containsKey(\"key\")));\nassertEquals(expectedAggregationValue, results.get(0).field(\"aggregationField\"));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"fieldName\").toString().contains(\"expectedSubstring\")));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"numericField\") > 0));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"dateField\").after(startDate)));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"dateField\").before(endDate)));\n```\n====================\n\n",
    "scores": [
        0.817,
        0.733,
        0.593,
        0.593,
        0.593,
        0.567,
        0.495,
        0.438,
        0.416,
        0.407,
        0.404,
        0.393,
        0.389,
        0.382,
        0.382,
        0.372,
        0.368,
        0.365,
        0.362,
        0.347,
        0.307,
        0.0
    ],
    "ground_truth": "assertEquals(1,results.size());"
}