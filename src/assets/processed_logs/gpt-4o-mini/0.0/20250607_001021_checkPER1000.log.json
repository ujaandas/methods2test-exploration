{
    "prompt": "Below is the focal class and test class for reference:\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStr {\npublic String convert ( Double theMoney ) {\nif ( theMoney == null ) {\nthrow new IllegalArgumentException ( \"STR\" ) ;\n} Long intPart = theMoney . longValue ( ) ;\nLong fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ;\nif ( currency == Currency . PER1000 ) {\nfractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ;\n} return convert ( intPart , fractPart ) ;\n}\n}\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStrTest {\n@Test\npublic void checkPER1000 ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430\", new MoneyToStr().convert(1000.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u043d\u043e\u043b\u044c\", new MoneyToStr().convert(1000.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u043e\u0434\u0438\u043d\", new MoneyToStr().convert(1001.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0434\u0432\u0430\", new MoneyToStr().convert(1002.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0442\u0440\u0438\", new MoneyToStr().convert(1003.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0447\u0435\u0442\u044b\u0440\u0435\", new MoneyToStr().convert(1004.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u043f\u044f\u0442\u044c\", new MoneyToStr().convert(1005.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0448\u0435\u0441\u0442\u044c\", new MoneyToStr().convert(1006.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0441\u0435\u043c\u044c\", new MoneyToStr().convert(1007.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0432\u043e\u0441\u0435\u043c\u044c\", new MoneyToStr().convert(1008.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0434\u0435\u0432\u044f\u0442\u044c\", new MoneyToStr().convert(1009.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0434\u0435\u0441\u044f\u0442\u044c\", new MoneyToStr().convert(1010.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c\", new MoneyToStr().convert(1020.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c\", new MoneyToStr().convert(1030.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0441\u043e\u0440\u043e\u043a\", new MoneyToStr().convert(1040.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u043f\u044f\u0442\u044c\u0434\u0435\u0441\u044f\u0442\", new MoneyToStr().convert(1050.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0448\u0435\u0441\u0442\u044c\u0434\u0435\u0441\u044f\u0442\", new MoneyToStr().convert(1060.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442\", new MoneyToStr().convert(1070.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442\", new MoneyToStr().convert(1080.0));\nassertEquals(\"\u043e\u0434\u043d\u0430 \u0442\u044b\u0441\u044f\u0447\u0430 \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e\", new MoneyToStr().convert(1090.0));\n```\n====================\n\n",
    "scores": [
        0.684,
        0.667,
        0.661,
        0.661,
        0.661,
        0.661,
        0.655,
        0.655,
        0.655,
        0.65,
        0.65,
        0.65,
        0.65,
        0.639,
        0.639,
        0.633,
        0.633,
        0.633,
        0.628,
        0.623,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",moneyToStrPER1000.convert(12.346));"
}