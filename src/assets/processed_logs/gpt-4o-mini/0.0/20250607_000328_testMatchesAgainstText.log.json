{
    "prompt": "Below is the focal class and test class for reference:\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class Wildcards {\npublic static boolean matches ( final String text , final String wildcard ) {\nString pattern = wildcard . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) ;\nreturn ( text != null && text . matches ( pattern ) ) ;\n}\n}\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class WildcardsTest {\n@Test\npublic void testMatchesAgainstText ( ) throws Exception {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertTrue(Wildcards.matches(\"testString\", \"testSTR\"));\nassertTrue(Wildcards.matches(\"exampleString\", \"exampleSTR\"));\nassertFalse(Wildcards.matches(\"anotherString\", \"differentSTR\"));\nassertTrue(Wildcards.matches(\"wildcardString\", \"wildcardSTR\"));\nassertFalse(Wildcards.matches(\"stringTest\", \"testSTR\"));\nassertTrue(Wildcards.matches(\"stringExample\", \"stringSTR\"));\nassertFalse(Wildcards.matches(\"testString\", \"STR\"));\nassertTrue(Wildcards.matches(\"testString\", \"test*\"));\nassertTrue(Wildcards.matches(\"testString\", \"*String\"));\nassertFalse(Wildcards.matches(\"testString\", \"wrong*\"));\nassertTrue(Wildcards.matches(\"testString\", \"*test*\"));\nassertFalse(Wildcards.matches(\"testString\", \"test?\"));\nassertTrue(Wildcards.matches(\"testString\", \"te*t*\"));\nassertFalse(Wildcards.matches(\"testString\", \"t?stString\"));\nassertTrue(Wildcards.matches(\"testString\", \"t*String\"));\nassertFalse(Wildcards.matches(\"testString\", \"testStr\"));\nassertTrue(Wildcards.matches(\"testString\", \"test*String\"));\nassertFalse(Wildcards.matches(\"testString\", \"test*wrong\"));\nassertTrue(Wildcards.matches(\"testString\", \"t*st*\"));\nassertFalse(Wildcards.matches(\"testString\", \"wrong*String\"));\nassertTrue(Wildcards.matches(\"testString\", \"*\"));\n```\n====================\n\n",
    "scores": [
        0.831,
        0.804,
        0.8,
        0.796,
        0.796,
        0.796,
        0.792,
        0.792,
        0.787,
        0.78,
        0.777,
        0.777,
        0.771,
        0.768,
        0.729,
        0.723,
        0.716,
        0.712,
        0.707,
        0.693,
        0.687,
        0.0
    ],
    "ground_truth": "assertTrue(Wildcards.matches(\"STR\",\"STR\"));"
}