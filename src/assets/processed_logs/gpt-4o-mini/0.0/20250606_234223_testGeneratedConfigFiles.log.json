{
    "prompt": "Below is the focal class and test class for reference:\n\npackage OpenLiberty.ci.common;\n\npublic class DevUtil {\nprotected boolean isGeneratedConfigFile ( File fileChanged , File srcDir , File targetDir ) throws IOException {\nreturn ( fileChanged . getName ( ) . equals ( \"STR\" ) || fileChanged . getName ( ) . equals ( \"STR\" ) ) && isGeneratedTargetFile ( fileChanged , srcDir , targetDir ) ;\n}\n}\n\npackage OpenLiberty.ci.common;\n\npublic class DevUtilTest {\n@Test\npublic void testGeneratedConfigFiles ( ) throws Exception {\nFile sourceFile = new File ( configDirectory , \"STR\" ) ;\ncreateTargetFile ( sourceFile . getName ( ) , true ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertTrue(devUtil.isGeneratedConfigFile(sourceFile, srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"NOT_STR\"), srcDir, targetDir));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"OTHER\"), srcDir, targetDir));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), new File(\"invalidSrcDir\"), targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, new File(\"invalidTargetDir\")));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, new File(\"emptyTargetDir\")));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), new File(\"emptySrcDir\"), targetDir));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, new File(\"nonExistentTargetDir\")));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), new File(\"nonExistentSrcDir\"), targetDir));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, new File(\"invalidTargetDir\")));\nassertTrue(devUtil.isGeneratedConfigFile(new File(configDirectory, \"STR\"), srcDir, targetDir));\nassertFalse(devUtil.isGeneratedConfigFile(new File(configDirectory, \"NOT_STR\"), srcDir, targetDir));\n```\n====================\n\n",
    "scores": [
        0.802,
        0.802,
        0.802,
        0.802,
        0.802,
        0.802,
        0.802,
        0.802,
        0.8,
        0.754,
        0.746,
        0.746,
        0.698,
        0.698,
        0.691,
        0.681,
        0.681,
        0.677,
        0.677,
        0.0
    ],
    "ground_truth": "assertTrue(\"STR\",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));"
}