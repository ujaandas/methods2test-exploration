{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class ReflectionUtils {\npublic static void setFieldValue ( Object instance , Field field , Object value ) {\nfield . setAccessible ( true ) ;\nsetFieldValue0 ( instance , field , value ) ;\n}\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class ReflectionUtilsTest {\n@Test\npublic void testSetFieldValue ( ) {\nSetFieldTest setFieldTest = new SetFieldTest ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nField field = SetFieldTest.class.getDeclaredField(\"fieldName\");\nReflectionUtils.setFieldValue(setFieldTest, field, \"testValue\");\nassertEquals(\"testValue\", setFieldTest.getFieldName());\n\nfield = SetFieldTest.class.getDeclaredField(\"intField\");\nReflectionUtils.setFieldValue(setFieldTest, field, 42);\nassertEquals(42, setFieldTest.getIntField());\n\nfield = SetFieldTest.class.getDeclaredField(\"booleanField\");\nReflectionUtils.setFieldValue(setFieldTest, field, true);\nassertTrue(setFieldTest.isBooleanField());\n\nfield = SetFieldTest.class.getDeclaredField(\"doubleField\");\nReflectionUtils.setFieldValue(setFieldTest, field, 3.14);\nassertEquals(3.14, setFieldTest.getDoubleField(), 0.001);\n\nfield = SetFieldTest.class.getDeclaredField(\"charField\");\nReflectionUtils.setFieldValue(setFieldTest, field, 'A');\nassertEquals('A', setFieldTest.getCharField());\n\nfield = SetFieldTest.class.getDeclaredField(\"stringField\");\nReflectionUtils.setFieldValue(setFieldTest, field, \"Hello\");\nassertEquals(\"Hello\", setFieldTest.getStringField());\n\nfield = SetFieldTest.class.getDeclaredField(\"listField\");\nList<String> list = new ArrayList<>(Arrays.asList(\"one\", \"two\", \"three\"));\nReflectionUtils.setFieldValue(setFieldTest, field, list);\nassertEquals(list, setFieldTest.getListField());\n\nfield = SetFieldTest.class.getDeclaredField(\"mapField\");\nMap<String, String> map = new HashMap<>();\nmap.put(\"key\", \"value\");\nReflectionUtils.setFieldValue(setFieldTest, field, map);\nassertEquals(map, setFieldTest.getMapField());\n\nfield = SetFieldTest.class.getDeclaredField(\"objectField\");\nSomeObject obj = new SomeObject();\nReflectionUtils.setFieldValue(setFieldTest, field, obj);\nassertEquals(obj, setFieldTest.getObjectField());\n\nfield = SetFieldTest.class.getDeclaredField(\"nullableField\");\nReflectionUtils.setFieldValue(setFieldTest, field, null);\nassertNull(setFieldTest.getNullableField());\n\nfield = SetFieldTest.class.getDeclaredField(\"floatField\");\nReflectionUtils.setFieldValue(setFieldTest, field, 1.23f);\nassertEquals(1.23f, setFieldTest.getFloatField(), 0.001f);\n\nfield = SetFieldTest.class.getDeclaredField(\"\n====================\n\n",
    "scores": [
        0.81,
        0.771,
        0.759,
        0.753,
        0.75,
        0.741,
        0.732,
        0.69,
        0.674,
        0.667,
        0.659,
        0.543,
        0.532,
        0.523,
        0.517,
        0.517,
        0.517,
        0.517,
        0.511,
        0.511,
        0.511,
        0.511,
        0.511,
        0.505,
        0.505,
        0.495,
        0.494,
        0.489,
        0.478,
        0.478,
        0.474,
        0.473,
        0.468,
        0.466,
        0.215,
        0.194,
        0.172,
        0.111
    ],
    "ground_truth": "assertNull(setFieldTest.injectField);"
}