{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.graphdb;\n\npublic class OMatchStatementExecution {\n< RET > RET execute ( Object ... iArgs ) ;\n}\n\npackage orientechnologies.orientdb.graphdb;\n\npublic class OMatchStatementExecutionTest {\n@Test\npublic void testFriendsWithName ( ) throws Exception {\nList < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(qResult);\nassertFalse(qResult.isEmpty());\nassertEquals(expectedSize, qResult.size());\nassertTrue(qResult.stream().allMatch(doc -> doc.field(\"name\") != null));\nassertTrue(qResult.stream().allMatch(doc -> doc.field(\"relationship\").equals(\"friend\")));\nassertTrue(qResult.stream().anyMatch(doc -> doc.field(\"name\").equals(\"Alice\")));\nassertTrue(qResult.stream().anyMatch(doc -> doc.field(\"name\").equals(\"Bob\")));\nassertTrue(qResult.stream().anyMatch(doc -> doc.field(\"age\") > 18));\nassertTrue(qResult.stream().allMatch(doc -> doc.field(\"status\").equals(\"active\")));\nassertTrue(qResult.stream().anyMatch(doc -> doc.field(\"location\").equals(\"New York\")));\nassertEquals(\"Alice\", qResult.get(0).field(\"name\"));\nassertEquals(\"Bob\", qResult.get(1).field(\"name\"));\nassertNotEquals(qResult.get(0).field(\"id\"), qResult.get(1).field(\"id\"));\nassertTrue(qResult.stream().noneMatch(doc -> doc.field(\"status\").equals(\"inactive\")));\nassertTrue(qResult.stream().allMatch(doc -> doc.field(\"relationship\").equals(\"friend\") || doc.field(\"relationship\").equals(\"best friend\")));\nassertEquals(\"friend\", qResult.get(0).field(\"relationship\"));\nassertTrue(qResult.stream().allMatch(doc -> doc.field(\"age\") >= 18 && doc.field(\"age\") <= 65));\nassertTrue(qResult.stream().anyMatch(doc -> doc.field(\"hobby\").equals(\"reading\")));\nassertTrue(qResult.stream().anyMatch(doc -> doc.field(\"hobby\").equals(\"sports\")));\nassertTrue(qResult.stream().allMatch(doc -> doc.field(\"name\").length() > 0));\nassertTrue(qResult.stream().allMatch(doc -> doc.field(\"name\").matches(\"[A-Za-z ]+\")));\n```\n====================\n\n",
    "scores": [
        0.817,
        0.733,
        0.692,
        0.675,
        0.584,
        0.567,
        0.54,
        0.452,
        0.433,
        0.412,
        0.4,
        0.393,
        0.385,
        0.382,
        0.382,
        0.375,
        0.372,
        0.372,
        0.362,
        0.362,
        0.256,
        0.0
    ],
    "ground_truth": "assertEquals(1,qResult.size());"
}