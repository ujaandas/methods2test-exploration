{
    "prompt": "Below is the focal class and test class for reference:\n\npackage cucumber-ltd.cucumber-pro-plugin-jvm;\n\npublic class BambooEnvironmentVariables {\npublic Map < String , String > convert ( Map < String , String > env ) {\nMap < String , String > result = new HashMap < > ( ) ;\nfor ( String key : env . keySet ( ) ) {\nMatcher matcher = BAMBOO_PATTERN . matcher ( key ) ;\nif ( matcher . lookingAt ( ) ) {\nString value = env . get ( key ) ;\nString strippedVar = matcher . group ( 1 ) ;\nresult . put ( strippedVar , value ) ;\n} } result . putAll ( env ) ;\nreturn result ;\n}\n}\n\npackage cucumber-ltd.cucumber-pro-plugin-jvm;\n\npublic class BambooEnvironmentVariablesTest {\n@Test\npublic void duplicates_bamboo_prefixed_env_vars_with_prefixless_copy ( ) {\nHashMap < String , String > env = new HashMap < String , String > ( ) {\n{\nput ( \"STR\" , \"STR\" ) ;\n} } ;\nMap < String , String > convertedEnv = new BambooEnvironmentVariables ( ) . convert ( env ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(1, convertedEnv.size());\nassertTrue(convertedEnv.containsKey(\"STR\"));\nassertEquals(\"STR\", convertedEnv.get(\"STR\"));\nassertFalse(convertedEnv.containsKey(\"BAMBOO_STR\"));\nassertEquals(\"STR\", convertedEnv.get(\"STR\"));\nassertNotNull(convertedEnv);\nassertTrue(convertedEnv instanceof Map);\nassertTrue(convertedEnv.isEmpty() == false);\nassertEquals(\"STR\", convertedEnv.get(\"STR\"));\nassertFalse(convertedEnv.containsKey(\"BAMBOO_STR\"));\nassertTrue(convertedEnv.keySet().contains(\"STR\"));\nassertTrue(convertedEnv.values().contains(\"STR\"));\nassertEquals(\"STR\", convertedEnv.get(\"STR\"));\nassertNotEquals(\"BAMBOO_STR\", convertedEnv.get(\"STR\"));\nassertTrue(convertedEnv.size() > 0);\nassertTrue(convertedEnv.keySet().size() == 1);\nassertTrue(convertedEnv.values().size() == 1);\nassertTrue(convertedEnv.get(\"STR\").equals(\"STR\"));\nassertFalse(convertedEnv.containsKey(\"BAMBOO_STR\"));\nassertTrue(convertedEnv.get(\"STR\").equals(\"STR\"));\nassertTrue(convertedEnv.containsValue(\"STR\"));\nassertTrue(convertedEnv.keySet().toString().contains(\"STR\"));\n```\n====================\n\n",
    "scores": [
        1.0,
        1.0,
        1.0,
        1.0,
        0.896,
        0.721,
        0.698,
        0.696,
        0.696,
        0.682,
        0.681,
        0.681,
        0.681,
        0.674,
        0.674,
        0.658,
        0.629,
        0.605,
        0.602,
        0.581,
        0.55,
        0.548,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",convertedEnv.get(\"STR\"));"
}