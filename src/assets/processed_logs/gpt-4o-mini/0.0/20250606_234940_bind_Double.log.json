{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class PropertyBindingSupport_bind0_Numerical {\nstatic boolean bind0 ( Object object , String property , String value ) {\nvalue = value . trim ( ) ;\nString [ ] path = property . split ( \"STR\" ) ;\nobject = findTargetObject ( object , property , path ) ;\nif ( object == null ) {\nreturn false ;\n} Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ;\nif ( field == null || isProbeField ( field ) ) {\nreturn false ;\n} try {\nsetField ( field , object , value ) ;\nreturn true ;\n} catch ( Exception e ) {\nthrow new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ;\n} }\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class PropertyBindingSupport_bind0_NumericalTest {\n@Test\npublic void bind_Double ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nObject testObject = new TestClass();\nString property = \"testProperty\";\nString value = \"123.45\";\n\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(123.45, testObject.getTestProperty(), 0.001);\n\nvalue = \"  67.89  \";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(67.89, testObject.getTestProperty(), 0.001);\n\nvalue = \"0.0\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(0.0, testObject.getTestProperty(), 0.001);\n\nvalue = \"-45.67\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(-45.67, testObject.getTestProperty(), 0.001);\n\nvalue = \"NaN\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertTrue(Double.isNaN(testObject.getTestProperty()));\n\nvalue = \"Infinity\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(Double.POSITIVE_INFINITY, testObject.getTestProperty(), 0.001);\n\nvalue = \"-Infinity\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(Double.NEGATIVE_INFINITY, testObject.getTestProperty(), 0.001);\n\nvalue = \"abc\";\nassertFalse(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\n\nvalue = \"\";\nassertFalse(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\n\nvalue = \"  \";\nassertFalse(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\n\nvalue = \"123.456e2\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(12345.6, testObject.getTestProperty(), 0.001);\n\nvalue = \"1.23456789E-10\";\nassertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, property, value));\nassertEquals(1.23456789E-10, testObject.getTestProperty(), 0.001);\n\nvalue = \"1.797693134862\n====================\n\n",
    "scores": [
        0.568,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.452,
        0.448,
        0.448,
        0.448,
        0.421,
        0.417,
        0.417,
        0.412,
        0.404,
        0.375,
        0.333,
        0.333,
        0.286,
        0.246,
        0.241,
        0.231,
        0.204,
        0.204,
        0.192,
        0.192,
        0.185,
        0.182,
        0.172,
        0.164,
        0.159,
        0.129
    ],
    "ground_truth": "assertTrue(bind0(testObject,\"STR\",\"STR\"));"
}