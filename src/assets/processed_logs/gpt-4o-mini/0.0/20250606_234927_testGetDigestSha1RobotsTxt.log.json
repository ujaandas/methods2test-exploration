{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.external/warc;\n\npublic class WARCRecordFormat {\npublic static String getDigestSha1 ( byte [ ] bytes ) {\nreturn \"STR\" + base32 . encodeAsString ( DigestUtils . sha1 ( bytes ) ) ;\n}\n}\n\npackage DigitalPebble.storm-crawler.external/warc;\n\npublic class WARCRecordFormatTest {\n@Test\npublic void testGetDigestSha1RobotsTxt ( ) {\nString robotsTxt = \"STR\" ;\nbyte [ ] content = robotsTxt . getBytes ( StandardCharsets . UTF_8 ) ;\nString sha1str = \"STR\" ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nString expectedDigest = WARCRecordFormat.getDigestSha1(content);\nassertNotNull(expectedDigest);\nassertEquals(\"STR\" + base32.encodeAsString(DigestUtils.sha1(content)), expectedDigest);\nassertTrue(expectedDigest.startsWith(\"STR\"));\nassertEquals(32, expectedDigest.length());\nassertTrue(expectedDigest.matches(\"^[A-Z2-7]+=*$\"));\nassertFalse(expectedDigest.isEmpty());\nassertNotEquals(\"INVALID_DIGEST\", expectedDigest);\nassertEquals(expectedDigest, WARCRecordFormat.getDigestSha1(content));\nassertNotEquals(WARCRecordFormat.getDigestSha1(\"DIFFERENT_CONTENT\".getBytes(StandardCharsets.UTF_8)), expectedDigest);\nassertTrue(expectedDigest.contains(\"A\"));\nassertTrue(expectedDigest.contains(\"B\"));\nassertTrue(expectedDigest.contains(\"C\"));\nassertTrue(expectedDigest.contains(\"D\"));\nassertTrue(expectedDigest.contains(\"E\"));\nassertTrue(expectedDigest.contains(\"F\"));\nassertTrue(expectedDigest.contains(\"G\"));\nassertTrue(expectedDigest.contains(\"H\"));\nassertTrue(expectedDigest.contains(\"I\"));\nassertTrue(expectedDigest.contains(\"J\"));\nassertTrue(expectedDigest.contains(\"K\"));\nassertTrue(expectedDigest.contains(\"L\"));\nassertTrue(expectedDigest.contains(\"M\"));\nassertTrue(expectedDigest.contains(\"N\"));\nassertTrue(expectedDigest.contains(\"O\"));\nassertTrue(expectedDigest.contains(\"P\"));\nassertTrue(expectedDigest.contains(\"Q\"));\nassertTrue(expectedDigest.contains(\"R\"));\nassertTrue(expectedDigest.contains(\"S\"));\n```\n====================\n\n",
    "scores": [
        0.83,
        0.652,
        0.56,
        0.536,
        0.523,
        0.487,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.449,
        0.423,
        0.396,
        0.356,
        0.306,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",sha1str,WARCRecordFormat.getDigestSha1(content));"
}