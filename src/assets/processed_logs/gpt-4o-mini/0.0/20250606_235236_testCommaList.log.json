{
    "prompt": "Below is the focal class and test class for reference:\n\npackage redraiment.jactiverecord;\n\npublic class Seq {\npublic static String join ( Collection < ? > list , String delimiter ) {\nif ( list == null || list . isEmpty ( ) ) {\nreturn \"STR\" ;\n} if ( delimiter == null ) {\ndelimiter = \"STR\" ;\n} StringBuilder s = new StringBuilder ( ) ;\nboolean first = true ;\nfor ( Object e : list ) {\nif ( first ) {\nfirst = false ;\n} else {\ns . append ( delimiter ) ;\n} s . append ( e ) ;\n} return s . toString ( ) ;\n}\n}\n\npackage redraiment.jactiverecord;\n\npublic class SeqTest {\n@Test\npublic void testCommaList ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nimport static org.junit.Assert.assertEquals;\nimport java.util.Arrays;\nimport java.util.Collections;\n\n@Test\npublic void testCommaList() {\nassertEquals(\"STR\", Seq.join(null, \",\"));\nassertEquals(\"STR\", Seq.join(Collections.emptyList(), \",\"));\nassertEquals(\"a\", Seq.join(Collections.singletonList(\"a\"), \",\"));\nassertEquals(\"a\", Seq.join(Collections.singletonList(\"a\"), null));\nassertEquals(\"aSTRb\", Seq.join(Arrays.asList(\"a\", \"b\"), \"STR\"));\nassertEquals(\"a,b\", Seq.join(Arrays.asList(\"a\", \"b\"), \",\"));\nassertEquals(\"aSTRbSTRc\", Seq.join(Arrays.asList(\"a\", \"b\", \"c\"), \"STR\"));\nassertEquals(\"1STR2STR3\", Seq.join(Arrays.asList(1, 2, 3), \"STR\"));\nassertEquals(\"trueSTRfalse\", Seq.join(Arrays.asList(true, false), \"STR\"));\nassertEquals(\"nullSTRvalue\", Seq.join(Arrays.asList(null, \"value\"), \"STR\"));\nassertEquals(\"aSTRbSTRcSTRd\", Seq.join(Arrays.asList(\"a\", \"b\", \"c\", \"d\"), \"STR\"));\nassertEquals(\"1,2,3\", Seq.join(Arrays.asList(1, 2, 3), \",\"));\nassertEquals(\"aSTRbSTRcSTRdSTRe\", Seq.join(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\"), \"STR\"));\nassertEquals(\"apple,banana,cherry\", Seq.join(Arrays.asList(\"apple\", \"banana\", \"cherry\"), \",\"));\nassertEquals(\"1.1,2.2,3.3\", Seq.join(Arrays.asList(1.1, 2.2, 3.3), \",\"));\nassertEquals(\"xSTRySTRz\", Seq.join(Arrays.asList(\"x\", \"y\", \"z\"), \"STR\"));\nassertEquals(\"ASTRBSTRC\", Seq.join(Arrays.asList(\"A\", \"B\", \"C\"), \"STR\"));\nassertEquals(\"1STR2STR3STR4\", Seq.join(Arrays.asList(1, 2, 3, 4), \"STR\"));\nassertEquals(\"single\", Seq.join(Collections.singletonList(\"single\"), \",\"));\nassertEquals(\"STR\", Seq.join(Collections.singletonList(null),\n====================\n\n",
    "scores": [
        0.875,
        0.868,
        0.868,
        0.868,
        0.819,
        0.815,
        0.806,
        0.779,
        0.776,
        0.771,
        0.754,
        0.71,
        0.671,
        0.647,
        0.64,
        0.631,
        0.595,
        0.594,
        0.586,
        0.475,
        0.244,
        0.218,
        0.105
    ],
    "ground_truth": "Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));"
}