{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelect {\n@Override\npublic < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) {\ncheckOpenness ( ) ;\nreturn internal . query ( iCommand , iArgs ) ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelectTest {\n@Test\npublic void testMatchesWithQuotes3 ( ) {\nOSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ;\nList < ODocument > results = db . query ( sql ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(results);\nassertFalse(results.isEmpty());\nassertEquals(expectedSize, results.size());\nassertTrue(results.stream().allMatch(doc -> doc.containsField(\"fieldName\")));\nassertTrue(results.stream().anyMatch(doc -> \"expectedValue\".equals(doc.field(\"fieldName\"))));\nassertEquals(\"expectedValue\", results.get(0).field(\"fieldName\"));\nassertEquals(\"expectedValue\", results.get(1).field(\"fieldName\"));\nassertNotNull(results.get(0).field(\"anotherField\"));\nassertTrue(results.get(0).field(\"anotherField\") instanceof String);\nassertEquals(\"expectedString\", results.get(0).field(\"anotherField\"));\nassertTrue(results.stream().allMatch(doc -> doc.field(\"numericField\") instanceof Number));\nassertTrue(results.stream().allMatch(doc -> ((Number) doc.field(\"numericField\")).intValue() > 0));\nassertEquals(3, results.get(0).field(\"listField\").size());\nassertTrue(results.get(0).field(\"listField\").contains(\"listValue\"));\nassertNotNull(results.get(0).field(\"dateField\"));\nassertTrue(results.get(0).field(\"dateField\") instanceof Date);\nassertTrue(results.stream().allMatch(doc -> doc.field(\"booleanField\") instanceof Boolean));\nassertTrue(results.stream().anyMatch(doc -> doc.field(\"booleanField\")));\nassertEquals(\"expectedType\", results.get(0).getClass().getSimpleName());\nassertTrue(results.stream().allMatch(doc -> doc.field(\"nestedField\") instanceof ODocument));\nassertEquals(\"nestedValue\", results.get(0).field(\"nestedField\").field(\"nestedFieldName\"));\n```\n====================\n\n",
    "scores": [
        0.789,
        0.733,
        0.651,
        0.567,
        0.564,
        0.559,
        0.543,
        0.54,
        0.538,
        0.536,
        0.458,
        0.454,
        0.427,
        0.424,
        0.404,
        0.404,
        0.365,
        0.362,
        0.361,
        0.359,
        0.35,
        0.0
    ],
    "ground_truth": "assertEquals(results.size(),1);"
}