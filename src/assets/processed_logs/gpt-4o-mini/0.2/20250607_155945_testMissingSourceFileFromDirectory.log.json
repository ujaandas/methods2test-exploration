{
    "prompt": "Below is the focal class and test class for reference:\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class DirectorySourceLoader {\n@Override\npublic Source load ( final String sourceFile ) throws IOException {\nInputStream stream = locate ( sourceFile ) ;\nif ( stream != null ) {\ntry ( Md5DigestInputStream ds = new Md5DigestInputStream ( stream ) ;\nInputStreamReader reader = new InputStreamReader ( ds , getSourceEncoding ( ) ) ) {\nString source = IOUtil . toString ( reader ) ;\nreturn new Source ( getFileName ( sourceFile ) , source , ds . getDigestHex ( ) ) ;\n} catch ( NoSuchAlgorithmException ex ) {\nthrow new IOException ( \"STR\" , ex ) ;\n} } else {\nreturn null ;\n} }\n}\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class DirectorySourceLoaderTest {\n@Test\npublic void testMissingSourceFileFromDirectory ( ) throws Exception {\nDirectorySourceLoader sourceLoader = new DirectorySourceLoader ( folder . getRoot ( ) , folder . getRoot ( ) , \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nFile missingFile = new File(folder.getRoot(), \"missingFile.txt\");\nSource result = sourceLoader.load(missingFile.getPath());\nassertNull(result);\n\nFile existingFile = new File(folder.getRoot(), \"existingFile.txt\");\nFileUtils.writeStringToFile(existingFile, \"Sample content\", StandardCharsets.UTF_8);\nSource resultExisting = sourceLoader.load(existingFile.getPath());\nassertNotNull(resultExisting);\nassertEquals(\"existingFile.txt\", resultExisting.getFileName());\nassertEquals(\"Sample content\", resultExisting.getSource());\nassertNotNull(resultExisting.getDigestHex());\n\nFile emptyFile = new File(folder.getRoot(), \"emptyFile.txt\");\nFileUtils.writeStringToFile(emptyFile, \"\", StandardCharsets.UTF_8);\nSource resultEmpty = sourceLoader.load(emptyFile.getPath());\nassertNotNull(resultEmpty);\nassertEquals(\"emptyFile.txt\", resultEmpty.getFileName());\nassertEquals(\"\", resultEmpty.getSource());\nassertNotNull(resultEmpty.getDigestHex());\n\nFile nonReadableFile = new File(folder.getRoot(), \"nonReadableFile.txt\");\nnonReadableFile.setReadable(false);\nSource resultNonReadable = sourceLoader.load(nonReadableFile.getPath());\nassertNull(resultNonReadable);\n\nFile validFile = new File(folder.getRoot(), \"validFile.txt\");\nFileUtils.writeStringToFile(validFile, \"Valid content\", StandardCharsets.UTF_8);\nSource resultValid = sourceLoader.load(validFile.getPath());\nassertNotNull(resultValid);\nassertEquals(\"validFile.txt\", resultValid.getFileName());\nassertEquals(\"Valid content\", resultValid.getSource());\nassertNotNull(resultValid.getDigestHex());\n\nFile specialCharFile = new File(folder.getRoot(), \"sp\u00e9cial_char_file.txt\");\nFileUtils.writeStringToFile(specialCharFile, \"Content with special characters: \u00f1, \u00e9, \u00fc\", StandardCharsets.UTF_8);\nSource resultSpecialChar = sourceLoader.load(specialCharFile.getPath());\nassertNotNull(resultSpecialChar);\nassertEquals(\"sp\u00e9cial_char_file.txt\", resultSpecialChar.getFileName());\nassertEquals(\"Content with special characters: \u00f1, \u00e9, \u00fc\", resultSpecialChar.getSource());\nassertNotNull(resultSpecialChar.getDigestHex());\n\nFile longFileName = new File(folder.getRoot(), \"a_very_long_file_name_that_exceeds_normal_length.txt\");\nFileUtils.writeStringToFile(longFileName, \"Content for long file name\", StandardCharsets.UTF_8);\nSource resultLongFileName = sourceLoader\n====================\n\n",
    "scores": [
        0.556,
        0.554,
        0.543,
        0.539,
        0.522,
        0.516,
        0.5,
        0.49,
        0.484,
        0.482,
        0.481,
        0.468,
        0.468,
        0.466,
        0.462,
        0.45,
        0.441,
        0.421,
        0.386,
        0.37,
        0.324,
        0.293,
        0.291,
        0.286,
        0.286,
        0.264,
        0.264,
        0.264,
        0.252,
        0.247,
        0.229,
        0.227,
        0.211,
        0.16,
        0.143,
        0.138,
        0.129,
        0.128
    ],
    "ground_truth": "assertNull(sourceLoader.load(\"STR\"));"
}