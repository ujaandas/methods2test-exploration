{
    "prompt": "Below is the focal class and test class for reference:\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStore {\npublic static SSLServerSocketFactory makeSSLSocketFactory ( String keyAndTrustStoreClasspathPath , char [ ] passphrase ) throws IOException {\ntry {\nKeyStore keystore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ;\nInputStream keystoreStream = NanoHTTPD . class . getResourceAsStream ( keyAndTrustStoreClasspathPath ) ;\nif ( keystoreStream == null ) {\nthrow new IOException ( \"STR\" + keyAndTrustStoreClasspathPath ) ;\n} keystore . load ( keystoreStream , passphrase ) ;\nKeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ;\nkeyManagerFactory . init ( keystore , passphrase ) ;\nreturn makeSSLSocketFactory ( keystore , keyManagerFactory ) ;\n} catch ( Exception e ) {\nthrow new IOException ( e . getMessage ( ) ) ;\n} }\n}\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStoreTest {\n@Test\npublic void loadNonExistentKeyStoreFromResources ( ) throws Exception {\nString nonExistentPath = \"STR\" ;\nInputStream resourceAsStream = this . getClass ( ) . getResourceAsStream ( nonExistentPath ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNull(resourceAsStream);\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(nonExistentPath, null));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"invalid/path\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"another/invalid/path\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"nonexistent/keystore.jks\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"missing/keystore\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"wrong/keystore/path\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"nonexistent/keystore/file\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"invalid/keystore/location\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"not/a/keystore\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"empty/keystore\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"wrong/type/keystore\", new char[]{'p', 'a', 's', 's'}));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"keystore/with/no/password\", null));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"keystore/with/incorrect/password\", new char[]{'i', '\n====================\n\n",
    "scores": [
        0.875,
        0.225,
        0.225,
        0.222,
        0.218,
        0.218,
        0.211,
        0.209,
        0.209,
        0.204,
        0.199,
        0.186,
        0.176,
        0.168,
        0.153
    ],
    "ground_truth": "assertNull(resourceAsStream);"
}