{
    "prompt": "Below is the focal class and test class for reference:\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStr {\npublic String convert ( Double theMoney ) {\nif ( theMoney == null ) {\nthrow new IllegalArgumentException ( \"STR\" ) ;\n} Long intPart = theMoney . longValue ( ) ;\nLong fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ;\nif ( currency == Currency . PER1000 ) {\nfractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ;\n} return convert ( intPart , fractPart ) ;\n}\n}\n\npackage javadev.moneytostr-russian;\n\npublic class MoneyToStrTest {\n@Test\npublic void checkEURRUSCustom ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(\"\u043d\u043e\u043b\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(0.0));\nassertEquals(\"\u043e\u0434\u0438\u043d \u0440\u0443\u0431\u043b\u044c 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(1.0));\nassertEquals(\"\u0434\u0432\u0430 \u0440\u0443\u0431\u043b\u044f 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(2.0));\nassertEquals(\"\u0442\u0440\u0438 \u0440\u0443\u0431\u043b\u044f 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(3.0));\nassertEquals(\"\u0447\u0435\u0442\u044b\u0440\u0435 \u0440\u0443\u0431\u043b\u044f 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(4.0));\nassertEquals(\"\u043f\u044f\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(5.0));\nassertEquals(\"\u0448\u0435\u0441\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(6.0));\nassertEquals(\"\u0441\u0435\u043c\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(7.0));\nassertEquals(\"\u0432\u043e\u0441\u0435\u043c\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(8.0));\nassertEquals(\"\u0434\u0435\u0432\u044f\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(9.0));\nassertEquals(\"\u0434\u0435\u0441\u044f\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(10.0));\nassertEquals(\"\u043e\u0434\u0438\u043d\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(11.0));\nassertEquals(\"\u0434\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(12.0));\nassertEquals(\"\u0442\u0440\u0438\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(13.0));\nassertEquals(\"\u0447\u0435\u0442\u044b\u0440\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(14.0));\nassertEquals(\"\u043f\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(15.0));\nassertEquals(\"\u0448\u0435\u0441\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(16.0));\nassertEquals(\"\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(17.0));\nassertEquals(\"\u0432\u043e\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(18.0));\nassertEquals(\"\u0434\u0435\u0432\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00 \u043a\u043e\u043f\u0435\u0435\u043a\", new MoneyToStr().convert(19.0));\nassertEquals(\"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u0440\u0443\u0431\u043b\u0435\u0439 00\n====================\n\n",
    "scores": [
        0.673,
        0.655,
        0.649,
        0.644,
        0.643,
        0.643,
        0.638,
        0.638,
        0.632,
        0.632,
        0.623,
        0.618,
        0.607,
        0.607,
        0.607,
        0.602,
        0.602,
        0.597,
        0.597,
        0.597,
        0.39
    ],
    "ground_truth": "assertEquals(\"STR\",moneyToStrCustom.convert(V_300D));"
}