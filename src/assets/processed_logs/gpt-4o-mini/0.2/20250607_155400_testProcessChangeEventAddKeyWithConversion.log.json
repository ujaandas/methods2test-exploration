{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OPropertyMapIndexDefinition {\npublic void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) {\nfinal boolean result ;\nif ( indexBy . equals ( INDEX_BY . KEY ) ) result = processKeyChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ;\nelse result = processValueChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ;\nif ( ! result ) throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OPropertyMapIndexDefinitionTest {\n@Test\npublic void testProcessChangeEventAddKeyWithConversion ( ) {\nfinal Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ;\nfinal Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ;\nfinal OMultiValueChangeEvent < String , String > multiValueChangeEvent = new OMultiValueChangeEvent < String , String > ( OMultiValueChangeEvent . OChangeType . ADD , \"STR\" , \"STR\" ) ;\npropertyIndexByIntegerKey . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ;\nfinal Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ;\naddedKeys . put ( 12 , 1 ) ;\nfinal Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(1, keysToAdd.size());\nassertTrue(keysToAdd.containsKey(12));\nassertEquals(Integer.valueOf(1), keysToAdd.get(12));\nassertEquals(0, keysToRemove.size());\nassertFalse(keysToRemove.containsKey(12));\nassertFalse(keysToRemove.containsValue(1));\nassertTrue(propertyIndexByIntegerKey.isKeyPresent(12));\nassertFalse(propertyIndexByIntegerKey.isKeyPresent(13));\nassertEquals(1, propertyIndexByIntegerKey.getTotalKeys());\nassertTrue(propertyIndexByIntegerKey.hasKey(12));\nassertFalse(propertyIndexByIntegerKey.hasKey(13));\nassertNotNull(multiValueChangeEvent);\nassertEquals(OMultiValueChangeEvent.OChangeType.ADD, multiValueChangeEvent.getChangeType());\nassertEquals(\"STR\", multiValueChangeEvent.getOldValue());\nassertEquals(\"STR\", multiValueChangeEvent.getNewValue());\nassertNotNull(propertyIndexByIntegerKey);\nassertTrue(propertyIndexByIntegerKey.isInitialized());\nassertEquals(\"Expected key not found in keysToAdd\", 1, keysToAdd.size());\nassertEquals(\"Expected key not found in keysToRemove\", 0, keysToRemove.size());\nassertTrue(keysToAdd.keySet().contains(12));\nassertFalse(keysToRemove.keySet().contains(12));\n```\n====================\n\n",
    "scores": [
        0.676,
        0.658,
        0.629,
        0.578,
        0.568,
        0.553,
        0.551,
        0.525,
        0.517,
        0.507,
        0.466,
        0.463,
        0.462,
        0.432,
        0.42,
        0.409,
        0.409,
        0.406,
        0.395,
        0.391,
        0.293,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(keysToAdd,addedKeys);"
}