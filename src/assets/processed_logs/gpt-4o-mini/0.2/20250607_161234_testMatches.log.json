{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelect {\n@Override\npublic < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) {\ncheckOpenness ( ) ;\nreturn internal . query ( iCommand , iArgs ) ;\n}\n}\n\npackage orientechnologies.orientdb.core;\n\npublic class OCommandExecutorSQLSelectTest {\n@Test\npublic void testMatches ( ) {\nList < ? > result = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(result);\nassertFalse(result.isEmpty());\nassertTrue(result instanceof List);\nassertEquals(expectedSize, result.size());\nassertTrue(result.contains(expectedElement));\nassertTrue(result.get(0) instanceof ExpectedType);\nassertEquals(expectedValue, result.get(0).getProperty(\"propertyName\"));\nassertTrue(result.stream().allMatch(item -> item instanceof ExpectedType));\nassertEquals(expectedValueAtIndex1, result.get(1));\nassertNotEquals(unexpectedValue, result.get(2));\nassertTrue(result.stream().anyMatch(item -> item.getProperty(\"propertyName\").equals(expectedValue)));\nassertEquals(expectedString, result.get(3).toString());\nassertTrue(result.containsAll(expectedElements));\nassertFalse(result.contains(unexpectedElement));\nassertEquals(expectedValueAtIndex4, result.get(4).getAnotherProperty());\nassertTrue(result.size() <= maxSize);\nassertFalse(result.isEmpty());\nassertTrue(result.stream().allMatch(item -> item.getSomeProperty() != null));\nassertEquals(expectedType, result.get(5).getClass());\nassertTrue(result.stream().map(item -> item.getProperty(\"propertyName\")).collect(Collectors.toSet()).contains(expectedUniqueValue));\nassertNotNull(result.get(6).getAnotherProperty());\nassertEquals(expectedList, result.subList(0, 3));\n```\n====================\n\n",
    "scores": [
        0.783,
        0.724,
        0.724,
        0.698,
        0.667,
        0.64,
        0.615,
        0.6,
        0.585,
        0.557,
        0.553,
        0.552,
        0.521,
        0.513,
        0.494,
        0.49,
        0.485,
        0.474,
        0.404,
        0.396,
        0.315,
        0.253,
        0.0
    ],
    "ground_truth": "assertEquals(result.size(),1);"
}