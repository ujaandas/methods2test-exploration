{
    "prompt": "Below is the focal class and test class for reference:\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class WorkerQuery {\npublic List < WorkerData > execute ( List < WorkerData > input ) {\nswitch ( targetType ) {\ncase ALL : return select ( input , null ) ;\ncase MEMBER : return select ( input , true ) ;\ncase CLIENT : return select ( input , false ) ;\ncase PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ;\nreturn ! result . isEmpty ( ) ? result : select ( input , true ) ;\ndefault : throw new IllegalStateException ( \"STR\" + targetType ) ;\n} }\n}\n\npackage hazelcast.hazelcast-simulator.simulator;\n\npublic class WorkerQueryTest {\n@Test\npublic void noFilters ( ) {\nlist . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ;\nlist . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ;\nlist . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ;\nList < WorkerData > result = new WorkerQuery ( ) . execute ( list ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(result);\nassertEquals(3, result.size());\nassertTrue(result.contains(new WorkerData(newParameters(agent1, 1, \"STR\", \"STR\"))));\nassertTrue(result.contains(new WorkerData(newParameters(agent1, 2, \"STR\", \"STR\"))));\nassertTrue(result.contains(new WorkerData(newParameters(agent1, 3, \"STR\", \"STR\"))));\nassertFalse(result.isEmpty());\nassertEquals(\"Expected WorkerData for agent1, id 1\", new WorkerData(newParameters(agent1, 1, \"STR\", \"STR\")), result.get(0));\nassertEquals(\"Expected WorkerData for agent1, id 2\", new WorkerData(newParameters(agent1, 2, \"STR\", \"STR\")), result.get(1));\nassertEquals(\"Expected WorkerData for agent1, id 3\", new WorkerData(newParameters(agent1, 3, \"STR\", \"STR\")), result.get(2));\nassertTrue(result.stream().allMatch(data -> data.getAgent().equals(agent1)));\nassertTrue(result.stream().allMatch(data -> data.getId() >= 1 && data.getId() <= 3));\nassertTrue(result.stream().allMatch(data -> data.getType().equals(\"STR\")));\nassertFalse(result.stream().anyMatch(data -> data.getId() < 1));\nassertFalse(result.stream().anyMatch(data -> data.getId() > 3));\nassertEquals(\"STR\", result.get(0).getType());\nassertEquals(\"STR\", result.get(1).getType());\nassertEquals(\"STR\", result.get(2).getType());\nassertTrue(result.stream().allMatch(data -> data.getParameters().length == 4));\nassertTrue(result.stream().allMatch(data -> data.getParameters()[0].equals(agent1)));\nassertTrue(result.stream().allMatch(data -> data.getParameters()[1] instanceof Integer));\nassertTrue(result.stream().allMatch(data -> data.getParameters()[2].equals(\"STR\")));\nassertTrue(result.stream().allMatch(data -> data.getParameters()[3].equals(\"STR\")));\n```\n====================\n\n",
    "scores": [
        0.778,
        0.63,
        0.618,
        0.618,
        0.618,
        0.593,
        0.405,
        0.405,
        0.35,
        0.35,
        0.35,
        0.303,
        0.297,
        0.288,
        0.288,
        0.288,
        0.283,
        0.275,
        0.268,
        0.262,
        0.245,
        0.245,
        0.0
    ],
    "ground_truth": "assertEquals(list,result);"
}