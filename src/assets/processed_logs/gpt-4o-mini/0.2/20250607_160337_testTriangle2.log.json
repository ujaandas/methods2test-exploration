{
    "prompt": "Below is the focal class and test class for reference:\n\npackage orientechnologies.orientdb.graphdb;\n\npublic class OMatchStatementExecution {\n< RET > RET execute ( Object ... iArgs ) ;\n}\n\npackage orientechnologies.orientdb.graphdb;\n\npublic class OMatchStatementExecutionTest {\n@Test\npublic void testTriangle2 ( ) {\nStringBuilder query = new StringBuilder ( ) ;\nquery . append ( \"STR\" ) ;\nquery . append ( \"STR\" ) ;\nquery . append ( \"STR\" ) ;\nquery . append ( \"STR\" ) ;\nquery . append ( \"STR\" ) ;\nquery . append ( \"STR\" ) ;\nquery . append ( \"STR\" ) ;\nList < ODocument > result = db . command ( new OCommandSQL ( query . toString ( ) ) ) . execute ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(result);\nassertFalse(result.isEmpty());\nassertEquals(expectedSize, result.size());\nassertTrue(result.stream().allMatch(doc -> doc.containsField(\"field1\")));\nassertTrue(result.stream().allMatch(doc -> doc.containsField(\"field2\")));\nassertTrue(result.stream().allMatch(doc -> doc.field(\"field1\") instanceof String));\nassertTrue(result.stream().allMatch(doc -> doc.field(\"field2\") instanceof Integer));\nassertEquals(expectedValue1, result.get(0).field(\"field1\"));\nassertEquals(expectedValue2, result.get(0).field(\"field2\"));\nassertEquals(expectedValue3, result.get(1).field(\"field1\"));\nassertEquals(expectedValue4, result.get(1).field(\"field2\"));\nassertTrue(result.stream().anyMatch(doc -> doc.field(\"field3\").equals(expectedField3Value)));\nassertFalse(result.stream().anyMatch(doc -> doc.field(\"field4\").equals(unexpectedField4Value)));\nassertEquals(expectedDocumentId, result.get(0).getIdentity().toString());\nassertNotEquals(unexpectedDocumentId, result.get(1).getIdentity().toString());\nassertTrue(result.stream().map(doc -> doc.field(\"field5\")).distinct().count() > 1);\nassertTrue(result.stream().allMatch(doc -> doc.field(\"field6\") != null));\nassertTrue(result.stream().allMatch(doc -> doc.field(\"field7\").toString().length() > 0));\nassertTrue(result.stream().anyMatch(doc -> doc.field(\"field8\").equals(expectedField8Value)));\nassertEquals(expectedField9Value, result.get(result.size() - 1).field(\"field9\"));\nassertTrue(result.stream().allMatch(doc -> doc.field(\"field10\") instanceof List<?>));\n```\n====================\n\n",
    "scores": [
        0.812,
        0.724,
        0.621,
        0.598,
        0.598,
        0.598,
        0.552,
        0.528,
        0.5,
        0.476,
        0.412,
        0.404,
        0.404,
        0.374,
        0.374,
        0.37,
        0.367,
        0.361,
        0.354,
        0.336,
        0.336,
        0.0
    ],
    "ground_truth": "assertEquals(1,result.size());"
}