{
    "prompt": "Below is the focal class and test class for reference:\n\npackage redraiment.jactiverecord;\n\npublic class TSqlBuilder {\n@Override\npublic String toString ( ) ;\n}\n\npackage redraiment.jactiverecord;\n\npublic class TSqlBuilderTest {\n@Test\npublic void testSelectSomeFrom ( ) {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nTSqlBuilder sqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"column1\", \"column2\").from(\"table1\");\nassertEquals(\"SELECT column1, column2 FROM table1\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"*\").from(\"users\");\nassertEquals(\"SELECT * FROM users\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"name\").from(\"employees\").where(\"age > 30\");\nassertEquals(\"SELECT name FROM employees WHERE age > 30\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"id, email\").from(\"customers\").orderBy(\"created_at DESC\");\nassertEquals(\"SELECT id, email FROM customers ORDER BY created_at DESC\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"product_name\").from(\"products\").limit(10);\nassertEquals(\"SELECT product_name FROM products LIMIT 10\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"COUNT(*)\").from(\"orders\");\nassertEquals(\"SELECT COUNT(*) FROM orders\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"DISTINCT category\").from(\"items\");\nassertEquals(\"SELECT DISTINCT category FROM items\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"username\").from(\"users\").where(\"status = 'active'\");\nassertEquals(\"SELECT username FROM users WHERE status = 'active'\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"title, author\").from(\"books\").groupBy(\"author\");\nassertEquals(\"SELECT title, author FROM books GROUP BY author\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"SUM(amount)\").from(\"transactions\").where(\"date >= '2023-01-01'\");\nassertEquals(\"SELECT SUM(amount) FROM transactions WHERE date >= '2023-01-01'\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"MAX(salary)\").from(\"salaries\");\nassertEquals(\"SELECT MAX(salary) FROM salaries\", sqlBuilder.toString());\n\nsqlBuilder = new TSqlBuilder();\nsqlBuilder.select(\"MIN(price)\").from(\"products\").where(\"available = true\");\nassertEquals(\"SELECT MIN(price) FROM products WHERE available = true\", sqlBuilder.toString());\n\nsql\n====================\n\n",
    "scores": [
        0.6,
        0.562,
        0.541,
        0.533,
        0.533,
        0.522,
        0.511,
        0.5,
        0.49,
        0.477,
        0.474,
        0.451,
        0.45,
        0.444,
        0.443,
        0.437,
        0.436,
        0.432,
        0.429,
        0.418,
        0.403,
        0.4,
        0.391,
        0.367,
        0.214,
        0.194,
        0.194,
        0.194,
        0.194,
        0.194,
        0.194,
        0.194,
        0.194,
        0.194,
        0.194,
        0.194,
        0.087
    ],
    "ground_truth": "assertEquals(\"STR\",sql.select(\"STR\",\"STR\").from(\"STR\").toString());"
}