{
    "prompt": "Below is the focal class and test class for reference:\n\npackage fabric8io.fabric8-maven-plugin.core;\n\npublic class MapUtil {\npublic static < K , V > Map < K , V > mergeMaps ( Map < K , V > map1 , Map < K , V > map2 ) {\nMap < K , V > answer = new HashMap < > ( ) ;\nif ( map2 != null ) {\nanswer . putAll ( map2 ) ;\n} if ( map1 != null ) {\nanswer . putAll ( map1 ) ;\n} return answer ;\n}\n}\n\npackage fabric8io.fabric8-maven-plugin.core;\n\npublic class MapUtilTest {\n@Test\npublic void testMergeMaps ( ) {\nMap < String , String > mapA = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ;\nMap < String , String > mapB = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ;\nMap < String , String > expectedA = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ;\nMap < String , String > expectedB = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertEquals(expectedA, MapUtil.mergeMaps(mapA, mapB));\nassertEquals(expectedB, MapUtil.mergeMaps(mapB, mapA));\nassertEquals(expectedA, MapUtil.mergeMaps(mapA, null));\nassertEquals(mapA, MapUtil.mergeMaps(mapA, new HashMap<>()));\nassertEquals(mapB, MapUtil.mergeMaps(new HashMap<>(), mapB));\nassertEquals(new HashMap<>(), MapUtil.mergeMaps(null, null));\nassertEquals(mapA, MapUtil.mergeMaps(null, mapA));\nassertEquals(mapB, MapUtil.mergeMaps(mapB, null));\nassertEquals(expectedA, MapUtil.mergeMaps(createMap(\"A\", \"1\"), createMap(\"A\", \"2\")));\nassertEquals(expectedB, MapUtil.mergeMaps(createMap(\"B\", \"1\"), createMap(\"B\", \"2\")));\nassertEquals(expectedA, MapUtil.mergeMaps(createMap(\"A\", \"1\", \"B\", \"2\"), createMap(\"A\", \"3\", \"C\", \"4\")));\nassertEquals(expectedB, MapUtil.mergeMaps(createMap(\"X\", \"1\"), createMap(\"Y\", \"2\")));\nassertEquals(expectedA, MapUtil.mergeMaps(createMap(\"A\", \"1\"), createMap(\"A\", \"1\")));\nassertEquals(expectedB, MapUtil.mergeMaps(createMap(\"X\", \"1\", \"Y\", \"2\"), createMap(\"Y\", \"2\", \"Z\", \"3\")));\nassertEquals(expectedA, MapUtil.mergeMaps(createMap(\"A\", \"1\", \"B\", \"2\"), createMap(\"B\", \"2\", \"C\", \"3\")));\nassertEquals(expectedB, MapUtil.mergeMaps(createMap(\"X\", \"1\", \"Y\", \"2\"), createMap(\"Y\", \"3\", \"Z\", \"4\")));\nassertEquals(expectedA, MapUtil.mergeMaps(createMap(\"A\", \"1\"), createMap(\"B\", \"2\", \"A\", \"1\")));\nassertEquals(expectedB, MapUtil.mergeMaps(createMap(\"X\", \"1\"), createMap(\"Y\", \"2\", \"X\", \"1\")));\nassertEquals(expectedA, MapUtil.mergeMaps(createMap(\"A\", \"1\", \"B\", \"2\"), createMap(\"C\", \"3\", \"A\", \"1\")));\nassertEquals(expectedB, MapUtil.mergeMaps(createMap(\"X\", \"1\", \"Y\", \"2\"), createMap(\"Z\", \"\n====================\n\n",
    "scores": [
        0.942,
        0.929,
        0.923,
        0.808,
        0.789,
        0.788,
        0.771,
        0.742,
        0.742,
        0.727,
        0.714,
        0.712,
        0.679,
        0.676,
        0.671,
        0.667,
        0.662,
        0.662,
        0.635,
        0.635
    ],
    "ground_truth": "assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));"
}