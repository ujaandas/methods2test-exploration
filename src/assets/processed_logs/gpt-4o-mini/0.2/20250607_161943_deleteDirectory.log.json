{
    "prompt": "Below is the focal class and test class for reference:\n\npackage ExpediaGroup.beeju;\n\npublic class BeejuCore {\npublic Path warehouseDir ( ) {\nreturn warehouseDir ;\n}\n}\n\npackage ExpediaGroup.beeju;\n\npublic class BeejuCoreTest {\n@Test\npublic void deleteDirectory ( ) throws IOException {\nBeejuCore testCore = new BeejuCore ( ) ;\ntestCore . cleanUp ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nimport static org.junit.Assert.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\n@Test\npublic void deleteDirectory() throws IOException {\nBeejuCore testCore = new BeejuCore();\ntestCore.cleanUp();\n\nPath warehousePath = testCore.warehouseDir();\n\nassertFalse(Files.exists(warehousePath));\nassertTrue(Files.notExists(warehousePath));\nassertEquals(0, Files.list(warehousePath).count());\nassertTrue(Files.isDirectory(warehousePath));\nassertTrue(Files.isWritable(warehousePath));\nassertFalse(Files.isReadable(warehousePath));\nassertFalse(Files.isExecutable(warehousePath));\nassertTrue(Files.isHidden(warehousePath));\nassertTrue(Files.isSymbolicLink(warehousePath));\nassertTrue(Files.getLastModifiedTime(warehousePath).toMillis() < System.currentTimeMillis());\nassertEquals(0, Files.size(warehousePath));\nassertTrue(Files.getAttribute(warehousePath, \"basic:size\").equals(0L));\nassertTrue(Files.getAttribute(warehousePath, \"basic:lastModifiedTime\") != null);\nassertTrue(Files.getAttribute(warehousePath, \"basic:creationTime\") != null);\nassertTrue(Files.getAttribute(warehousePath, \"basic:isRegularFile\") == false);\nassertTrue(Files.getAttribute(warehousePath, \"basic:isDirectory\") == true);\nassertTrue(Files.getAttribute(warehousePath, \"basic:isSymbolicLink\") == false);\nassertTrue(Files.getAttribute(warehousePath, \"basic:isOther\") == false);\nassertTrue(Files.getAttribute(warehousePath, \"basic:isHidden\") == false);\nassertTrue(Files.getAttribute(warehousePath, \"basic:isReadable\") == false);\nassertTrue(Files.getAttribute(warehousePath, \"basic:isWritable\") == true);\n}\n```\n====================\n\n",
    "scores": [
        0.8,
        0.688,
        0.681,
        0.674,
        0.646,
        0.638,
        0.637,
        0.624,
        0.615,
        0.593,
        0.577,
        0.529,
        0.525,
        0.521,
        0.517,
        0.508,
        0.504,
        0.5,
        0.496,
        0.48,
        0.476,
        0.457,
        0.353,
        0.299,
        0.272,
        0.267,
        0.243,
        0.0
    ],
    "ground_truth": "assertFalse(Files.exists(testCore.warehouseDir()));"
}