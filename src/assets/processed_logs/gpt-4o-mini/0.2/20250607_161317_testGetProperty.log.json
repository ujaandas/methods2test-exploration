{
    "prompt": "Below is the focal class and test class for reference:\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class AbstractServiceSetup {\nprotected final String getProperty ( final String name ) {\nreturn env . get ( name ) ;\n}\n}\n\npackage trautonen.coveralls-maven-plugin;\n\npublic class AbstractServiceSetupTest {\n@Test\npublic void testGetProperty ( ) {\nMap < String , String > env = new HashMap < String , String > ( ) ;\nenv . put ( \"STR\" , \"STR\" ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nAbstractServiceSetup serviceSetup = new AbstractServiceSetup() {\n@Override\nprotected String getProperty(String name) {\nreturn env.get(name);\n}\n};\n\nassertEquals(\"STR\", serviceSetup.getProperty(\"STR\"));\nassertNull(serviceSetup.getProperty(\"NON_EXISTENT\"));\nassertEquals(\"\", serviceSetup.getProperty(\"EMPTY_STRING\"));\nenv.put(\"EMPTY_STRING\", \"\");\nassertEquals(\"VALUE\", serviceSetup.getProperty(\"VALUE\"));\nenv.put(\"VALUE\", \"VALUE\");\nassertEquals(\"VALUE\", serviceSetup.getProperty(\"VALUE\"));\nenv.put(\"NULL_VALUE\", null);\nassertNull(serviceSetup.getProperty(\"NULL_VALUE\"));\nenv.put(\"NUMERIC_STRING\", \"123\");\nassertEquals(\"123\", serviceSetup.getProperty(\"NUMERIC_STRING\"));\nenv.put(\"SPECIAL_CHAR\", \"!@#$%^&*()\");\nassertEquals(\"!@#$%^&*()\", serviceSetup.getProperty(\"SPECIAL_CHAR\"));\nenv.put(\"LONG_STRING\", \"This is a very long string for testing purposes.\");\nassertEquals(\"This is a very long string for testing purposes.\", serviceSetup.getProperty(\"LONG_STRING\"));\nenv.put(\"WHITESPACE\", \"   \");\nassertEquals(\"   \", serviceSetup.getProperty(\"WHITESPACE\"));\nenv.put(\"MIXED_CASE\", \"MixedCaseValue\");\nassertEquals(\"MixedCaseValue\", serviceSetup.getProperty(\"MIXED_CASE\"));\nenv.put(\"NUMERIC_KEY\", \"456\");\nassertEquals(\"456\", serviceSetup.getProperty(\"NUMERIC_KEY\"));\nenv.put(\"BOOLEAN_TRUE\", \"true\");\nassertEquals(\"true\", serviceSetup.getProperty(\"BOOLEAN_TRUE\"));\nenv.put(\"BOOLEAN_FALSE\", \"false\");\nassertEquals(\"false\", serviceSetup.getProperty(\"BOOLEAN_FALSE\"));\nenv.put(\"JSON_STRING\", \"{\\\"key\\\":\\\"value\\\"}\");\nassertEquals(\"{\\\"key\\\":\\\"value\\\"}\", serviceSetup.getProperty(\"JSON_STRING\"));\nenv.put(\"XML_STRING\", \"<key>value</key>\");\nassertEquals(\"<key>value</key>\", serviceSetup.getProperty(\"XML_STRING\"));\nenv.put(\"ESCAPED_CHAR\", \"Line1\\nLine2\");\nassertEquals(\"Line1\\nLine2\", serviceSetup.getProperty(\"ESCAPED_CHAR\"));\n```\n====================\n\n",
    "scores": [
        0.832,
        0.729,
        0.705,
        0.696,
        0.686,
        0.686,
        0.685,
        0.679,
        0.655,
        0.65,
        0.645,
        0.639,
        0.624,
        0.622,
        0.608,
        0.58,
        0.548,
        0.356,
        0.321,
        0.319,
        0.316,
        0.296,
        0.279,
        0.278,
        0.275,
        0.273,
        0.27,
        0.256,
        0.243,
        0.237,
        0.227,
        0.22,
        0.0,
        0.0
    ],
    "ground_truth": "assertEquals(\"STR\",create(env).getProperty(\"STR\"));"
}