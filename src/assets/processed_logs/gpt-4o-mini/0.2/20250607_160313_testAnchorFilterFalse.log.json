{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class BasicURLNormalizer {\npublic String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class BasicURLNormalizerTest {\n@Test\npublic void testAnchorFilterFalse ( ) throws MalformedURLException {\nURLFilter allAllowed = createFilter ( false , false ) ;\nURL url = new URL ( \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nString filterResult = allAllowed . filter ( url , metadata , url . toExternalForm ( ) ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(filterResult);\nassertEquals(\"Expected URL after filtering\", \"expectedUrl\", filterResult);\nassertTrue(\"Filter result should not be empty\", !filterResult.isEmpty());\nassertFalse(\"Filter result should not contain unwanted characters\", filterResult.contains(\"unwantedCharacter\"));\nassertTrue(\"Filter result should start with expected prefix\", filterResult.startsWith(\"expectedPrefix\"));\nassertTrue(\"Filter result should end with expected suffix\", filterResult.endsWith(\"expectedSuffix\"));\nassertEquals(\"Filter result should match expected pattern\", \"expectedPattern\", filterResult);\nassertNotEquals(\"Filter result should not match disallowed pattern\", \"disallowedPattern\", filterResult);\nassertTrue(\"Filter result should contain expected substring\", filterResult.contains(\"expectedSubstring\"));\nassertFalse(\"Filter result should not contain disallowed substring\", filterResult.contains(\"disallowedSubstring\"));\nassertTrue(\"Filter result should be a valid URL\", isValidURL(filterResult));\nassertTrue(\"Filter result should not exceed maximum length\", filterResult.length() <= MAX_LENGTH);\nassertTrue(\"Filter result should be normalized\", isNormalized(filterResult));\nassertFalse(\"Filter result should not be a duplicate\", isDuplicate(filterResult));\nassertTrue(\"Filter result should be in allowed domains\", isInAllowedDomains(filterResult));\nassertFalse(\"Filter result should not be in disallowed domains\", isInDisallowedDomains(filterResult));\nassertTrue(\"Filter result should not contain fragment\", !filterResult.contains(\"#\"));\nassertTrue(\"Filter result should not contain query parameters\", !filterResult.contains(\"?\"));\nassertTrue(\"Filter result should be encoded properly\", isProperlyEncoded(filterResult));\nassertEquals(\"Filter result should have expected scheme\", \"http\", getScheme(filterResult));\nassertTrue(\"Filter result should have expected port\", getPort(filterResult) == expectedPort);\n```\n====================\n\n",
    "scores": [
        0.591,
        0.576,
        0.549,
        0.537,
        0.512,
        0.508,
        0.496,
        0.492,
        0.471,
        0.47,
        0.464,
        0.462,
        0.453,
        0.439,
        0.429,
        0.427,
        0.415,
        0.411,
        0.384,
        0.375,
        0.371,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(url.toExternalForm(),filterResult);"
}