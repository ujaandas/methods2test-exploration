{
    "prompt": "Below is the focal class and test class for reference:\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStore {\npublic static SSLServerSocketFactory makeSSLSocketFactory ( String keyAndTrustStoreClasspathPath , char [ ] passphrase ) throws IOException {\ntry {\nKeyStore keystore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ;\nInputStream keystoreStream = NanoHTTPD . class . getResourceAsStream ( keyAndTrustStoreClasspathPath ) ;\nif ( keystoreStream == null ) {\nthrow new IOException ( \"STR\" + keyAndTrustStoreClasspathPath ) ;\n} keystore . load ( keystoreStream , passphrase ) ;\nKeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ;\nkeyManagerFactory . init ( keystore , passphrase ) ;\nreturn makeSSLSocketFactory ( keystore , keyManagerFactory ) ;\n} catch ( Exception e ) {\nthrow new IOException ( e . getMessage ( ) ) ;\n} }\n}\n\npackage NanoHttpd.nanohttpd.core;\n\npublic class LoadKeyStoreTest {\n@Test\npublic void loadKeyStoreFromResourcesWrongPassword ( ) throws Exception {\nString keyStorePath = \"STR\" ;\nInputStream resourceAsStream = this . getClass ( ) . getResourceAsStream ( keyStorePath ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(resourceAsStream);\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(keyStorePath, \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(keyStorePath, null));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(null, \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"invalidPath\", \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"nonexistentKeystore.jks\", \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"emptyKeystore.jks\", \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"corruptedKeystore.jks\", \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", new char[0]));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \" \".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"123456\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"password\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"wrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"anotherWrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"differentWrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"yetAnotherWrongPassword\".toCharArray()));\nassertThrows(IOException.class, () -> LoadKeyStore.makeSSLSocketFactory(\"validKeystore.jks\", \"wrongPasswordAgain\".toCharArray\n====================\n\n",
    "scores": [
        0.886,
        0.292,
        0.273,
        0.262,
        0.261,
        0.25,
        0.247,
        0.238,
        0.238,
        0.238,
        0.232,
        0.229,
        0.225,
        0.224,
        0.202,
        0.191,
        0.127,
        0.124
    ],
    "ground_truth": "assertNotNull(resourceAsStream);"
}