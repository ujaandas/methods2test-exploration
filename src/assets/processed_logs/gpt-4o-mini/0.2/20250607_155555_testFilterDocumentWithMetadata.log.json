{
    "prompt": "Below is the focal class and test class for reference:\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class BasicIndexing {\npublic void setValue ( String key , String value ) {\ncheckLockException ( ) ;\nmd . put ( key , new String [ ] {\nvalue } ) ;\n}\n}\n\npackage DigitalPebble.storm-crawler.core;\n\npublic class BasicIndexingTest {\n@Test\npublic void testFilterDocumentWithMetadata ( ) throws Exception {\nMap config = new HashMap ( ) ;\nconfig . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ;\nconfig . put ( AbstractIndexerBolt . metadataFilterParamName , \"STR\" ) ;\nMetadata metadata = new Metadata ( ) ;\nmetadata . setValue ( \"STR\" , \"STR\" ) ;\nprepareIndexerBolt ( config ) ;\nindex ( URL , metadata ) ;\nMap < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ;\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nassertNotNull(fields);\nassertTrue(fields.containsKey(\"STR\"));\nassertEquals(\"STR\", fields.get(\"STR\"));\nassertEquals(1, fields.size());\nassertTrue(fields.containsKey(\"urlField\"));\nassertEquals(\"expectedUrlValue\", fields.get(\"urlField\"));\nassertTrue(fields.containsKey(\"metadataField\"));\nassertEquals(\"expectedMetadataValue\", fields.get(\"metadataField\"));\nassertFalse(fields.containsKey(\"nonExistentField\"));\nassertTrue(fields.keySet().stream().allMatch(key -> key instanceof String));\nassertEquals(\"expectedValueForKey\", fields.get(\"expectedKey\"));\nassertNotEquals(\"unexpectedValue\", fields.get(\"expectedKey\"));\nassertTrue(fields.values().stream().allMatch(value -> value instanceof String));\nassertEquals(\"expectedFieldCount\", fields.size());\nassertTrue(fields.containsKey(\"anotherField\"));\nassertEquals(\"anotherExpectedValue\", fields.get(\"anotherField\"));\nassertNotNull(fields.get(\"optionalField\"));\nassertEquals(\"optionalExpectedValue\", fields.get(\"optionalField\"));\nassertTrue(fields.keySet().stream().anyMatch(key -> key.startsWith(\"prefix\")));\nassertFalse(fields.isEmpty());\nassertEquals(\"expectedFieldValue\", fields.get(\"fieldWithSpecialChars!@#\"));\nassertTrue(fields.containsValue(\"someValue\"));\n```\n====================\n\n",
    "scores": [
        0.925,
        0.694,
        0.633,
        0.602,
        0.6,
        0.596,
        0.593,
        0.585,
        0.583,
        0.574,
        0.574,
        0.565,
        0.552,
        0.494,
        0.489,
        0.477,
        0.472,
        0.444,
        0.444,
        0.37,
        0.368,
        0.305,
        0.0
    ],
    "ground_truth": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));"
}