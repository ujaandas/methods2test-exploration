{
    "prompt": "Below is the focal class and test class for reference:\n\npackage amlinv.stat-collection-utils;\n\npublic class JmxAttributePoller {\npublic List < Object > getPolledObjects ( ) {\nreturn Collections . unmodifiableList ( polledObjects ) ;\n}\n}\n\npackage amlinv.stat-collection-utils;\n\npublic class JmxAttributePollerTest {\n@Test\npublic void testGetPolledObjects ( ) throws Exception {\n<ASSERTIONS HERE>\n}\n}\n\nPlease generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).\n========================\n\n",
    "response": "```java\nJmxAttributePoller poller = new JmxAttributePoller();\nList<Object> polledObjects = poller.getPolledObjects();\nassertNotNull(polledObjects);\nassertTrue(polledObjects.isEmpty());\n\npoller.addPolledObject(new Object());\npolledObjects = poller.getPolledObjects();\nassertNotNull(polledObjects);\nassertEquals(1, polledObjects.size());\n\nObject obj1 = new Object();\npoller.addPolledObject(obj1);\npolledObjects = poller.getPolledObjects();\nassertTrue(polledObjects.contains(obj1));\n\nObject obj2 = new Object();\npoller.addPolledObject(obj2);\npolledObjects = poller.getPolledObjects();\nassertEquals(2, polledObjects.size());\nassertTrue(polledObjects.contains(obj2));\n\npoller.removePolledObject(obj1);\npolledObjects = poller.getPolledObjects();\nassertEquals(1, polledObjects.size());\nassertFalse(polledObjects.contains(obj1));\n\npoller.removePolledObject(obj2);\npolledObjects = poller.getPolledObjects();\nassertTrue(polledObjects.isEmpty());\n\npoller.addPolledObject(new String(\"Test\"));\npolledObjects = poller.getPolledObjects();\nassertEquals(1, polledObjects.size());\nassertTrue(polledObjects.get(0) instanceof String);\n\npoller.addPolledObject(new Integer(5));\npolledObjects = poller.getPolledObjects();\nassertEquals(2, polledObjects.size());\nassertTrue(polledObjects.contains(new Integer(5)));\n\npoller.clearPolledObjects();\npolledObjects = poller.getPolledObjects();\nassertTrue(polledObjects.isEmpty());\n\npoller.addPolledObject(new Double(3.14));\npolledObjects = poller.getPolledObjects();\nassertEquals(1, polledObjects.size());\nassertTrue(polledObjects.get(0) instanceof Double);\n\npoller.addPolledObject(new Character('A'));\npolledObjects = poller.getPolledObjects();\nassertEquals(2, polledObjects.size());\nassertTrue(polledObjects.contains(new Character('A')));\n\npoller.addPolledObject(null);\npolledObjects = poller.getPolledObjects();\nassertEquals(3, polledObjects.size());\nassertTrue(polledObjects.contains(null));\n\npoller.removePolledObject(null);\npolledObjects = poller.getPolledObjects();\nassertEquals(2, polledObjects\n====================\n\n",
    "scores": [
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.745,
        0.702,
        0.626,
        0.626,
        0.626,
        0.626,
        0.626,
        0.626,
        0.626,
        0.626,
        0.596,
        0.571,
        0.571,
        0.571,
        0.571,
        0.563,
        0.563,
        0.544,
        0.523,
        0.518,
        0.511,
        0.505,
        0.505,
        0.505,
        0.483,
        0.468,
        0.468,
        0.468,
        0.462,
        0.462,
        0.462,
        0.449,
        0.44,
        0.431,
        0.423,
        0.423,
        0.376,
        0.376,
        0.353
    ],
    "ground_truth": "assertEquals(this.polledObjects,this.poller.getPolledObjects());"
}