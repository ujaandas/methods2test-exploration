=== Generated Prompt ===
Below is the focal class and test class for reference:

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizer {
    public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;
}

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizerTest {
    @Test
     public void testNonStandardPercentEncoding ( ) throws MalformedURLException {
         URLFilter urlFilter = createFilter ( false , false ) ; 
         URL testSourceUrl = new URL ( "STR" ) ; 
         String inputURL = "STR" ; 
         String expectedURL = "STR" ; 
         String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , inputURL ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertNotNull(normalizedUrl);
assertEquals(expectedURL, normalizedUrl);
assertTrue(normalizedUrl.startsWith("http"));
assertFalse(normalizedUrl.contains(" "));
assertTrue(normalizedUrl.endsWith(".com") || normalizedUrl.endsWith(".org") || normalizedUrl.endsWith(".net"));
assertEquals(expectedURL.length(), normalizedUrl.length());
assertFalse(normalizedUrl.contains("%20"));
assertTrue(normalizedUrl.matches("https?://.*"));
assertTrue(normalizedUrl.equalsIgnoreCase(expectedURL));
assertFalse(normalizedUrl.contains("#"));
assertFalse(normalizedUrl.contains("?"));
assertTrue(normalizedUrl.indexOf("%") == -1 || normalizedUrl.indexOf("%") == normalizedUrl.lastIndexOf("%"));
assertNotSame(inputURL, normalizedUrl);
assertNotEquals("http://example.com/", normalizedUrl);
assertTrue(normalizedUrl.contains("example"));
assertFalse(normalizedUrl.equals("http://example.com/invalid"));
assertTrue(normalizedUrl.contains("/path/") || normalizedUrl.equals("http://example.com/"));
assertTrue(normalizedUrl.length() > 0);
assertTrue(normalizedUrl.length() <= 2048);
assertFalse(normalizedUrl.contains("javascript:"));
assertTrue(urlToFilter.equals(normalizedUrl) || !urlToFilter.equals(inputURL));
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",expectedURL,normalizedUrl); ===
0.929 - assertEquals(expectedURL, normalizedUrl)
0.765 - assertEquals(expectedURL.length(), normalizedUrl.length())
0.701 - assertNotEquals("http://example.com/", normalizedUrl)
0.634 - assertNotSame(inputURL, normalizedUrl)
0.571 - assertFalse(normalizedUrl.contains(" "))
0.568 - ```java
assertNotNull(normalizedUrl)
0.565 - assertFalse(normalizedUrl.contains("#"))
0.565 - assertFalse(normalizedUrl.contains("?"))
0.552 - assertFalse(normalizedUrl.contains("%20"))
0.543 - assertTrue(normalizedUrl.length() > 0)
0.518 - assertTrue(normalizedUrl.length() <= 2048)
0.505 - assertFalse(normalizedUrl.contains("javascript:"))
0.494 - assertTrue(normalizedUrl.startsWith("http"))
0.489 - assertTrue(normalizedUrl.contains("example"))
0.473 - assertTrue(normalizedUrl.matches("https?://.*"))
0.444 - assertFalse(normalizedUrl.equals("http://example.com/invalid"))
0.440 - assertTrue(normalizedUrl.equalsIgnoreCase(expectedURL))
0.430 - assertTrue(urlToFilter.equals(normalizedUrl) || !urlToFilter.equals(inputURL))
0.328 - assertTrue(normalizedUrl.contains("/path/") || normalizedUrl.equals("http://example.com/"))
0.299 - assertTrue(normalizedUrl.indexOf("%") == -1 || normalizedUrl.indexOf("%") == normalizedUrl.lastIndexOf("%"))
0.291 - assertTrue(normalizedUrl.endsWith(".com") || normalizedUrl.endsWith(".org") || normalizedUrl.endsWith(".net"))
0.000 - ```
