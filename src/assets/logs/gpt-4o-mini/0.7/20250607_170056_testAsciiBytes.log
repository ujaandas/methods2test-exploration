=== Generated Prompt ===
Below is the focal class and test class for reference:

package TooTallNate.Java-WebSocket;

public class Charsetfunctions {
    public static byte [ ] asciiBytes ( String s ) { 
    return s . getBytes ( StandardCharsets . US_ASCII ) ; 
    }
}

package TooTallNate.Java-WebSocket;

public class CharsetfunctionsTest {
    @Test
     public void testAsciiBytes ( ) {
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertArrayEquals(new byte[]{65, 83, 67, 73, 73}, Charsetfunctions.asciiBytes("ASCII"));
assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, Charsetfunctions.asciiBytes("Hello"));
assertArrayEquals(new byte[]{87, 111, 114, 108, 100}, Charsetfunctions.asciiBytes("World"));
assertArrayEquals(new byte[]{100, 101, 102, 101, 110, 100}, Charsetfunctions.asciiBytes("defend"));
assertArrayEquals(new byte[]{74, 97, 118, 97}, Charsetfunctions.asciiBytes("Java"));
assertArrayEquals(new byte[]{84, 101, 115, 116}, Charsetfunctions.asciiBytes("Test"));
assertArrayEquals(new byte[]{80, 101, 114, 102, 101, 99, 116}, Charsetfunctions.asciiBytes("Perfect"));
assertArrayEquals(new byte[]{83, 116, 114, 105, 110, 103}, Charsetfunctions.asciiBytes("String"));
assertArrayEquals(new byte[]{99, 104, 97, 114}, Charsetfunctions.asciiBytes("char"));
assertArrayEquals(new byte[]{112, 97, 114, 97, 103, 111, 114}, Charsetfunctions.asciiBytes("paragor"));
assertArrayEquals(new byte[]{119, 104, 105, 108, 101}, Charsetfunctions.asciiBytes("while"));
assertArrayEquals(new byte[]{111, 112, 101, 110}, Charsetfunctions.asciiBytes("open"));
assertArrayEquals(new byte[]{99, 108, 111, 115, 101}, Charsetfunctions.asciiBytes("close"));
assertArrayEquals(new byte[]{101, 110, 100}, Charsetfunctions.asciiBytes("end"));
assertArrayEquals(new byte[]{99, 111, 100, 101}, Charsetfunctions.asciiBytes("code"));
assertArrayEquals(new byte[]{114, 101, 97, 100}, Charsetfunctions.asciiBytes("read"));
assertArrayEquals(new byte[]{119, 114, 105, 116, 101}, Charsetfunctions.asciiBytes("write"));
assertArrayEquals(new byte[]{108, 111, 111, 107}, Charsetfunctions.asciiBytes("look
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: Assert.assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR")); ===
0.908 - assertArrayEquals(new byte[]{101, 110, 100}, Charsetfunctions.asciiBytes("end"))
0.897 - assertArrayEquals(new byte[]{84, 101, 115, 116}, Charsetfunctions.asciiBytes("Test"))
0.897 - assertArrayEquals(new byte[]{99, 111, 100, 101}, Charsetfunctions.asciiBytes("code"))
0.896 - assertArrayEquals(new byte[]{108, 111, 111, 107}, Charsetfunctions.asciiBytes("look
0.894 - assertArrayEquals(new byte[]{99, 108, 111, 115, 101}, Charsetfunctions.asciiBytes("close"))
0.882 - assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, Charsetfunctions.asciiBytes("Hello"))
0.879 - assertArrayEquals(new byte[]{111, 112, 101, 110}, Charsetfunctions.asciiBytes("open"))
0.877 - assertArrayEquals(new byte[]{119, 114, 105, 116, 101}, Charsetfunctions.asciiBytes("write"))
0.872 - assertArrayEquals(new byte[]{114, 101, 97, 100}, Charsetfunctions.asciiBytes("read"))
0.870 - assertArrayEquals(new byte[]{87, 111, 114, 108, 100}, Charsetfunctions.asciiBytes("World"))
0.865 - assertArrayEquals(new byte[]{99, 104, 97, 114}, Charsetfunctions.asciiBytes("char"))
0.862 - assertArrayEquals(new byte[]{100, 101, 102, 101, 110, 100}, Charsetfunctions.asciiBytes("defend"))
0.857 - assertArrayEquals(new byte[]{74, 97, 118, 97}, Charsetfunctions.asciiBytes("Java"))
0.852 - assertArrayEquals(new byte[]{119, 104, 105, 108, 101}, Charsetfunctions.asciiBytes("while"))
0.843 - assertArrayEquals(new byte[]{83, 116, 114, 105, 110, 103}, Charsetfunctions.asciiBytes("String"))
0.835 - assertArrayEquals(new byte[]{80, 101, 114, 102, 101, 99, 116}, Charsetfunctions.asciiBytes("Perfect"))
0.835 - assertArrayEquals(new byte[]{112, 97, 114, 97, 103, 111, 114}, Charsetfunctions.asciiBytes("paragor"))
0.788 - ```java
assertArrayEquals(new byte[]{65, 83, 67, 73, 73}, Charsetfunctions.asciiBytes("ASCII"))
