=== Generated Prompt ===
Below is the focal class and test class for reference:

package hazelcast.hazelcast-simulator.simulator;

public class PropertyBindingSupport_bind0_Numerical {
    static boolean bind0 ( Object object , String property , String value ) { 
    value = value . trim ( ) ; 
    String [ ] path = property . split ( "STR" ) ; 
    object = findTargetObject ( object , property , path ) ; 
    if ( object == null ) { 
    return false ; 
    } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; 
    if ( field == null || isProbeField ( field ) ) { 
    return false ; 
    } try { 
    setField ( field , object , value ) ; 
    return true ; 
    } catch ( Exception e ) { 
    throw new BindException ( format ( "STR" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; 
    } }
}

package hazelcast.hazelcast-simulator.simulator;

public class PropertyBindingSupport_bind0_NumericalTest {
    @Test
     public void bind_Double ( ) {
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
Object testObject = new TestClass();
String propertyName = "testDoubleProperty";
String valueToBind = "3.14";

// Assertion 1
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(3.14, testObject.getTestDoubleProperty(), 0.001);

// Assertion 2
valueToBind = "2.718";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(2.718, testObject.getTestDoubleProperty(), 0.001);

// Assertion 3
valueToBind = "-1.0";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(-1.0, testObject.getTestDoubleProperty(), 0.001);

// Assertion 4
valueToBind = "0.0";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(0.0, testObject.getTestDoubleProperty(), 0.001);

// Assertion 5
valueToBind = "100.5";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(100.5, testObject.getTestDoubleProperty(), 0.001);

// Assertion 6
valueToBind = "Double.MAX_VALUE";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(Double.MAX_VALUE, testObject.getTestDoubleProperty(), 0.001);

// Assertion 7
valueToBind = "Double.MIN_VALUE";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(Double.MIN_VALUE, testObject.getTestDoubleProperty(), 0.001);

// Assertion 8
valueToBind = "NaN";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertTrue(Double.isNaN(testObject.getTestDoubleProperty()));

// Assertion 9
valueToBind = "Infinity";
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind));
assertEquals(Double.POSITIVE_INFINITY, testObject.getTestDoubleProperty(), 0.001);

// Assertion 10
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertTrue(bind0(testObject,"STR","STR")); ===
0.535 - assertTrue(Double.isNaN(testObject.getTestDoubleProperty()))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.463 - assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.424 - assertEquals(0.0, testObject.getTestDoubleProperty(), 0.001)
0.422 - // Assertion 1
assertTrue(PropertyBindingSupport_bind0_Numerical.bind0(testObject, propertyName, valueToBind))
0.420 - assertEquals(-1.0, testObject.getTestDoubleProperty(), 0.001)
0.416 - assertEquals(100.5, testObject.getTestDoubleProperty(), 0.001)
0.400 - assertEquals(3.14, testObject.getTestDoubleProperty(), 0.001)
0.396 - assertEquals(2.718, testObject.getTestDoubleProperty(), 0.001)
0.375 - ```java
Object testObject = new TestClass()
0.357 - assertEquals(Double.MAX_VALUE, testObject.getTestDoubleProperty(), 0.001)
0.357 - assertEquals(Double.MIN_VALUE, testObject.getTestDoubleProperty(), 0.001)
0.338 - // Assertion 4
valueToBind = "0.0"
0.338 - // Assertion 8
valueToBind = "NaN"
0.333 - // Assertion 3
valueToBind = "-1.0"
0.329 - // Assertion 2
valueToBind = "2.718"
0.329 - // Assertion 5
valueToBind = "100.5"
0.317 - assertEquals(Double.POSITIVE_INFINITY, testObject.getTestDoubleProperty(), 0.001)
0.316 - // Assertion 9
valueToBind = "Infinity"
0.300 - String propertyName = "testDoubleProperty"
0.296 - // Assertion 10
0.286 - // Assertion 6
valueToBind = "Double.MAX_VALUE"
0.286 - // Assertion 7
valueToBind = "Double.MIN_VALUE"
0.246 - String valueToBind = "3.14"
