=== Generated Prompt ===
Below is the focal class and test class for reference:

package redraiment.jactiverecord;

public class Seq {
    public static List < String > map ( Collection < ? > from , String format ) { 
    List < String > to = new ArrayList < > ( from . size ( ) ) ; 
    for ( Object e : from ) { 
    to . add ( String . format ( format , e ) ) ; 
    } return to ; 
    }
}

package redraiment.jactiverecord;

public class SeqTest {
    @Test
     public void testFormatMap ( ) {
         String [ ] actuals = Seq . map ( Arrays . asList ( "STR" , "STR" , "STR" ) , "STR" ) . toArray ( new String [ 0 ] ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertEquals(3, actuals.length);
assertEquals("STR", actuals[0]);
assertEquals("STR", actuals[1]);
assertEquals("STR", actuals[2]);
assertNotNull(actuals);
assertTrue(actuals instanceof String[]);
assertEquals("STR", actuals[0]);
assertTrue(Arrays.asList(actuals).contains("STR"));
assertFalse(Arrays.asList(actuals).contains("NOT_STR"));
assertEquals("STR", actuals[actuals.length - 1]);
assertEquals("STR", actuals[1]);
assertEquals("STR", actuals[2]);
assertTrue(actuals.length >= 1);
assertEquals(3, Arrays.stream(actuals).filter(s -> s.equals("STR")).count());
assertEquals("STR", actuals[0]);
assertNotEquals("NOT_STR", actuals[0]);
assertTrue(actuals.length <= 3);
assertArrayEquals(new String[]{"STR", "STR", "STR"}, actuals);
assertSame("STR", actuals[1]);
assertNotSame("NOT_STR", actuals[0]);
assertAll("Check all assertions", 
    () -> assertEquals("STR", actuals[0]),
    () -> assertEquals("STR", actuals[1]),
    () -> assertEquals("STR", actuals[2])
);
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: Assert.assertArrayEquals(newString[]{"STR","STR","STR"},actuals); ===
1.000 - assertArrayEquals(new String[]{"STR", "STR", "STR"}, actuals)
0.621 - assertEquals("STR", actuals[0])
0.621 - assertEquals("STR", actuals[1])
0.621 - assertEquals("STR", actuals[2])
0.621 - assertEquals("STR", actuals[0])
0.621 - assertEquals("STR", actuals[1])
0.621 - assertEquals("STR", actuals[2])
0.621 - assertEquals("STR", actuals[0])
0.574 - assertNotEquals("NOT_STR", actuals[0])
0.529 - assertEquals("STR", actuals[actuals.length - 1])
0.518 - assertSame("STR", actuals[1])
0.489 - assertTrue(actuals instanceof String[])
0.478 - assertNotSame("NOT_STR", actuals[0])
0.463 - ```java
assertEquals(3, actuals.length)
0.430 - assertNotNull(actuals)
0.411 - assertTrue(Arrays.asList(actuals).contains("STR"))
0.395 - assertTrue(actuals.length >= 1)
0.395 - assertTrue(actuals.length <= 3)
0.393 - assertFalse(Arrays.asList(actuals).contains("NOT_STR"))
0.354 - assertEquals(3, Arrays.stream(actuals).filter(s -> s.equals("STR")).count())
0.305 - assertAll("Check all assertions", 
    () -> assertEquals("STR", actuals[0]),
    () -> assertEquals("STR", actuals[1]),
    () -> assertEquals("STR", actuals[2])
)
0.000 - ```
