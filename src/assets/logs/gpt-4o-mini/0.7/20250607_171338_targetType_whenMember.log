=== Generated Prompt ===
Below is the focal class and test class for reference:

package hazelcast.hazelcast-simulator.simulator;

public class WorkerQuery {
    public List < WorkerData > execute ( List < WorkerData > input ) { 
    switch ( targetType ) { 
    case ALL : return select ( input , null ) ; 
    case MEMBER : return select ( input , true ) ; 
    case CLIENT : return select ( input , false ) ; 
    case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; 
    return ! result . isEmpty ( ) ? result : select ( input , true ) ; 
    default : throw new IllegalStateException ( "STR" + targetType ) ; 
    } }
}

package hazelcast.hazelcast-simulator.simulator;

public class WorkerQueryTest {
    @Test
     public void targetType_whenMember ( ) {
         list . add ( new WorkerData ( newParameters ( agent1 , 1 , "STR" , "STR" ) ) ) ; 
         list . add ( new WorkerData ( newParameters ( agent1 , 2 , "STR" , "STR" ) ) ) ; 
         list . add ( new WorkerData ( newParameters ( agent1 , 3 , "STR" , "STR" ) ) ) ; 
         list . add ( new WorkerData ( newParameters ( agent1 , 4 , "STR" , "STR" ) ) ) ; 
         List < WorkerData > result = new WorkerQuery ( ) . setTargetType ( TargetType . MEMBER ) . execute ( list ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertNotNull(result);
assertEquals(4, result.size());
assertTrue(result.stream().allMatch(data -> data.isMember()));
assertTrue(result.stream().noneMatch(data -> data.isClient()));
assertTrue(result.stream().noneMatch(data -> data.isPreferClient()));
assertTrue(result.stream().anyMatch(data -> data.getId() == 1));
assertTrue(result.stream().anyMatch(data -> data.getId() == 2));
assertTrue(result.stream().anyMatch(data -> data.getId() == 3));
assertTrue(result.stream().anyMatch(data -> data.getId() == 4));
assertTrue(result.stream().allMatch(data -> "STR".equals(data.getParameter())));
assertFalse(result.stream().filter(data -> data.getId() == 5).findAny().isPresent());
assertTrue(result.stream().map(WorkerData::getAgent).distinct().count() == 1);
assertTrue(result.stream().allMatch(data -> data.getAgent().equals(agent1)));
assertDoesNotThrow(() -> new WorkerQuery().setTargetType(TargetType.MEMBER).execute(result));
assertEquals(result.get(0).getAgent(), agent1);
assertEquals(result.get(1).getAgent(), agent1);
assertEquals(result.get(2).getAgent(), agent1);
assertEquals(result.get(3).getAgent(), agent1);
assertTrue(result.stream().allMatch(data -> data.getStatus().equals("ACTIVE")));
assertTrue(result.stream().anyMatch(data -> data.getCreationTime() != null));
assertTrue(result.stream().allMatch(data -> data.isActive()));
assertTrue(result.stream().noneMatch(data -> data.isInactive()));
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(asList(list.get(1),list.get(3)),result); ===
0.680 - assertEquals(result.get(1).getAgent(), agent1)
0.660 - assertEquals(result.get(0).getAgent(), agent1)
0.660 - assertEquals(result.get(2).getAgent(), agent1)
0.577 - assertEquals(result.get(3).getAgent(), agent1)
0.519 - assertEquals(4, result.size())
0.395 - ```java
assertNotNull(result)
0.372 - assertTrue(result.stream().allMatch(data -> "STR".equals(data.getParameter())))
0.326 - assertDoesNotThrow(() -> new WorkerQuery().setTargetType(TargetType.MEMBER).execute(result))
0.317 - assertTrue(result.stream().allMatch(data -> data.getAgent().equals(agent1)))
0.270 - assertTrue(result.stream().allMatch(data -> data.isMember()))
0.270 - assertTrue(result.stream().anyMatch(data -> data.getId() == 1))
0.270 - assertTrue(result.stream().anyMatch(data -> data.getId() == 2))
0.270 - assertTrue(result.stream().anyMatch(data -> data.getId() == 3))
0.270 - assertTrue(result.stream().anyMatch(data -> data.getId() == 4))
0.270 - assertTrue(result.stream().allMatch(data -> data.isActive()))
0.268 - assertTrue(result.stream().noneMatch(data -> data.isClient()))
0.263 - assertTrue(result.stream().noneMatch(data -> data.isInactive()))
0.258 - assertFalse(result.stream().filter(data -> data.getId() == 5).findAny().isPresent())
0.254 - assertTrue(result.stream().noneMatch(data -> data.isPreferClient()))
0.242 - assertTrue(result.stream().anyMatch(data -> data.getCreationTime() != null))
0.236 - assertTrue(result.stream().map(WorkerData::getAgent).distinct().count() == 1)
0.233 - assertTrue(result.stream().allMatch(data -> data.getStatus().equals("ACTIVE")))
0.000 - ```
