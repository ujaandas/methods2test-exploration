=== Generated Prompt ===
Below is the focal class and test class for reference:

package hazelcast.hazelcast-simulator.simulator;

public class TagUtils {
    public static Map < String , String > parseTags ( String s ) { 
    Map < String , String > result = new HashMap < > ( ) ; 
    if ( "STR" . equals ( s ) ) { 
    return result ; 
    } for ( String keyValue : s . split ( "STR" ) ) { 
    if ( keyValue . contains ( "STR" ) ) { 
    String [ ] array = keyValue . split ( "STR" ) ; 
    result . put ( array [ 0 ] , array [ 1 ] ) ; 
    } else { 
    result . put ( keyValue , "STR" ) ; 
    } } return result ; 
    }
}

package hazelcast.hazelcast-simulator.simulator;

public class TagUtilsTest {
    @Test
     public void parseTags ( ) {
         Map < String , String > result = TagUtils . parseTags ( "STR" ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertNotNull(result);
assertTrue(result.isEmpty());
assertEquals(0, result.size());

result = TagUtils.parseTags("key1STRvalue1STRkey2STRvalue2");
assertEquals(2, result.size());
assertEquals("value1", result.get("key1"));
assertEquals("value2", result.get("key2"));

result = TagUtils.parseTags("key3");
assertEquals(1, result.size());
assertEquals("STR", result.get("key3"));

result = TagUtils.parseTags("key4STRvalue4");
assertEquals(1, result.size());
assertEquals("value4", result.get("key4"));

result = TagUtils.parseTags("key5STRvalue5STRkey6");
assertEquals(2, result.size());
assertEquals("value5", result.get("key5"));
assertEquals("STR", result.get("key6"));

result = TagUtils.parseTags("key7STRvalue7STRkey8STRvalue8");
assertEquals(3, result.size());
assertEquals("value7", result.get("key7"));
assertEquals("value8", result.get("key8"));

result = TagUtils.parseTags("key9STRvalue9STRkey10STR");
assertEquals(3, result.size());
assertEquals("value9", result.get("key9"));
assertEquals("STR", result.get("key10"));

result = TagUtils.parseTags("key11");
assertEquals(1, result.size());
assertEquals("STR", result.get("key11"));

result = TagUtils.parseTags("key12STRvalue12");
assertEquals(1, result.size());
assertEquals("value12", result.get("key12"));
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result); ===
0.515 - assertEquals("STR", result.get("key3"))
0.515 - assertEquals("STR", result.get("key6"))
0.510 - assertEquals("STR", result.get("key10"))
0.510 - assertEquals("STR", result.get("key11"))
0.457 - assertEquals(0, result.size())
0.457 - assertEquals(2, result.size())
0.457 - assertEquals(1, result.size())
0.457 - assertEquals(1, result.size())
0.457 - assertEquals(2, result.size())
0.457 - assertEquals(3, result.size())
0.457 - assertEquals(3, result.size())
0.457 - assertEquals(1, result.size())
0.457 - assertEquals(1, result.size())
0.442 - assertEquals("value1", result.get("key1"))
0.442 - assertEquals("value2", result.get("key2"))
0.442 - assertEquals("value4", result.get("key4"))
0.442 - assertEquals("value5", result.get("key5"))
0.442 - assertEquals("value7", result.get("key7"))
0.442 - assertEquals("value8", result.get("key8"))
0.442 - assertEquals("value9", result.get("key9"))
0.434 - assertEquals("value12", result.get("key12"))
0.348 - ```java
assertNotNull(result)
0.330 - assertTrue(result.isEmpty())
0.146 - result = TagUtils.parseTags("key3")
0.144 - result = TagUtils.parseTags("key11")
0.133 - result = TagUtils.parseTags("key4STRvalue4")
0.131 - result = TagUtils.parseTags("key12STRvalue12")
0.125 - result = TagUtils.parseTags("key5STRvalue5STRkey6")
0.121 - result = TagUtils.parseTags("key9STRvalue9STRkey10STR")
0.116 - result = TagUtils.parseTags("key1STRvalue1STRkey2STRvalue2")
0.116 - result = TagUtils.parseTags("key7STRvalue7STRkey8STRvalue8")
0.000 - ```
