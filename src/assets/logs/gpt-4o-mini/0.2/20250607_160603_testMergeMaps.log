=== Generated Prompt ===
Below is the focal class and test class for reference:

package fabric8io.fabric8-maven-plugin.core;

public class MapUtil {
    public static < K , V > Map < K , V > mergeMaps ( Map < K , V > map1 , Map < K , V > map2 ) { 
    Map < K , V > answer = new HashMap < > ( ) ; 
    if ( map2 != null ) { 
    answer . putAll ( map2 ) ; 
    } if ( map1 != null ) { 
    answer . putAll ( map1 ) ; 
    } return answer ; 
    }
}

package fabric8io.fabric8-maven-plugin.core;

public class MapUtilTest {
    @Test
     public void testMergeMaps ( ) {
         Map < String , String > mapA = createMap ( "STR" , "STR" , "STR" , "STR" ) ; 
         Map < String , String > mapB = createMap ( "STR" , "STR" , "STR" , "STR" ) ; 
         Map < String , String > expectedA = createMap ( "STR" , "STR" , "STR" , "STR" , "STR" , "STR" ) ; 
         Map < String , String > expectedB = createMap ( "STR" , "STR" , "STR" , "STR" , "STR" , "STR" ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertEquals(expectedA, MapUtil.mergeMaps(mapA, mapB));
assertEquals(expectedB, MapUtil.mergeMaps(mapB, mapA));
assertEquals(expectedA, MapUtil.mergeMaps(mapA, null));
assertEquals(mapA, MapUtil.mergeMaps(mapA, new HashMap<>()));
assertEquals(mapB, MapUtil.mergeMaps(new HashMap<>(), mapB));
assertEquals(new HashMap<>(), MapUtil.mergeMaps(null, null));
assertEquals(mapA, MapUtil.mergeMaps(null, mapA));
assertEquals(mapB, MapUtil.mergeMaps(mapB, null));
assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1"), createMap("A", "2")));
assertEquals(expectedB, MapUtil.mergeMaps(createMap("B", "1"), createMap("B", "2")));
assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1", "B", "2"), createMap("A", "3", "C", "4")));
assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1"), createMap("Y", "2")));
assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1"), createMap("A", "1")));
assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1", "Y", "2"), createMap("Y", "2", "Z", "3")));
assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1", "B", "2"), createMap("B", "2", "C", "3")));
assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1", "Y", "2"), createMap("Y", "3", "Z", "4")));
assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1"), createMap("B", "2", "A", "1")));
assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1"), createMap("Y", "2", "X", "1")));
assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1", "B", "2"), createMap("C", "3", "A", "1")));
assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1", "Y", "2"), createMap("Z", "
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB)); ===
0.942 - assertEquals(expectedB, MapUtil.mergeMaps(mapB, mapA))
0.929 - ```java
assertEquals(expectedA, MapUtil.mergeMaps(mapA, mapB))
0.923 - assertEquals(expectedA, MapUtil.mergeMaps(mapA, null))
0.808 - assertEquals(mapA, MapUtil.mergeMaps(null, mapA))
0.789 - assertEquals(mapA, MapUtil.mergeMaps(mapA, new HashMap<>()))
0.788 - assertEquals(mapB, MapUtil.mergeMaps(mapB, null))
0.771 - assertEquals(mapB, MapUtil.mergeMaps(new HashMap<>(), mapB))
0.742 - assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1"), createMap("A", "2")))
0.742 - assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1"), createMap("A", "1")))
0.727 - assertEquals(expectedB, MapUtil.mergeMaps(createMap("B", "1"), createMap("B", "2")))
0.714 - assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1"), createMap("B", "2", "A", "1")))
0.712 - assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1"), createMap("Y", "2")))
0.679 - assertEquals(new HashMap<>(), MapUtil.mergeMaps(null, null))
0.676 - assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1", "B", "2"), createMap("B", "2", "C", "3")))
0.671 - assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1"), createMap("Y", "2", "X", "1")))
0.667 - assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1", "Y", "2"), createMap("Z", "
0.662 - assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1", "B", "2"), createMap("A", "3", "C", "4")))
0.662 - assertEquals(expectedA, MapUtil.mergeMaps(createMap("A", "1", "B", "2"), createMap("C", "3", "A", "1")))
0.635 - assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1", "Y", "2"), createMap("Y", "2", "Z", "3")))
0.635 - assertEquals(expectedB, MapUtil.mergeMaps(createMap("X", "1", "Y", "2"), createMap("Y", "3", "Z", "4")))
