=== Generated Prompt ===
Below is the focal class and test class for reference:

package arnohaase.a-foundation.a-foundation;

public class AJsonSerHelper {
    public void writeNumberLiteral ( double value , int numFracDigits ) throws IOException { 
    checkAcceptsValueAndPrefixComma ( ) ; 
    out . write ( new DecimalFormat ( PATTERNS [ numFracDigits ] , DECIMAL_FORMAT_SYMBOLS ) . format ( value ) ) ; 
    afterValueWritten ( ) ; 
    }
}

package arnohaase.a-foundation.a-foundation;

public class AJsonSerHelperTest {
    @Test
     public void testDoubleWithFrac1 ( ) throws IOException {
         final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
         final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; 
         ser . writeNumberLiteral ( 1.23 , 1 ) ; 
         final String result = new String ( baos . toByteArray ( ) , "STR" ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertEquals("1.2", result);
assertTrue(result.length() <= 4);
assertFalse(result.contains(","));
assertFalse(result.contains(" "));
assertTrue(result.matches("\\d\\.\\d"));
assertEquals(3, result.length());
assertTrue(result.startsWith("1"));
assertTrue(result.endsWith("2"));
assertFalse(result.contains("0"));
assertFalse(result.contains("3"));
assertFalse(result.contains("4"));
assertFalse(result.contains("5"));
assertFalse(result.contains("6"));
assertFalse(result.contains("7"));
assertFalse(result.contains("8"));
assertFalse(result.contains("9"));
assertTrue(result.indexOf('.') == 1);
assertTrue(result.indexOf('2') == 2);
assertTrue(result.indexOf('1') == 0);
assertTrue(result.matches("[0-9]+\\.[0-9]+"));
assertEquals("1.2", result.trim());
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",result); ===
0.780 - assertEquals("1.2", result.trim())
0.767 - ```java
assertEquals("1.2", result)
0.737 - assertEquals(3, result.length())
0.586 - assertFalse(result.contains(" "))
0.576 - assertFalse(result.contains(","))
0.576 - assertFalse(result.contains("0"))
0.576 - assertFalse(result.contains("3"))
0.576 - assertFalse(result.contains("4"))
0.576 - assertFalse(result.contains("5"))
0.576 - assertFalse(result.contains("6"))
0.576 - assertFalse(result.contains("7"))
0.576 - assertFalse(result.contains("8"))
0.576 - assertFalse(result.contains("9"))
0.536 - assertTrue(result.length() <= 4)
0.517 - assertTrue(result.endsWith("2"))
0.500 - assertTrue(result.startsWith("1"))
0.500 - assertTrue(result.indexOf('.') == 1)
0.500 - assertTrue(result.indexOf('2') == 2)
0.500 - assertTrue(result.indexOf('1') == 0)
0.462 - assertTrue(result.matches("\\d\\.\\d"))
0.423 - assertTrue(result.matches("[0-9]+\\.[0-9]+"))
0.000 - ```
