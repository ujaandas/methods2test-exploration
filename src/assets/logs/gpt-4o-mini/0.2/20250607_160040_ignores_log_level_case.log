=== Generated Prompt ===
Below is the focal class and test class for reference:

package cucumber-ltd.cucumber-pro-plugin-jvm;

public class SystemLogger {
    public void set ( String key , String value ) { 
    setIn ( normalize ( key ) , RealValue . fromString ( value ) ) ; 
    }
}

package cucumber-ltd.cucumber-pro-plugin-jvm;

public class SystemLoggerTest {
    @Test
     public void ignores_log_level_case ( ) {
         Config config = createConfig ( ) ; 
         config . set ( Keys . CUCUMBERPRO_LOGGING , "STR" ) ; 
         Logger . SystemLogger logger = new Logger . SystemLogger ( config ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertNotNull(logger);
assertEquals("Expected log level to be STR", "STR", logger.getLogLevel());
assertTrue(logger.isLogLevelIgnored());
assertFalse(logger.isLogLevelEnabled("DEBUG"));
assertFalse(logger.isLogLevelEnabled("INFO"));
assertTrue(logger.isLogLevelEnabled("STR"));
assertEquals("Expected normalized key", "cucumberpro_logging", logger.getNormalizedKey(Keys.CUCUMBERPRO_LOGGING));
assertTrue(logger.isLoggingEnabled());
assertFalse(logger.isLoggingDisabled());
assertEquals("Expected value from RealValue", RealValue.fromString("STR"), logger.getValue(Keys.CUCUMBERPRO_LOGGING));
assertNotEquals("Expected log level to not be empty", "", logger.getLogLevel());
assertTrue(logger.isLogLevelValid("STR"));
assertFalse(logger.isLogLevelValid("INVALID"));
assertEquals("Expected log level to be case insensitive", "STR", logger.getLogLevel().toUpperCase());
assertTrue(logger.isLogLevelCaseIgnored());
assertEquals("Expected default log level", "INFO", logger.getDefaultLogLevel());
assertTrue(logger.isLogLevelConfigured());
assertFalse(logger.isLogLevelReset());
assertEquals("Expected configuration size", 1, config.size());
assertTrue(config.containsKey(Keys.CUCUMBERPRO_LOGGING));
assertFalse(config.containsKey("INVALID_KEY"));
assertEquals("Expected logger instance type", SystemLogger.class, logger.getClass());
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(Logger.Level.DEBUG,logger.level); ===
0.577 - assertEquals("Expected log level to be STR", "STR", logger.getLogLevel())
0.555 - assertEquals("Expected default log level", "INFO", logger.getDefaultLogLevel())
0.552 - assertNotEquals("Expected log level to not be empty", "", logger.getLogLevel())
0.537 - assertFalse(logger.isLogLevelReset())
0.500 - assertEquals("Expected logger instance type", SystemLogger.class, logger.getClass())
0.489 - assertFalse(logger.isLogLevelEnabled("INFO"))
0.484 - assertFalse(logger.isLogLevelEnabled("DEBUG"))
0.484 - assertFalse(logger.isLogLevelValid("INVALID"))
0.482 - assertTrue(logger.isLogLevelIgnored())
0.476 - assertFalse(logger.isLoggingDisabled())
0.467 - assertEquals("Expected log level to be case insensitive", "STR", logger.getLogLevel().toUpperCase())
0.465 - assertTrue(logger.isLogLevelValid("STR"))
0.465 - assertTrue(logger.isLogLevelConfigured())
0.460 - assertTrue(logger.isLogLevelCaseIgnored())
0.455 - assertTrue(logger.isLogLevelEnabled("STR"))
0.439 - assertTrue(logger.isLoggingEnabled())
0.432 - ```java
assertNotNull(logger)
0.364 - assertEquals("Expected normalized key", "cucumberpro_logging", logger.getNormalizedKey(Keys.CUCUMBERPRO_LOGGING))
0.353 - assertEquals("Expected configuration size", 1, config.size())
0.344 - assertEquals("Expected value from RealValue", RealValue.fromString("STR"), logger.getValue(Keys.CUCUMBERPRO_LOGGING))
0.308 - assertFalse(config.containsKey("INVALID_KEY"))
0.198 - assertTrue(config.containsKey(Keys.CUCUMBERPRO_LOGGING))
0.000 - ```
