=== Generated Prompt ===
Below is the focal class and test class for reference:

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizer {
    public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;
}

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizerTest {
    @Test
     public void testNonStandardPercentEncoding ( ) throws MalformedURLException {
         URLFilter urlFilter = createFilter ( false , false ) ; 
         URL testSourceUrl = new URL ( "STR" ) ; 
         String inputURL = "STR" ; 
         String expectedURL = "STR" ; 
         String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , inputURL ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
assertNotNull(normalizedUrl);
assertEquals(expectedURL, normalizedUrl);
assertTrue(normalizedUrl.startsWith("http://") || normalizedUrl.startsWith("https://"));
assertFalse(normalizedUrl.contains(" ")); 
assertFalse(normalizedUrl.contains("%20"));
assertFalse(normalizedUrl.contains("%22"));
assertFalse(normalizedUrl.contains("%3C"));
assertFalse(normalizedUrl.contains("%3E"));
assertFalse(normalizedUrl.contains("%7B"));
assertFalse(normalizedUrl.contains("%7D"));
assertFalse(normalizedUrl.contains("%5B"));
assertFalse(normalizedUrl.contains("%5D"));
assertFalse(normalizedUrl.contains("%7C"));
assertFalse(normalizedUrl.contains("%5C"));
assertFalse(normalizedUrl.contains("%5E"));
assertFalse(normalizedUrl.contains("%60"));
assertFalse(normalizedUrl.contains("%27"));
assertFalse(normalizedUrl.contains("%3F"));
assertFalse(normalizedUrl.contains("%26"));
assertFalse(normalizedUrl.contains("%3D"));
assertFalse(normalizedUrl.contains("%2B"));
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",expectedURL,normalizedUrl); ===
0.929 - assertEquals(expectedURL, normalizedUrl)
0.571 - assertFalse(normalizedUrl.contains(" "))
0.568 - ```java
assertNotNull(normalizedUrl)
0.552 - assertFalse(normalizedUrl.contains("%20"))
0.552 - assertFalse(normalizedUrl.contains("%22"))
0.552 - assertFalse(normalizedUrl.contains("%3C"))
0.552 - assertFalse(normalizedUrl.contains("%3E"))
0.552 - assertFalse(normalizedUrl.contains("%7B"))
0.552 - assertFalse(normalizedUrl.contains("%7D"))
0.552 - assertFalse(normalizedUrl.contains("%5B"))
0.552 - assertFalse(normalizedUrl.contains("%5D"))
0.552 - assertFalse(normalizedUrl.contains("%7C"))
0.552 - assertFalse(normalizedUrl.contains("%5C"))
0.552 - assertFalse(normalizedUrl.contains("%5E"))
0.552 - assertFalse(normalizedUrl.contains("%60"))
0.552 - assertFalse(normalizedUrl.contains("%27"))
0.552 - assertFalse(normalizedUrl.contains("%3F"))
0.552 - assertFalse(normalizedUrl.contains("%26"))
0.552 - assertFalse(normalizedUrl.contains("%3D"))
0.552 - assertFalse(normalizedUrl.contains("%2B"))
0.338 - assertTrue(normalizedUrl.startsWith("http://") || normalizedUrl.startsWith("https://"))
0.000 - ```
