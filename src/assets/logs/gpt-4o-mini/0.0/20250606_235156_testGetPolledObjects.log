=== Generated Prompt ===
Below is the focal class and test class for reference:

package amlinv.stat-collection-utils;

public class JmxAttributePoller {
    public List < Object > getPolledObjects ( ) { 
    return Collections . unmodifiableList ( polledObjects ) ; 
    }
}

package amlinv.stat-collection-utils;

public class JmxAttributePollerTest {
    @Test
     public void testGetPolledObjects ( ) throws Exception {
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
```java
JmxAttributePoller poller = new JmxAttributePoller();
List<Object> polledObjects = poller.getPolledObjects();
assertNotNull(polledObjects);
assertTrue(polledObjects.isEmpty());

poller.addPolledObject(new Object());
polledObjects = poller.getPolledObjects();
assertNotNull(polledObjects);
assertEquals(1, polledObjects.size());

Object obj1 = new Object();
poller.addPolledObject(obj1);
polledObjects = poller.getPolledObjects();
assertTrue(polledObjects.contains(obj1));

Object obj2 = new Object();
poller.addPolledObject(obj2);
polledObjects = poller.getPolledObjects();
assertEquals(2, polledObjects.size());
assertTrue(polledObjects.contains(obj2));

poller.removePolledObject(obj1);
polledObjects = poller.getPolledObjects();
assertEquals(1, polledObjects.size());
assertFalse(polledObjects.contains(obj1));

poller.clearPolledObjects();
polledObjects = poller.getPolledObjects();
assertTrue(polledObjects.isEmpty());

poller.addPolledObject(new String("Test"));
polledObjects = poller.getPolledObjects();
assertEquals(1, polledObjects.size());
assertTrue(polledObjects.get(0) instanceof String);

poller.addPolledObject(new Integer(123));
polledObjects = poller.getPolledObjects();
assertEquals(2, polledObjects.size());
assertTrue(polledObjects.get(1) instanceof Integer);

poller.addPolledObject(null);
polledObjects = poller.getPolledObjects();
assertEquals(3, polledObjects.size());
assertTrue(polledObjects.contains(null));

poller.removePolledObject(null);
polledObjects = poller.getPolledObjects();
assertEquals(2, polledObjects.size());
assertFalse(polledObjects.contains(null));

poller.addPolledObject(new Object());
poller.addPolledObject(new Object());
polledObjects = poller.getPolledObjects();
assertEquals(4, polledObjects.size());

poller.clearPolledObjects();
assertThrows(UnsupportedOperationException.class, () -> {
    polledObjects.add(new Object());
});

assertThrows(UnsupportedOperationException.class, () -> {
    polledObjects.remove(0);
});

assertThrows(UnsupportedOperationException.class, () -> {
    polledObjects.clear();
});
```
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(this.polledObjects,this.poller.getPolledObjects()); ===
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.745 - polledObjects = poller.getPolledObjects()
0.702 - List<Object> polledObjects = poller.getPolledObjects()
0.626 - assertEquals(1, polledObjects.size())
0.626 - assertEquals(2, polledObjects.size())
0.626 - assertEquals(1, polledObjects.size())
0.626 - assertEquals(1, polledObjects.size())
0.626 - assertEquals(2, polledObjects.size())
0.626 - assertEquals(3, polledObjects.size())
0.626 - assertEquals(2, polledObjects.size())
0.626 - assertEquals(4, polledObjects.size())
0.596 - assertFalse(polledObjects.contains(obj1))
0.577 - assertFalse(polledObjects.contains(null))
0.571 - assertTrue(polledObjects.isEmpty())
0.571 - assertTrue(polledObjects.isEmpty())
0.563 - assertTrue(polledObjects.contains(obj1))
0.563 - assertTrue(polledObjects.contains(obj2))
0.544 - assertTrue(polledObjects.contains(null))
0.518 - assertTrue(polledObjects.get(1) instanceof Integer)
0.511 - poller.clearPolledObjects()
0.511 - poller.clearPolledObjects()
0.505 - assertNotNull(polledObjects)
0.505 - assertNotNull(polledObjects)
0.505 - assertTrue(polledObjects.get(0) instanceof String)
0.473 - assertThrows(UnsupportedOperationException.class, () -> {
    polledObjects.add(new Object())
0.468 - poller.removePolledObject(obj1)
0.468 - poller.removePolledObject(null)
0.462 - poller.addPolledObject(obj1)
0.462 - poller.addPolledObject(obj2)
0.462 - poller.addPolledObject(null)
0.449 - poller.addPolledObject(new Object())
0.449 - poller.addPolledObject(new Object())
0.449 - poller.addPolledObject(new Object())
0.432 - assertThrows(UnsupportedOperationException.class, () -> {
    polledObjects.clear()
0.431 - poller.addPolledObject(new Integer(123))
0.423 - poller.addPolledObject(new String("Test"))
0.411 - assertThrows(UnsupportedOperationException.class, () -> {
    polledObjects.remove(0)
0.376 - Object obj1 = new Object()
0.376 - Object obj2 = new Object()
0.353 - ```java
JmxAttributePoller poller = new JmxAttributePoller()
0.031 - })
0.031 - })
0.031 - })
0.000 - ```
