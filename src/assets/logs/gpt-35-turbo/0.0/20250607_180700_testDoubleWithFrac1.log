=== Generated Prompt ===
Below is the focal class and test class for reference:

package arnohaase.a-foundation.a-foundation;

public class AJsonSerHelper {
    public void writeNumberLiteral ( double value , int numFracDigits ) throws IOException { 
    checkAcceptsValueAndPrefixComma ( ) ; 
    out . write ( new DecimalFormat ( PATTERNS [ numFracDigits ] , DECIMAL_FORMAT_SYMBOLS ) . format ( value ) ) ; 
    afterValueWritten ( ) ; 
    }
}

package arnohaase.a-foundation.a-foundation;

public class AJsonSerHelperTest {
    @Test
     public void testDoubleWithFrac1 ( ) throws IOException {
         final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
         final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; 
         ser . writeNumberLiteral ( 1.23 , 1 ) ; 
         final String result = new String ( baos . toByteArray ( ) , "STR" ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertEquals("1.2", result);
assertFalse(result.contains("."));
assertTrue(result.contains("1.2"));
assertTrue(result.length() <= 4);
assertTrue(result.length() >= 3);
assertTrue(result.startsWith("1"));
assertTrue(result.endsWith("2"));
assertTrue(result.matches("\\d\\.\\d"));
assertTrue(result.matches("[0-9]\\.[0-9]"));
assertTrue(result.matches("\\d\\.\\d{1}"));
assertTrue(result.matches("[0-9]\\.[0-9]{1}"));
assertTrue(result.matches("\\d\\.\\d{1,2}"));
assertTrue(result.matches("[0-9]\\.[0-9]{1,2}"));
assertTrue(result.matches("\\d\\.\\d{1,3}"));
assertTrue(result.matches("[0-9]\\.[0-9]{1,3}"));
assertTrue(result.matches("\\d\\.\\d{1,4}"));
assertTrue(result.matches("[0-9]\\.[0-9]{1,4}"));
assertTrue(result.matches("\\d\\.\\d{1,5}"));
assertTrue(result.matches("[0-9]\\.[0-9]{1,5}"));
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",result); ===
0.885 - assertEquals("1.2", result)
0.576 - assertFalse(result.contains("."))
0.536 - assertTrue(result.length() <= 4)
0.536 - assertTrue(result.length() >= 3)
0.517 - assertTrue(result.endsWith("2"))
0.500 - assertTrue(result.contains("1.2"))
0.500 - assertTrue(result.startsWith("1"))
0.462 - assertTrue(result.matches("\\d\\.\\d"))
0.441 - assertTrue(result.matches("\\d\\.\\d{1}"))
0.435 - assertTrue(result.matches("[0-9]\\.[0-9]"))
0.429 - assertTrue(result.matches("\\d\\.\\d{1,2}"))
0.429 - assertTrue(result.matches("\\d\\.\\d{1,3}"))
0.429 - assertTrue(result.matches("\\d\\.\\d{1,4}"))
0.429 - assertTrue(result.matches("\\d\\.\\d{1,5}"))
0.417 - assertTrue(result.matches("[0-9]\\.[0-9]{1}"))
0.405 - assertTrue(result.matches("[0-9]\\.[0-9]{1,2}"))
0.405 - assertTrue(result.matches("[0-9]\\.[0-9]{1,3}"))
0.405 - assertTrue(result.matches("[0-9]\\.[0-9]{1,4}"))
0.405 - assertTrue(result.matches("[0-9]\\.[0-9]{1,5}"))
