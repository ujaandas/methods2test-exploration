=== Generated Prompt ===
Below is the focal class and test class for reference:

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizer {
    public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;
}

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizerTest {
    @Test
     public void testDontFixMangledQueryString ( ) throws MalformedURLException {
         URLFilter urlFilter = createFilter ( true , false , queryParamsToFilter ) ; 
         URL testSourceUrl = new URL ( "STR" ) ; 
         String testUrl = "STR" ; 
         String expectedResult = "STR" ; 
         String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertEquals(expectedResult, normalizedUrl);
assertNotNull(normalizedUrl);
assertTrue(normalizedUrl.startsWith("http://"));
assertFalse(normalizedUrl.contains(" "));
assertNotEquals("STR", normalizedUrl);
assertTrue(normalizedUrl.length() > 0);
assertTrue(normalizedUrl.endsWith(".com"));
assertTrue(normalizedUrl.matches(".*\\d+.*"));
assertTrue(normalizedUrl.contains("example"));
assertTrue(normalizedUrl.matches("[a-zA-Z0-9]+"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z].*"));
assertTrue(normalizedUrl.matches(".*[0-9].*"));
assertTrue(normalizedUrl.matches(".*[!@#$%^&*()].*"));
assertTrue(normalizedUrl.matches(".*[a-z].*"));
assertTrue(normalizedUrl.matches(".*[A-Z].*"));
assertTrue(normalizedUrl.matches(".*[0-9].*"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9]+.*"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9]+.*"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9]+.*"));
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",expectedResult,normalizedUrl); ===
0.933 - assertEquals(expectedResult, normalizedUrl)
0.786 - assertNotEquals("STR", normalizedUrl)
0.605 - assertNotNull(normalizedUrl)
0.552 - assertFalse(normalizedUrl.contains(" "))
0.524 - assertTrue(normalizedUrl.length() > 0)
0.489 - assertTrue(normalizedUrl.endsWith(".com"))
0.473 - assertTrue(normalizedUrl.matches(".*\\d+.*"))
0.473 - assertTrue(normalizedUrl.contains("example"))
0.468 - assertTrue(normalizedUrl.matches(".*[0-9].*"))
0.468 - assertTrue(normalizedUrl.matches(".*[a-z].*"))
0.468 - assertTrue(normalizedUrl.matches(".*[A-Z].*"))
0.468 - assertTrue(normalizedUrl.matches(".*[0-9].*"))
0.463 - assertTrue(normalizedUrl.startsWith("http://"))
0.454 - assertTrue(normalizedUrl.matches("[a-zA-Z0-9]+"))
0.454 - assertTrue(normalizedUrl.matches(".*[a-zA-Z].*"))
0.440 - assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"))
0.436 - assertTrue(normalizedUrl.matches(".*[!@#$%^&*()].*"))
0.436 - assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9]+.*"))
0.436 - assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9]+.*"))
0.436 - assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9]+.*"))
