=== Generated Prompt ===
Below is the focal class and test class for reference:

package TooTallNate.Java-WebSocket;

public class Charsetfunctions {
    public static byte [ ] asciiBytes ( String s ) { 
    return s . getBytes ( StandardCharsets . US_ASCII ) ; 
    }
}

package TooTallNate.Java-WebSocket;

public class CharsetfunctionsTest {
    @Test
     public void testAsciiBytes ( ) {
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertArrayEquals(new byte[]{97, 98, 99}, Charsetfunctions.asciiBytes("abc"));
assertArrayEquals(new byte[]{65, 66, 67}, Charsetfunctions.asciiBytes("ABC"));
assertArrayEquals(new byte[]{49, 50, 51}, Charsetfunctions.asciiBytes("123"));
assertArrayEquals(new byte[]{32, 33, 34}, Charsetfunctions.asciiBytes(" !\""));
assertArrayEquals(new byte[]{126, 125, 124}, Charsetfunctions.asciiBytes("~}|"));
assertArrayEquals(new byte[]{0, 1, 2}, Charsetfunctions.asciiBytes("\u0000\u0001\u0002"));
assertArrayEquals(new byte[]{255, 254, 253}, Charsetfunctions.asciiBytes("\u00FF\u00FE\u00FD"));
assertArrayEquals(new byte[]{127, 126, 125}, Charsetfunctions.asciiBytes("\u007F~}"));
assertArrayEquals(new byte[]{65, 66, 67, 32, 33}, Charsetfunctions.asciiBytes("ABC !"));
assertArrayEquals(new byte[]{97, 98, 99, 126, 125}, Charsetfunctions.asciiBytes("abc~}"));
assertArrayEquals(new byte[]{48, 49, 50, 51, 52}, Charsetfunctions.asciiBytes("01234"));
assertArrayEquals(new byte[]{65, 66, 67, 32, 33, 64}, Charsetfunctions.asciiBytes("ABC !@"));
assertArrayEquals(new byte[]{97, 98, 99, 100, 101, 102}, Charsetfunctions.asciiBytes("abcdef"));
assertArrayEquals(new byte[]{48, 49, 50, 51, 52, 53}, Charsetfunctions.asciiBytes("012345"));
assertArrayEquals(new byte[]{65, 66, 67, 32, 33, 64, 35}, Charsetfunctions.asciiBytes("ABC !@#"));
assertArrayEquals(new byte[]{97, 98, 99, 100, 101, 102, 103}, Charsetfunctions.asciiBytes("abcdefg"));
assertArrayEquals(new byte[]{48, 49, 50, 51, 52, 53, 54}, Charsetfunctions.asciiBytes("0123456"));
assertArrayEquals(new byte[]{65, 66, 67, 32, 33, 64, 35, 36
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: Assert.assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR")); ===
0.895 - assertArrayEquals(new byte[]{126, 125, 124}, Charsetfunctions.asciiBytes("~}|"))
0.872 - assertArrayEquals(new byte[]{49, 50, 51}, Charsetfunctions.asciiBytes("123"))
0.872 - assertArrayEquals(new byte[]{32, 33, 34}, Charsetfunctions.asciiBytes(" !\""))
0.866 - assertArrayEquals(new byte[]{127, 126, 125}, Charsetfunctions.asciiBytes("\u007F~}"))
0.859 - assertArrayEquals(new byte[]{97, 98, 99}, Charsetfunctions.asciiBytes("abc"))
0.859 - assertArrayEquals(new byte[]{65, 66, 67}, Charsetfunctions.asciiBytes("ABC"))
0.841 - assertArrayEquals(new byte[]{48, 49, 50, 51, 52}, Charsetfunctions.asciiBytes("01234"))
0.830 - assertArrayEquals(new byte[]{97, 98, 99, 126, 125}, Charsetfunctions.asciiBytes("abc~}"))
0.821 - assertArrayEquals(new byte[]{65, 66, 67, 32, 33}, Charsetfunctions.asciiBytes("ABC !"))
0.820 - assertArrayEquals(new byte[]{0, 1, 2}, Charsetfunctions.asciiBytes("\u0000\u0001\u0002"))
0.812 - assertArrayEquals(new byte[]{65, 66, 67, 32, 33, 64}, Charsetfunctions.asciiBytes("ABC !@"))
0.807 - assertArrayEquals(new byte[]{48, 49, 50, 51, 52, 53}, Charsetfunctions.asciiBytes("012345"))
0.800 - assertArrayEquals(new byte[]{48, 49, 50, 51, 52, 53, 54}, Charsetfunctions.asciiBytes("0123456"))
0.793 - assertArrayEquals(new byte[]{97, 98, 99, 100, 101, 102, 103}, Charsetfunctions.asciiBytes("abcdefg"))
0.793 - assertArrayEquals(new byte[]{97, 98, 99, 100, 101, 102}, Charsetfunctions.asciiBytes("abcdef"))
0.793 - assertArrayEquals(new byte[]{65, 66, 67, 32, 33, 64, 35}, Charsetfunctions.asciiBytes("ABC !@#"))
0.778 - assertArrayEquals(new byte[]{255, 254, 253}, Charsetfunctions.asciiBytes("\u00FF\u00FE\u00FD"))
0.504 - assertArrayEquals(new byte[]{65, 66, 67, 32, 33, 64, 35, 36
