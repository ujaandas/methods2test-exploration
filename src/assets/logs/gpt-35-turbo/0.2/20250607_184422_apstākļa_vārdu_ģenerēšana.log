=== Generated Prompt ===
Below is the focal class and test class for reference:

package PeterisP.morphology;

public class Morphology {
    public ArrayList < Wordform > generateInflections ( String lemma ) { 
    return generateInflections ( lemma , false ) ; 
    }
}

package PeterisP.morphology;

public class MorphologyTest {
    @Test
     public void apstākļa_vārdu_ģenerēšana ( ) {
         List < Wordform > formas = locītājs . generateInflections ( "STR" ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertEquals(3, formas.size());
assertEquals("STR", formas.get(0).getLemma());
assertEquals("STR", formas.get(1).getLemma());
assertEquals("STR", formas.get(2).getLemma());
assertEquals("NOM", formas.get(0).getCase());
assertEquals("GEN", formas.get(1).getCase());
assertEquals("DAT", formas.get(2).getCase());
assertEquals("S", formas.get(0).getNumber());
assertEquals("S", formas.get(1).getNumber());
assertEquals("S", formas.get(2).getNumber());
assertEquals("M", formas.get(0).getGender());
assertEquals("M", formas.get(1).getGender());
assertEquals("M", formas.get(2).getGender());
assertEquals("NOM", formas.get(0).getCase());
assertEquals("GEN", formas.get(1).getCase());
assertEquals("DAT", formas.get(2).getCase());
assertEquals("S", formas.get(0).getNumber());
assertEquals("S", formas.get(1).getNumber());
assertEquals("S", formas.get(2).getNumber());
assertEquals("M", formas.get(0).getGender());
assertEquals("M", formas.get(1).getGender());
assertEquals("M", formas.get(2).getGender());
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(1,formas.size()); ===
0.966 - assertEquals(3, formas.size())
0.722 - assertEquals("NOM", formas.get(0).getCase())
0.722 - assertEquals("GEN", formas.get(1).getCase())
0.722 - assertEquals("DAT", formas.get(2).getCase())
0.722 - assertEquals("NOM", formas.get(0).getCase())
0.722 - assertEquals("GEN", formas.get(1).getCase())
0.722 - assertEquals("DAT", formas.get(2).getCase())
0.694 - assertEquals("S", formas.get(0).getNumber())
0.694 - assertEquals("S", formas.get(1).getNumber())
0.694 - assertEquals("S", formas.get(2).getNumber())
0.694 - assertEquals("M", formas.get(0).getGender())
0.694 - assertEquals("M", formas.get(1).getGender())
0.694 - assertEquals("M", formas.get(2).getGender())
0.694 - assertEquals("S", formas.get(0).getNumber())
0.694 - assertEquals("S", formas.get(1).getNumber())
0.694 - assertEquals("S", formas.get(2).getNumber())
0.694 - assertEquals("M", formas.get(0).getGender())
0.694 - assertEquals("M", formas.get(1).getGender())
0.694 - assertEquals("M", formas.get(2).getGender())
0.685 - assertEquals("STR", formas.get(0).getLemma())
0.685 - assertEquals("STR", formas.get(1).getLemma())
0.685 - assertEquals("STR", formas.get(2).getLemma())
