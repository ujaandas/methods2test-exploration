=== Generated Prompt ===
Below is the focal class and test class for reference:

package DigitalPebble.storm-crawler.core;

public class MaxDepthFilter {
    public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;
}

package DigitalPebble.storm-crawler.core;

public class MaxDepthFilterTest {
    @Test
     public void testCustomDepthZero ( ) throws MalformedURLException {
         URLFilter filter = createFilter ( "STR" , 3 ) ; 
         URL url = new URL ( "STR" ) ; 
         Metadata metadata = new Metadata ( ) ; 
         metadata . setValue ( MetadataTransfer . maxDepthKeyName , "STR" ) ; 
         String filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertEquals("Expected result", filterResult);
assertNotNull(filterResult);
assertTrue(filterResult.contains("expectedSubstring"));
assertFalse(filterResult.isEmpty());
assertNotEquals("Unexpected result", filterResult);
assertEquals("Expected result", filterResult);
assertTrue(filterResult.startsWith("http://"));
assertFalse(filterResult.endsWith(".pdf"));
assertEquals("Expected result", filterResult);
assertNotNull(filterResult);
assertTrue(filterResult.contains("expectedSubstring"));
assertFalse(filterResult.isEmpty());
assertNotEquals("Unexpected result", filterResult);
assertEquals("Expected result", filterResult);
assertTrue(filterResult.startsWith("http://"));
assertFalse(filterResult.endsWith(".pdf"));
assertEquals("Expected result", filterResult);
assertNotNull(filterResult);
assertTrue(filterResult.contains("expectedSubstring"));
assertFalse(filterResult.isEmpty());
assertNotEquals("Unexpected result", filterResult);
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: Assert.assertEquals(null,filterResult); ===
0.784 - assertEquals("Expected result", filterResult)
0.784 - assertEquals("Expected result", filterResult)
0.784 - assertEquals("Expected result", filterResult)
0.784 - assertEquals("Expected result", filterResult)
0.784 - assertEquals("Expected result", filterResult)
0.759 - assertNotEquals("Unexpected result", filterResult)
0.759 - assertNotEquals("Unexpected result", filterResult)
0.759 - assertNotEquals("Unexpected result", filterResult)
0.759 - assertNotNull(filterResult)
0.759 - assertNotNull(filterResult)
0.759 - assertNotNull(filterResult)
0.697 - assertFalse(filterResult.isEmpty())
0.697 - assertFalse(filterResult.isEmpty())
0.697 - assertFalse(filterResult.isEmpty())
0.630 - assertFalse(filterResult.endsWith(".pdf"))
0.630 - assertFalse(filterResult.endsWith(".pdf"))
0.545 - assertTrue(filterResult.startsWith("http://"))
0.545 - assertTrue(filterResult.startsWith("http://"))
0.494 - assertTrue(filterResult.contains("expectedSubstring"))
0.494 - assertTrue(filterResult.contains("expectedSubstring"))
0.494 - assertTrue(filterResult.contains("expectedSubstring"))
