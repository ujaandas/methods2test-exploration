=== Generated Prompt ===
Below is the focal class and test class for reference:

package TooTallNate.Java-WebSocket;

public class Charsetfunctions {
    public static byte [ ] asciiBytes ( String s ) { 
    return s . getBytes ( StandardCharsets . US_ASCII ) ; 
    }
}

package TooTallNate.Java-WebSocket;

public class CharsetfunctionsTest {
    @Test
     public void testAsciiBytes ( ) {
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertArrayEquals(new byte[]{97, 98, 99}, Charsetfunctions.asciiBytes("abc"));
assertArrayEquals(new byte[]{49, 50, 51}, Charsetfunctions.asciiBytes("123"));
assertArrayEquals(new byte[]{65, 66, 67}, Charsetfunctions.asciiBytes("ABC"));
assertArrayEquals(new byte[]{97}, Charsetfunctions.asciiBytes("a"));
assertArrayEquals(new byte[]{65}, Charsetfunctions.asciiBytes("A"));
assertArrayEquals(new byte[]{48}, Charsetfunctions.asciiBytes("0"));
assertArrayEquals(new byte[]{32}, Charsetfunctions.asciiBytes(" "));
assertArrayEquals(new byte[]{}, Charsetfunctions.asciiBytes(""));
assertArrayEquals(new byte[]{104, 101, 108, 108, 111}, Charsetfunctions.asciiBytes("hello"));
assertArrayEquals(new byte[]{87, 111, 114, 108, 100}, Charsetfunctions.asciiBytes("World"));
assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, Charsetfunctions.asciiBytes("Hello"));
assertArrayEquals(new byte[]{87, 79, 82, 76, 68}, Charsetfunctions.asciiBytes("WORLD"));
assertArrayEquals(new byte[]{84, 101, 115, 116}, Charsetfunctions.asciiBytes("Test"));
assertArrayEquals(new byte[]{116, 101, 115, 116}, Charsetfunctions.asciiBytes("test"));
assertArrayEquals(new byte[]{70, 111, 111}, Charsetfunctions.asciiBytes("Foo"));
assertArrayEquals(new byte[]{102, 111, 111}, Charsetfunctions.asciiBytes("foo"));
assertArrayEquals(new byte[]{66, 97, 114}, Charsetfunctions.asciiBytes("Bar"));
assertArrayEquals(new byte[]{98, 97, 114}, Charsetfunctions.asciiBytes("bar"));
assertArrayEquals(new byte[]{66, 65, 90}, Charsetfunctions.asciiBytes("BAZ"));
assertArrayEquals(new byte[]{98, 97, 122}, Charsetfunctions.asciiBytes("baz"));
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: Assert.assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR")); ===
0.961 - assertArrayEquals(new byte[]{102, 111, 111}, Charsetfunctions.asciiBytes("foo"))
0.940 - assertArrayEquals(new byte[]{70, 111, 111}, Charsetfunctions.asciiBytes("Foo"))
0.900 - assertArrayEquals(new byte[]{32}, Charsetfunctions.asciiBytes(" "))
0.899 - assertArrayEquals(new byte[]{}, Charsetfunctions.asciiBytes(""))
0.897 - assertArrayEquals(new byte[]{84, 101, 115, 116}, Charsetfunctions.asciiBytes("Test"))
0.892 - assertArrayEquals(new byte[]{116, 101, 115, 116}, Charsetfunctions.asciiBytes("test"))
0.889 - assertArrayEquals(new byte[]{104, 101, 108, 108, 111}, Charsetfunctions.asciiBytes("hello"))
0.882 - assertArrayEquals(new byte[]{72, 101, 108, 108, 111}, Charsetfunctions.asciiBytes("Hello"))
0.879 - assertArrayEquals(new byte[]{97}, Charsetfunctions.asciiBytes("a"))
0.879 - assertArrayEquals(new byte[]{65}, Charsetfunctions.asciiBytes("A"))
0.879 - assertArrayEquals(new byte[]{48}, Charsetfunctions.asciiBytes("0"))
0.872 - assertArrayEquals(new byte[]{49, 50, 51}, Charsetfunctions.asciiBytes("123"))
0.870 - assertArrayEquals(new byte[]{87, 111, 114, 108, 100}, Charsetfunctions.asciiBytes("World"))
0.867 - assertArrayEquals(new byte[]{66, 97, 114}, Charsetfunctions.asciiBytes("Bar"))
0.867 - assertArrayEquals(new byte[]{98, 97, 114}, Charsetfunctions.asciiBytes("bar"))
0.859 - assertArrayEquals(new byte[]{97, 98, 99}, Charsetfunctions.asciiBytes("abc"))
0.859 - assertArrayEquals(new byte[]{65, 66, 67}, Charsetfunctions.asciiBytes("ABC"))
0.853 - assertArrayEquals(new byte[]{98, 97, 122}, Charsetfunctions.asciiBytes("baz"))
0.846 - assertArrayEquals(new byte[]{66, 65, 90}, Charsetfunctions.asciiBytes("BAZ"))
0.841 - assertArrayEquals(new byte[]{87, 79, 82, 76, 68}, Charsetfunctions.asciiBytes("WORLD"))
