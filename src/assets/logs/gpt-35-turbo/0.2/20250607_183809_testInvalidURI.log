=== Generated Prompt ===
Below is the focal class and test class for reference:

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizer {
    public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;
}

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizerTest {
    @Test
     public void testInvalidURI ( ) throws MalformedURLException {
         URLFilter urlFilter = createFilter ( true , true ) ; 
         String nonURI = "STR" ; 
         URL testSourceUrl = new URL ( nonURI ) ; 
         String expectedResult = "STR" ; 
         String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , nonURI ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertEquals(expectedResult, normalizedUrl);
assertNotNull(normalizedUrl);
assertTrue(normalizedUrl.startsWith("http://"));
assertFalse(normalizedUrl.endsWith("/"));
assertTrue(normalizedUrl.contains("www."));
assertEquals(3, normalizedUrl.length());
assertNotEquals("test", normalizedUrl);
assertNotSame(expectedResult, normalizedUrl);
assertTrue(normalizedUrl.matches("[A-Z]+"));
assertFalse(normalizedUrl.isEmpty());
assertTrue(normalizedUrl.equals("STR"));
assertNull(null);
assertTrue(normalizedUrl.contains("S"));
assertTrue(normalizedUrl.contains("T"));
assertTrue(normalizedUrl.contains("R"));
assertTrue(normalizedUrl.equalsIgnoreCase("str"));
assertTrue(normalizedUrl.matches("[A-Z]{3}"));
assertTrue(normalizedUrl.startsWith("S"));
assertTrue(normalizedUrl.endsWith("R"));
assertTrue(normalizedUrl.contains("T"));
assertFalse(normalizedUrl.contains("X"));
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",expectedResult,normalizedUrl); ===
0.933 - assertEquals(expectedResult, normalizedUrl)
0.813 - assertNotSame(expectedResult, normalizedUrl)
0.776 - assertNotEquals("test", normalizedUrl)
0.651 - assertEquals(3, normalizedUrl.length())
0.605 - assertNotNull(normalizedUrl)
0.571 - assertFalse(normalizedUrl.isEmpty())
0.545 - assertFalse(normalizedUrl.endsWith("/"))
0.545 - assertFalse(normalizedUrl.contains("X"))
0.506 - assertTrue(normalizedUrl.equals("STR"))
0.506 - assertTrue(normalizedUrl.contains("S"))
0.506 - assertTrue(normalizedUrl.contains("T"))
0.506 - assertTrue(normalizedUrl.contains("R"))
0.506 - assertTrue(normalizedUrl.endsWith("R"))
0.506 - assertTrue(normalizedUrl.contains("T"))
0.494 - assertTrue(normalizedUrl.startsWith("S"))
0.489 - assertTrue(normalizedUrl.contains("www."))
0.484 - assertTrue(normalizedUrl.matches("[A-Z]+"))
0.473 - assertTrue(normalizedUrl.matches("[A-Z]{3}"))
0.463 - assertTrue(normalizedUrl.startsWith("http://"))
0.454 - assertTrue(normalizedUrl.equalsIgnoreCase("str"))
0.375 - assertNull(null)
