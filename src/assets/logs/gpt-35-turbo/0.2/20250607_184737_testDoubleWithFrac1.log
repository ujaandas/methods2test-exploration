=== Generated Prompt ===
Below is the focal class and test class for reference:

package arnohaase.a-foundation.a-foundation;

public class AJsonSerHelper {
    public void writeNumberLiteral ( double value , int numFracDigits ) throws IOException { 
    checkAcceptsValueAndPrefixComma ( ) ; 
    out . write ( new DecimalFormat ( PATTERNS [ numFracDigits ] , DECIMAL_FORMAT_SYMBOLS ) . format ( value ) ) ; 
    afterValueWritten ( ) ; 
    }
}

package arnohaase.a-foundation.a-foundation;

public class AJsonSerHelperTest {
    @Test
     public void testDoubleWithFrac1 ( ) throws IOException {
         final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
         final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; 
         ser . writeNumberLiteral ( 1.23 , 1 ) ; 
         final String result = new String ( baos . toByteArray ( ) , "STR" ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertEquals("1.2", result);
assertFalse(result.contains("."));
assertTrue(result.contains("1.2"));
assertTrue(result.contains("1.20"));
assertTrue(result.contains("1.230"));
assertTrue(result.contains("1.2300"));
assertTrue(result.contains("1.23000"));
assertTrue(result.contains("1.230000"));
assertTrue(result.contains("1.2300000"));
assertTrue(result.contains("1.23000000"));
assertTrue(result.contains("1.230000000"));
assertTrue(result.contains("1.2300000000"));
assertTrue(result.contains("1.23000000000"));
assertTrue(result.contains("1.230000000000"));
assertTrue(result.contains("1.2300000000000"));
assertTrue(result.contains("1.23000000000000"));
assertTrue(result.contains("1.230000000000000"));
assertTrue(result.contains("1.2300000000000000"));
assertTrue(result.contains("1.23000000000000000"));
assertTrue(result.contains("1.230000000000000000"));
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",result); ===
0.885 - assertEquals("1.2", result)
0.576 - assertFalse(result.contains("."))
0.500 - assertTrue(result.contains("1.2"))
0.492 - assertTrue(result.contains("1.20"))
0.484 - assertTrue(result.contains("1.230"))
0.476 - assertTrue(result.contains("1.2300"))
0.469 - assertTrue(result.contains("1.23000"))
0.462 - assertTrue(result.contains("1.230000"))
0.455 - assertTrue(result.contains("1.2300000"))
0.448 - assertTrue(result.contains("1.23000000"))
0.441 - assertTrue(result.contains("1.230000000"))
0.435 - assertTrue(result.contains("1.2300000000"))
0.429 - assertTrue(result.contains("1.23000000000"))
0.423 - assertTrue(result.contains("1.230000000000"))
0.417 - assertTrue(result.contains("1.2300000000000"))
0.411 - assertTrue(result.contains("1.23000000000000"))
0.405 - assertTrue(result.contains("1.230000000000000"))
0.400 - assertTrue(result.contains("1.2300000000000000"))
0.395 - assertTrue(result.contains("1.23000000000000000"))
0.390 - assertTrue(result.contains("1.230000000000000000"))
