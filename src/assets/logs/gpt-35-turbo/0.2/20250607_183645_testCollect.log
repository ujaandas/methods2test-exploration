=== Generated Prompt ===
Below is the focal class and test class for reference:

package arnohaase.a-foundation.a-foundation;

public class ACollectionHelper {
    public static < T , X , E extends Throwable > List < X > collect ( List < T > coll , APartialFunction < ? super T , ? extends X , E > pf ) throws E { 
    final List < X > result = createEmptyListOfType ( coll , true ) ; 
    for ( T o : coll ) { 
    if ( pf . isDefinedAt ( o ) ) { 
    result . add ( pf . apply ( o ) ) ; 
    } } return result ; 
    }
}

package arnohaase.a-foundation.a-foundation;

public class ACollectionHelperTest {
    @Test
     public void testCollect ( ) throws Exception {
         APartialFunctionNoThrow < Integer , Double > squareRoot = new APartialFunctionNoThrow < Integer , Double > ( ) { 
     @Override
     public boolean isDefinedAt ( Integer param ) { 
     return param != 0 ; 
     } @Override
     public Double apply ( Integer param ) { 
     return Math . sqrt ( param ) ; 
     } } ; 
         final List < Double > result = ACollectionHelper . collect ( Arrays . asList ( 0 , 1 , 2 , 3 , 4 ) , squareRoot ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
Assertions:

assertEquals(2, result.size());
assertEquals(1.0, result.get(0), 0.001);
assertEquals(1.414, result.get(1), 0.001);
assertEquals(1.732, result.get(2), 0.001);
assertEquals(2.0, result.get(3), 0.001);
assertEquals(2.236, result.get(4), 0.001);
assertTrue(result.contains(1.0));
assertTrue(result.contains(1.414));
assertTrue(result.contains(1.732));
assertTrue(result.contains(2.0));
assertTrue(result.contains(2.236));
assertFalse(result.contains(0.0));
assertFalse(result.contains(3.0));
assertFalse(result.contains(4.0));
assertFalse(result.contains(5.0));
assertTrue(result.stream().allMatch(d -> d >= 0));
assertTrue(result.stream().allMatch(d -> d <= 2.236));
assertTrue(result.stream().allMatch(d -> d == Math.sqrt(result.indexOf(d))));
assertTrue(result.stream().allMatch(d -> d == Math.sqrt(result.lastIndexOf(d))));
assertTrue(result.stream().allMatch(d -> d == Math.sqrt(result.indexOf(d) + 1)));
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(4,result.size()); ===
0.789 - Assertions:

assertEquals(2, result.size())
0.765 - assertEquals(1.414, result.get(1), 0.001)
0.758 - assertEquals(1.0, result.get(0), 0.001)
0.758 - assertEquals(2.0, result.get(3), 0.001)
0.735 - assertEquals(1.732, result.get(2), 0.001)
0.735 - assertEquals(2.236, result.get(4), 0.001)
0.677 - assertFalse(result.contains(0.0))
0.677 - assertFalse(result.contains(3.0))
0.677 - assertFalse(result.contains(4.0))
0.677 - assertFalse(result.contains(5.0))
0.623 - assertTrue(result.contains(1.0))
0.623 - assertTrue(result.contains(2.0))
0.603 - assertTrue(result.contains(1.414))
0.603 - assertTrue(result.contains(1.732))
0.603 - assertTrue(result.contains(2.236))
0.541 - assertTrue(result.stream().allMatch(d -> d >= 0))
0.513 - assertTrue(result.stream().allMatch(d -> d <= 2.236))
0.396 - assertTrue(result.stream().allMatch(d -> d == Math.sqrt(result.indexOf(d))))
0.388 - assertTrue(result.stream().allMatch(d -> d == Math.sqrt(result.indexOf(d) + 1)))
0.381 - assertTrue(result.stream().allMatch(d -> d == Math.sqrt(result.lastIndexOf(d))))
