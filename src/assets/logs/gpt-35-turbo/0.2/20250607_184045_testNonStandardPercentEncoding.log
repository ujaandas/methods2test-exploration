=== Generated Prompt ===
Below is the focal class and test class for reference:

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizer {
    public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ;
}

package DigitalPebble.storm-crawler.core;

public class BasicURLNormalizerTest {
    @Test
     public void testNonStandardPercentEncoding ( ) throws MalformedURLException {
         URLFilter urlFilter = createFilter ( false , false ) ; 
         URL testSourceUrl = new URL ( "STR" ) ; 
         String inputURL = "STR" ; 
         String expectedURL = "STR" ; 
         String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , inputURL ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
assertEquals(expectedURL, normalizedUrl);
assertNotNull(normalizedUrl);
assertTrue(normalizedUrl.startsWith("http://"));
assertFalse(normalizedUrl.contains(" "));
assertEquals(expectedURL.length(), normalizedUrl.length());
assertTrue(normalizedUrl.matches("^[a-zA-Z0-9]*$"));
assertTrue(normalizedUrl.endsWith(".com"));
assertFalse(normalizedUrl.isEmpty());
assertTrue(normalizedUrl.contains("://"));
assertTrue(normalizedUrl.equals(expectedURL));
assertTrue(normalizedUrl.matches("^[a-zA-Z0-9]*$"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z].*"));
assertTrue(normalizedUrl.matches(".*[0-9].*"));
assertTrue(normalizedUrl.matches(".*[!@#$%^&*()].*"));
assertTrue(normalizedUrl.matches(".*[a-z].*"));
assertTrue(normalizedUrl.matches(".*[A-Z].*"));
assertTrue(normalizedUrl.matches(".*[0-9].*"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"));
assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"));
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals("STR",expectedURL,normalizedUrl); ===
0.929 - assertEquals(expectedURL, normalizedUrl)
0.765 - assertEquals(expectedURL.length(), normalizedUrl.length())
0.630 - assertNotNull(normalizedUrl)
0.593 - assertFalse(normalizedUrl.isEmpty())
0.571 - assertFalse(normalizedUrl.contains(" "))
0.512 - assertTrue(normalizedUrl.contains("://"))
0.506 - assertTrue(normalizedUrl.endsWith(".com"))
0.489 - assertTrue(normalizedUrl.equals(expectedURL))
0.484 - assertTrue(normalizedUrl.matches(".*[0-9].*"))
0.484 - assertTrue(normalizedUrl.matches(".*[a-z].*"))
0.484 - assertTrue(normalizedUrl.matches(".*[A-Z].*"))
0.484 - assertTrue(normalizedUrl.matches(".*[0-9].*"))
0.478 - assertTrue(normalizedUrl.startsWith("http://"))
0.468 - assertTrue(normalizedUrl.matches(".*[a-zA-Z].*"))
0.458 - assertTrue(normalizedUrl.matches("^[a-zA-Z0-9]*$"))
0.458 - assertTrue(normalizedUrl.matches("^[a-zA-Z0-9]*$"))
0.454 - assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"))
0.454 - assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"))
0.454 - assertTrue(normalizedUrl.matches(".*[a-zA-Z0-9].*"))
0.449 - assertTrue(normalizedUrl.matches(".*[!@#$%^&*()].*"))
