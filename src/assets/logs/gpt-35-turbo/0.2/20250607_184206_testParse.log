=== Generated Prompt ===
Below is the focal class and test class for reference:

package jcodec.jcodec;

public class SegmentTypeBox {
    public static List < Atom > getRootAtoms ( SeekableByteChannel input ) throws IOException { 
    input . setPosition ( 0 ) ; 
    List < Atom > result = new ArrayList < Atom > ( ) ; 
    long off = 0 ; 
    Header atom ; 
    while ( off < input . size ( ) ) { 
    input . setPosition ( off ) ; 
    atom = Header . read ( NIOUtils . fetchFromChannel ( input , 16 ) ) ; 
    if ( atom == null ) break ; 
    result . add ( new Atom ( atom , off ) ) ; 
    off += atom . getSize ( ) ; 
    } return result ; 
    }
}

package jcodec.jcodec;

public class SegmentTypeBoxTest {
    @Test
     public void testParse ( ) throws Exception {
         ByteBuffer buf = ByteBuffer . allocate ( 0x18 + 8 ) ; 
         buf . putInt ( 0x18 ) ; 
         buf . put ( "STR" . getBytes ( ) ) ; 
         buf . putInt ( 0 ) ; 
         buf . put ( "STR" . getBytes ( ) ) ; 
         buf . putInt ( 8 ) ; 
         buf . put ( "STR" . getBytes ( ) ) ; 
         buf . clear ( ) ; 
         SeekableByteChannel input = ByteBufferSeekableByteChannel . readFromByteBuffer ( buf ) ; 
         List < Atom > rootAtoms = MP4Util . getRootAtoms ( input ) ; 
         <ASSERTIONS HERE>
    }
}

Please generate 20 assertions to be inserted in place of <ASSERTIONS HERE> in the test method. Only generate code (no comments or explanations).
========================

=== GPT Response ===
Assert.assertEquals(3, rootAtoms.size());
Assert.assertEquals("STR", rootAtoms.get(0).getFourcc());
Assert.assertEquals(0, rootAtoms.get(0).getHeader().getSize());
Assert.assertEquals("STR", rootAtoms.get(1).getFourcc());
Assert.assertEquals(0, rootAtoms.get(1).getHeader().getSize());
Assert.assertEquals("STR", rootAtoms.get(2).getFourcc());
Assert.assertEquals(8, rootAtoms.get(2).getHeader().getSize());
Assert.assertEquals(0x18, rootAtoms.get(0).getOffset());
Assert.assertEquals(0x18 + 4, rootAtoms.get(1).getOffset());
Assert.assertEquals(0x18 + 4 + 4, rootAtoms.get(2).getOffset());
Assert.assertEquals(0x18, rootAtoms.get(0).getHeader().getSize());
Assert.assertEquals(0, rootAtoms.get(1).getHeader().getSize());
Assert.assertEquals(8, rootAtoms.get(2).getHeader().getSize());
Assert.assertEquals(0x18, rootAtoms.get(0).getHeader().getDataLen());
Assert.assertEquals(0, rootAtoms.get(1).getHeader().getDataLen());
Assert.assertEquals(8, rootAtoms.get(2).getHeader().getDataLen());
Assert.assertEquals(0x18 + 8, rootAtoms.get(2).getOffset() + rootAtoms.get(2).getHeader().getSize());
Assert.assertEquals(0x18 + 8, input.position());
====================

=== Collecting and Comparing Assertions ===
=== Ground Oracle Truth: assertEquals(2,rootAtoms.size()); ===
0.969 - Assert.assertEquals(3, rootAtoms.size())
0.734 - Assert.assertEquals(0x18, rootAtoms.get(0).getOffset())
0.716 - Assert.assertEquals(0x18 + 4, rootAtoms.get(1).getOffset())
0.700 - Assert.assertEquals("STR", rootAtoms.get(0).getFourcc())
0.700 - Assert.assertEquals("STR", rootAtoms.get(1).getFourcc())
0.700 - Assert.assertEquals("STR", rootAtoms.get(2).getFourcc())
0.699 - Assert.assertEquals(0x18 + 4 + 4, rootAtoms.get(2).getOffset())
0.698 - Assert.assertEquals(0, rootAtoms.get(0).getHeader().getSize())
0.698 - Assert.assertEquals(0, rootAtoms.get(1).getHeader().getSize())
0.698 - Assert.assertEquals(8, rootAtoms.get(2).getHeader().getSize())
0.698 - Assert.assertEquals(0, rootAtoms.get(1).getHeader().getSize())
0.698 - Assert.assertEquals(8, rootAtoms.get(2).getHeader().getSize())
0.674 - Assert.assertEquals(0x18, rootAtoms.get(0).getHeader().getSize())
0.629 - Assert.assertEquals(0, rootAtoms.get(1).getHeader().getDataLen())
0.629 - Assert.assertEquals(8, rootAtoms.get(2).getHeader().getDataLen())
0.609 - Assert.assertEquals(0x18, rootAtoms.get(0).getHeader().getDataLen())
0.580 - Assert.assertEquals(0x18 + 8, input.position())
0.517 - Assert.assertEquals(0x18 + 8, rootAtoms.get(2).getOffset() + rootAtoms.get(2).getHeader().getSize())
