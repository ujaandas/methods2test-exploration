{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/OClientConnectionTest.java", "className": "OClientConnectionTest", "testName": "testValidToken", "testMethod": "@Test\n public void testValidToken ( ) throws IOException {\n     OClientConnection conn = new OClientConnection ( 1 , protocol ) ; \n     OTokenHandler handler = new OTokenHandlerImpl ( server ) ; \n     byte [ ] tokenBytes = handler . getSignedBinaryToken ( db , db . getUser ( ) , conn . getData ( ) ) ; \n     conn . validateSession ( tokenBytes , handler , null ) ; \n     assertTrue(conn.getTokenBased());\n}", "oracle": "assertTrue(conn.getTokenBased());", "focalFile": "server/src/main/java/com/orientechnologies/orient/server/OClientConnection.java", "focalName": "getTokenBased", "focalMethod": " public Boolean getTokenBased ( ) { \n return tokenBased ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "className": "OPropertyMapIndexDefinitionTest", "testName": "testProcessChangeEventAddKeyWithConversion", "testMethod": "@Test\n public void testProcessChangeEventAddKeyWithConversion ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < String , String > multiValueChangeEvent = new OMultiValueChangeEvent < String , String > ( OMultiValueChangeEvent . OChangeType . ADD , \"STR\" , \"STR\" ) ; \n     propertyIndexByIntegerKey . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     addedKeys . put ( 12 , 1 ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}", "oracle": "Assert.assertEquals(keysToAdd,addedKeys);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focalName": "processChangeEvent", "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n final boolean result ; \n if ( indexBy . equals ( INDEX_BY . KEY ) ) result = processKeyChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n else result = processValueChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n if ( ! result ) throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "className": "OPropertyMapIndexDefinitionTest", "testName": "testGetTypes", "testMethod": "@Test\n public void testGetTypes ( ) {\n     final OType [ ] result = propertyIndexByKey . getTypes ( ) ; \n     Assert.assertEquals(result.length,1);\n}", "oracle": "Assert.assertEquals(result.length,1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinition.java", "focalName": "getTypes", "focalMethod": " public OType [ ] getTypes ( ) { \n return new OType [ ] { \n keyType } ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "className": "RemoteQuerySupportTest", "testName": "testQueryEmbedded", "testMethod": "@Test\n public void testQueryEmbedded ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . setProperty ( \"STR\" , \"STR\" ) ; \n     ODocument emb = new ODocument ( ) ; \n     emb . setProperty ( \"STR\" , \"STR\" ) ; \n     doc . setProperty ( \"STR\" , emb , OType . EMBEDDED ) ; \n     session . save ( doc ) ; \n     OResultSet res = session . query ( \"STR\" ) ; \n     OResult item = res . next ( ) ; \n     assertNotNull(item.getProperty(\"STR\"));\n}", "oracle": "assertNotNull(item.getProperty(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focalName": "getProperty", "focalMethod": " < T > T getProperty ( String name ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/OUTFSerializerTest.java", "className": "OUTFSerializerTest", "testName": "testSerializeWALChanges", "testMethod": "@Test\n public void testSerializeWALChanges ( ) {\n     final int serializationOffset = 5 ; \n     final ByteBuffer buffer = ByteBuffer . allocateDirect ( stringSerializer . getObjectSize ( OBJECT ) + serializationOffset ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     final byte [ ] data = new byte [ stringSerializer . getObjectSize ( OBJECT ) ] ; \n     stringSerializer . serializeNativeObject ( OBJECT , data , 0 ) ; \n     OWALChanges walChanges = new OWALChangesTree ( ) ; \n     walChanges . setBinaryValue ( buffer , data , serializationOffset ) ; \n     Assert.assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));\n}", "oracle": "Assert.assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));", "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OUTF8Serializer.java", "focalName": "getObjectSize", "focalMethod": "@Override\n public int getObjectSize ( String object , Object ... hints ) { \n final byte [ ] encoded = object . getBytes ( StandardCharsets . UTF_8 ) ; \n return OShortSerializer . SHORT_SIZE + encoded . length ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/CollectionOfLinkInNestedDocumentTest.java", "className": "CollectionOfLinkInNestedDocumentTest", "testName": "nestedLinkSet", "testMethod": "@Test\n public void nestedLinkSet ( ) {\n     ODocument doc1 = new ODocument ( ) ; \n     doc1 . field ( \"STR\" , \"STR\" ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     doc2 . field ( \"STR\" , \"STR\" ) ; \n     ODocument nested = new ODocument ( ) ; \n     ORecordLazySet set = new ORecordLazySet ( nested ) ; \n     set . add ( doc1 ) ; \n     set . add ( doc2 ) ; \n     nested . field ( \"STR\" , set ) ; \n     ODocument base = new ODocument ( ) ; \n     base . field ( \"STR\" , nested , OType . EMBEDDED ) ; \n     OIdentifiable id = db . save ( base , db . getClusterNameById ( db . getDefaultClusterId ( ) ) ) ; \n     db . getLocalCache ( ) . clear ( ) ; \n     ODocument base1 = db . load ( id . getIdentity ( ) ) ; \n     ODocument nest1 = base1 . field ( \"STR\" ) ; \n     assertNotNull(nest1);\n}", "oracle": "assertNotNull(nest1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "field", "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLMoveVertexCommandTest.java", "className": "SQLMoveVertexCommandTest", "testName": "testMoveSingleRecordToAnotherClass", "testMethod": "@Test\n public void testMoveSingleRecordToAnotherClass ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     Assert.assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());\n}", "oracle": "Assert.assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClassAbstractDelegate.java", "focalName": "getDefaultClusterId", "focalMethod": "@Override\n public int getDefaultClusterId ( ) { \n return delegate . getDefaultClusterId ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "className": "EnvironmentTest", "testName": "testSetupWithIncompleteJob", "testMethod": "@Test\n public void testSetupWithIncompleteJob ( ) {\n     when ( serviceMock . getJobId ( ) ) . thenReturn ( \"STR\" ) ; \n     when ( serviceMock . getBuildUrl ( ) ) . thenReturn ( \"STR\" ) ; \n     create ( Arrays . asList ( serviceMock ) ) . setup ( ) ; \n     assertEquals(\"STR\",mojo.serviceName);\n}", "oracle": "assertEquals(\"STR\",mojo.serviceName);", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/Environment.java", "focalName": "setup", "focalMethod": " public void setup ( ) { \n setupService ( ) ; \n verify ( ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "className": "JmxAttributePollerTest", "testName": "testGetSetScheduler", "testMethod": "@Test\n public void testGetSetScheduler ( ) throws Exception {\n     assertNull(this.poller.getScheduler());\n}", "oracle": "assertNull(this.poller.getScheduler());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focalName": "getScheduler", "focalMethod": " public Scheduler getScheduler ( ) { \n return scheduler ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "className": "StringUtilsTest", "testName": "testNullIsEmpty", "testMethod": "@Test\n public void testNullIsEmpty ( ) throws Exception {\n     assertTrue(StringUtils.isEmpty(null));\n}", "oracle": "assertTrue(StringUtils.isEmpty(null));", "focalFile": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focalName": "isEmpty", "focalMethod": " public static boolean isEmpty ( String string ) { \n return ! isNonZero ( string ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "className": "PuzzleTest", "testName": "sum_of_cell_distances_is_distance_to_goal", "testMethod": "@Test\n public void sum_of_cell_distances_is_distance_to_goal ( ) {\n     int [ ] cells = swap ( getSolution ( ) , 7 , 8 ) ; \n     cells = swap ( cells , 8 , 5 ) ; \n     Puzzle p = new Puzzle ( cells ) ; \n     assertEquals(4,p.getDistanceToGoal());\n}", "oracle": "assertEquals(4,p.getDistanceToGoal());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focalName": "getDistanceToGoal", "focalMethod": " public int getDistanceToGoal ( ) { \n int distance = 0 ; \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n distance += getDistance ( i , cells [ i ] ) ; \n } return distance ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/SimulatorPropertiesTest.java", "className": "SimulatorPropertiesTest", "testName": "testLoad_justKey", "testMethod": "@Test\n public void testLoad_justKey ( ) {\n     File workingDirFile = new File ( simulatorHome , \"STR\" ) ; \n     appendText ( \"STR\" , workingDirFile ) ; \n     simulatorProperties . load ( workingDirFile ) ; \n     assertTrue(simulatorProperties.get(\"STR\").isEmpty());\n}", "oracle": "assertTrue(simulatorProperties.get(\"STR\").isEmpty());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/SimulatorProperties.java", "focalName": "get", "focalMethod": " public String get ( String name ) { \n return get ( name , null ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "className": "ReconnectManagerTest", "testName": "testReconnectionByUserSetting", "testMethod": "@Test\n public void testReconnectionByUserSetting ( ) throws InterruptedException , RemotingException {\n     doInit ( false , true ) ; \n     client . enableReconnectSwitch ( ) ; \n     String addr = \"STR\" ; \n     Url url = addressParser . parse ( addr ) ; \n     Connection connection = client . getConnection ( url , 1000 ) ; \n     Assert.assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());\n}", "oracle": "Assert.assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());", "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focalName": "getConnection", "focalMethod": "@Override\n public Connection getConnection ( Url url , int connectTimeout ) throws RemotingException , InterruptedException { \n ensureStarted ( ) ; \n url . setConnectTimeout ( connectTimeout ) ; \n return this . connectionManager . getAndCreateIfAbsent ( url ) ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "className": "DevUtilTest", "testName": "testGeneratedConfigFiles", "testMethod": "@Test\n public void testGeneratedConfigFiles ( ) throws Exception {\n     File sourceFile = new File ( configDirectory , \"STR\" ) ; \n     createTargetFile ( sourceFile . getName ( ) , true ) ; \n     assertTrue(\"STR\",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));\n}", "oracle": "assertTrue(\"STR\",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "isGeneratedConfigFile", "focalMethod": " protected boolean isGeneratedConfigFile ( File fileChanged , File srcDir , File targetDir ) throws IOException { \n return ( fileChanged . getName ( ) . equals ( \"STR\" ) || fileChanged . getName ( ) . equals ( \"STR\" ) ) && isGeneratedTargetFile ( fileChanged , srcDir , targetDir ) ; \n } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "className": "MacAddressTest", "testName": "testAddressUnderscoreSeparator", "testMethod": "@Test\n public void testAddressUnderscoreSeparator ( ) {\n     final MacAddress macAddress = new MacAddress ( UNDERSCORE_SEPARATOR ) ; \n     assertEquals(NORMALIZED_ADDRESS,macAddress.toString());\n}", "oracle": "assertEquals(NORMALIZED_ADDRESS,macAddress.toString());", "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) { \n final StringBuilder builder = new StringBuilder ( ) ; \n for ( int i = 0 ; \n i < address . length ; \n i ++ ) { \n if ( i != 0 ) { \n builder . append ( STANDARD_SEPARATOR ) ; \n } builder . append ( String . format ( \"STR\" , address [ i ] ) ) ; \n } return builder . toString ( ) ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "className": "MacAddressTest", "testName": "testAddressCompareToEqual", "testMethod": "@Test\n public void testAddressCompareToEqual ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     final int comparison = macAddress . compareTo ( macAddress ) ; \n     assertEquals(0,comparison);\n}", "oracle": "assertEquals(0,comparison);", "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focalName": "compareTo", "focalMethod": "@Override\n public int compareTo ( final MacAddress macAddress ) { \n int comparison = 0 ; \n for ( int i = 0 ; \n i < ADDRESS_LENGTH ; \n i ++ ) { \n comparison = address [ i ] - macAddress . address [ i ] ; \n if ( comparison != 0 ) { \n break ; \n } } return comparison ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityProfileTest.java", "className": "ActivityProfileTest", "testName": "testGetActivityId", "testMethod": "@Test\n public void testGetActivityId ( ) {\n     String expected = \"STR\" ; \n     String actual = activityProfile . getActivityId ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityProfile.java", "focalName": "getActivityId", "focalMethod": " public String getActivityId ( ) { \n return activityId ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["trung", "InMemoryJavaCompiler", ""], "classPath": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java", "className": "InMemoryJavaCompilerTest", "testName": "compile_WhenIgnoreWarnings", "testMethod": "@Test\n public void compile_WhenIgnoreWarnings ( ) throws Exception {\n     StringBuffer sourceCode = new StringBuffer ( ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     Class < ? > helloClass = InMemoryJavaCompiler . newInstance ( ) . ignoreWarnings ( ) . compile ( \"STR\" , sourceCode . toString ( ) ) ; \n     List < ? > res = ( List < ? > ) helloClass . getMethod ( \"STR\" ) . invoke ( helloClass . newInstance ( ) ) ; \n     Assert.assertEquals(0,res.size());\n}", "oracle": "Assert.assertEquals(0,res.size());", "focalFile": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java", "focalName": "compile", "focalMethod": " public Class < ? > compile ( String className , String sourceCode ) throws Exception { \n return addSource ( className , sourceCode ) . compileAll ( ) . get ( className ) ; \n } ", "commitid": "d84c404975dc308ee5a418c5af8a6629c5e6c995"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "tuStum", "testMethod": "@Test\n public void tuStum ( ) {\n     Word stum = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(stum.isRecognized());\n}", "oracle": "assertTrue(stum.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "className": "MapUtilTest", "testName": "testMergeIfAbsent", "testMethod": "@Test\n public void testMergeIfAbsent ( ) {\n     Map < String , String > origMap = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     Map < String , String > toMergeMap = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     Map < String , String > expected = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     MapUtil . mergeIfAbsent ( origMap , toMergeMap ) ; \n     assertEquals(expected,origMap);\n}", "oracle": "assertEquals(expected,origMap);", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/MapUtil.java", "focalName": "mergeIfAbsent", "focalMethod": " public static void mergeIfAbsent ( Map < String , String > map , Map < String , String > toMerge ) { \n for ( Map . Entry < String , String > entry : toMerge . entrySet ( ) ) { \n putIfAbsent ( map , entry . getKey ( ) , entry . getValue ( ) ) ; \n ; \n } } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "className": "ReconnectManagerTest", "testName": "testCancelReConnection", "testMethod": "@Test\n public void testCancelReConnection ( ) throws InterruptedException , RemotingException {\n     doInit ( false , true ) ; \n     client . enableReconnectSwitch ( ) ; \n     String addr = \"STR\" ; \n     Url url = addressParser . parse ( addr ) ; \n     client . getConnection ( url , 1000 ) ; \n     Assert.assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());\n}", "oracle": "Assert.assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());", "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focalName": "getConnection", "focalMethod": "@Override\n public Connection getConnection ( Url url , int connectTimeout ) throws RemotingException , InterruptedException { \n ensureStarted ( ) ; \n url . setConnectTimeout ( connectTimeout ) ; \n return this . connectionManager . getAndCreateIfAbsent ( url ) ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/util/ThreadLocalArriveTimeHolderTest.java", "className": "ThreadLocalArriveTimeHolderTest", "testName": "testMultiThread", "testMethod": "@Test\n public void testMultiThread ( ) throws InterruptedException {\n     final EmbeddedChannel channel = new EmbeddedChannel ( ) ; \n     final CountDownLatch countDownLatch = new CountDownLatch ( 1 ) ; \n     long start = System . nanoTime ( ) ; \n     ThreadLocalArriveTimeHolder . arrive ( channel , 1 ) ; \n     long end = System . nanoTime ( ) ; \n     ThreadLocalArriveTimeHolder . arrive ( channel , 1 ) ; \n     long time = ThreadLocalArriveTimeHolder . getAndClear ( channel , 1 ) ; \n     Assert.assertTrue(time>=start);\n}", "oracle": "Assert.assertTrue(time>=start);", "focalFile": "src/main/java/com/alipay/remoting/util/ThreadLocalArriveTimeHolder.java", "focalName": "getAndClear", "focalMethod": " public static long getAndClear ( Channel channel , Integer key ) { \n Map < Integer , Long > map = getArriveTimeMap ( channel ) ; \n Long result = map . remove ( key ) ; \n if ( result == null ) { \n return - 1 ; \n } return result ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "className": "SubStatementTest", "testName": "testSetAttachments", "testMethod": "@Test\n public void testSetAttachments ( ) throws URISyntaxException , NoSuchAlgorithmException , IOException {\n     ArrayList < Attachment > expected = attachments ; \n     expected . remove ( 0 ) ; \n     Attachment att = new Attachment ( ) ; \n     HashMap < String , String > attDisplay = new HashMap < String , String > ( ) ; \n     attDisplay . put ( \"STR\" , \"STR\" ) ; \n     att . setDisplay ( attDisplay ) ; \n     HashMap < String , String > description = new HashMap < String , String > ( ) ; \n     description . put ( \"STR\" , \"STR\" ) ; \n     att . setDescription ( description ) ; \n     URI usageType = new URI ( \"STR\" ) ; \n     att . setUsageType ( usageType ) ; \n     String attach = \"STR\" ; \n     String contentType = \"STR\" ; \n     att . addAttachment ( attach , contentType ) ; \n     expected . add ( att ) ; \n     ArrayList < Attachment > actual = substatement . getAttachments ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/SubStatement.java", "focalName": "getAttachments", "focalMethod": " public ArrayList < Attachment > getAttachments ( ) { \n return attachments ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "className": "VerbsTest", "testName": "testTerminated", "testMethod": "@Test\n public void testTerminated ( ) {\n     Verb actual = Verbs . terminated ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focalName": "terminated", "focalMethod": " public static Verb terminated ( ) { \n return createVerb ( \"STR\" ) ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ResultTest.java", "className": "ResultTest", "testName": "testSetResponse", "testMethod": "@Test\n public void testSetResponse ( ) {\n     String expected = \"STR\" + RESPONSE ; \n     result . setResponse ( expected ) ; \n     String actual = result . getResponse ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Result.java", "focalName": "getResponse", "focalMethod": " public String getResponse ( ) { \n return response ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/DefaultValueTest.java", "className": "DefaultValueTest", "testName": "testDefaultValueFromJson", "testMethod": "@Test\n public void testDefaultValueFromJson ( ) {\n     OSchema schema = database . getMetadata ( ) . getSchema ( ) ; \n     OClass classA = schema . createClass ( \"STR\" ) ; \n     OProperty prop = classA . createProperty ( \"STR\" , OType . DATE ) ; \n     prop . setDefaultValue ( ODateHelper . getDateTimeFormatInstance ( ) . format ( new Date ( ) ) ) ; \n     ODocument doc = new ODocument ( ) . fromJSON ( \"STR\" ) ; \n     ODocument saved = database . save ( doc ) ; \n     assertNotNull(saved.field(\"STR\"));\n}", "oracle": "assertNotNull(saved.field(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "field", "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "object"], "classPath": "object/src/test/java/com/orientechnologies/orient/object/db/SimpleParentChildTest.java", "className": "SimpleParentChildTest", "testName": "testWithSets", "testMethod": "@Test\n public void testWithSets ( ) {\n     ObjectWithSet parent = new ObjectWithSet ( ) ; \n     ObjectWithSet child = new ObjectWithSet ( ) ; \n     parent . addFriend ( child ) ; \n     child . setName ( \"STR\" ) ; \n     ObjectWithSet savedParent = database . save ( parent ) ; \n     String parentId = savedParent . getId ( ) ; \n     this . database . close ( ) ; \n     this . database = new OObjectDatabaseTx ( url ) ; \n     this . database . open ( \"STR\" , \"STR\" ) ; \n     ObjectWithSet retrievedParent = this . database . load ( new ORecordId ( parentId ) ) ; \n     ObjectWithSet retrievedChild = retrievedParent . getFriends ( ) . iterator ( ) . next ( ) ; \n     retrievedChild . setName ( \"STR\" ) ; \n     this . database . save ( retrievedParent ) ; \n     this . database . close ( ) ; \n     this . database = new OObjectDatabaseTx ( url ) ; \n     this . database . open ( \"STR\" , \"STR\" ) ; \n     retrievedParent = this . database . load ( new ORecordId ( parentId ) ) ; \n     Assert.assertEquals(\"STR\",retrievedParent.getFriends().iterator().next().getName());\n}", "oracle": "Assert.assertEquals(\"STR\",retrievedParent.getFriends().iterator().next().getName());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "load", "focalMethod": " < RET extends T > RET load ( ORID recordId ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "className": "OScriptExecutionTest", "testName": "testLazyExecutionPlanning", "testMethod": "@Test\n public void testLazyExecutionPlanning ( ) {\n     String script = \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     OResultSet result = db . execute ( \"STR\" , script ) ; \n     OResult item = result . next ( ) ; \n     Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focalName": "getProperty", "focalMethod": " < T > T getProperty ( String name ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterPropertyStatementExecutionTest.java", "className": "OAlterPropertyStatementExecutionTest", "testName": "testSetCustom", "testMethod": "@Test\n public void testSetCustom ( ) {\n     String className = \"STR\" ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( className ) ; \n     OProperty prop = clazz . createProperty ( \"STR\" , OType . STRING ) ; \n     prop . setCustom ( \"STR\" , \"STR\" ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     printExecutionPlan ( null , result ) ; \n     Object currentValue = prop . getCustom ( \"STR\" ) ; \n     Assert.assertNotNull(result);\n}", "oracle": "Assert.assertNotNull(result);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focalName": "getCustom", "focalMethod": " public String getCustom ( final String iName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneMixIndexTest.java", "className": "f", "testName": "testMixCompositeQuery", "testMethod": "@Test\n public void testMixCompositeQuery ( ) {\n     List < ODocument > docs = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     Assert.assertEquals(1,docs.size());\n}", "oracle": "Assert.assertEquals(1,docs.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "query", "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["fabric8io", "fabric8-maven-plugin", "enricher/api"], "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/GoTimeUtilTest.java", "className": "GoTimeUtilTest", "testName": "testConversion", "testMethod": "@Test\n public void testConversion ( ) {\n     assertEquals(newInteger(23),durationSeconds(\"STR\"));\n}", "oracle": "assertEquals(newInteger(23),durationSeconds(\"STR\"));", "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/GoTimeUtil.java", "focalName": "durationSeconds", "focalMethod": " public static Integer durationSeconds ( String duration ) { \n BigDecimal ns = durationNs ( duration ) ; \n if ( ns == null ) { \n return null ; \n } BigDecimal sec = ns . divide ( new BigDecimal ( 1_000_000_000 ) ) ; \n if ( sec . compareTo ( new BigDecimal ( Integer . MAX_VALUE ) ) > 0 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } return sec . intValue ( ) ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "className": "HostURLFilterTest", "testName": "testAllAllowed", "testMethod": "@Test\n public void testAllAllowed ( ) throws MalformedURLException {\n     HostURLFilter allAllowed = createFilter ( false , false ) ; \n     URL sourceURL = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = allAllowed . filter ( sourceURL , metadata , \"STR\" ) ; \n     Assert.assertEquals(\"STR\",filterResult);\n}", "oracle": "Assert.assertEquals(\"STR\",filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focalName": "filter", "focalMethod": "@Override\n public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) { \n if ( sourceUrl == null || ( ! ignoreOutsideHost && ! ignoreOutsideDomain ) ) { \n return urlToFilter ; \n } URL tURL ; \n try { \n tURL = new URL ( urlToFilter ) ; \n } catch ( MalformedURLException e1 ) { \n return null ; \n } String fromHost ; \n String fromDomain = null ; \n if ( sourceUrl == previousSourceUrl ) { \n fromHost = previousSourceHost ; \n if ( ignoreOutsideDomain ) { \n fromDomain = previousSourceDomain ; \n } } else { \n fromHost = sourceUrl . getHost ( ) ; \n if ( ignoreOutsideDomain ) { \n fromDomain = PaidLevelDomain . getPLD ( fromHost ) ; \n } previousSourceHost = fromHost ; \n previousSourceDomain = fromDomain ; \n previousSourceUrl = sourceUrl ; \n } String toHost = tURL . getHost ( ) ; \n if ( ignoreOutsideHost ) { \n if ( toHost == null || ! toHost . equalsIgnoreCase ( fromHost ) ) { \n return null ; \n } } if ( ignoreOutsideDomain ) { \n String toDomain = PaidLevelDomain . getPLD ( toHost ) ; \n if ( toDomain == null || ! toDomain . equals ( fromDomain ) ) { \n return null ; \n } } return urlToFilter ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "className": "HostURLFilterTest", "testName": "testAllForbidden", "testMethod": "@Test\n public void testAllForbidden ( ) throws MalformedURLException {\n     HostURLFilter allAllowed = createFilter ( true , true ) ; \n     URL sourceURL = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = allAllowed . filter ( sourceURL , metadata , \"STR\" ) ; \n     Assert.assertEquals(\"STR\",filterResult);\n}", "oracle": "Assert.assertEquals(\"STR\",filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focalName": "filter", "focalMethod": "@Override\n public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) { \n if ( sourceUrl == null || ( ! ignoreOutsideHost && ! ignoreOutsideDomain ) ) { \n return urlToFilter ; \n } URL tURL ; \n try { \n tURL = new URL ( urlToFilter ) ; \n } catch ( MalformedURLException e1 ) { \n return null ; \n } String fromHost ; \n String fromDomain = null ; \n if ( sourceUrl == previousSourceUrl ) { \n fromHost = previousSourceHost ; \n if ( ignoreOutsideDomain ) { \n fromDomain = previousSourceDomain ; \n } } else { \n fromHost = sourceUrl . getHost ( ) ; \n if ( ignoreOutsideDomain ) { \n fromDomain = PaidLevelDomain . getPLD ( fromHost ) ; \n } previousSourceHost = fromHost ; \n previousSourceDomain = fromDomain ; \n previousSourceUrl = sourceUrl ; \n } String toHost = tURL . getHost ( ) ; \n if ( ignoreOutsideHost ) { \n if ( toHost == null || ! toHost . equalsIgnoreCase ( fromHost ) ) { \n return null ; \n } } if ( ignoreOutsideDomain ) { \n String toDomain = PaidLevelDomain . getPLD ( toHost ) ; \n if ( toDomain == null || ! toDomain . equals ( fromDomain ) ) { \n return null ; \n } } return urlToFilter ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "className": "BasicIndexingTest", "testName": "testFilterDocumentWithMetadata", "testMethod": "@Test\n public void testFilterDocumentWithMetadata ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     config . put ( AbstractIndexerBolt . metadataFilterParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focalName": "setValue", "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/TimestampParserTest.java", "className": "TimestampParserTest", "testName": "testParseEpochMillis", "testMethod": "@Test\n public void testParseEpochMillis ( ) throws Exception {\n     String format = TimestampParser . EPOCH_MILLIS ; \n     long time = System . currentTimeMillis ( ) ; \n     Date parsed = new TimestampParser ( format ) . parse ( String . valueOf ( time ) ) ; \n     assertEquals(time,parsed.getTime());\n}", "oracle": "assertEquals(time,parsed.getTime());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/TimestampParser.java", "focalName": "parse", "focalMethod": " public Date parse ( final String timestamp ) throws ProcessingException { \n if ( StringUtils . isBlank ( timestamp ) ) { \n return null ; \n } try { \n return parser . parse ( timestamp ) ; \n } catch ( Exception ex ) { \n throw new ProcessingException ( \"STR\" + timestamp + \"STR\" , ex ) ; \n } } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "className": "UrlUtilsTest", "testName": "testValidUrlToUri", "testMethod": "@Test\n public void testValidUrlToUri ( ) throws Exception {\n     URI uri = UrlUtils . toUri ( new URL ( \"STR\" ) ) ; \n     assertEquals(newURI(\"STR\"),uri);\n}", "oracle": "assertEquals(newURI(\"STR\"),uri);", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/UrlUtils.java", "focalName": "toUri", "focalMethod": " public static URI toUri ( final URL url ) { \n try { \n return url . toURI ( ) ; \n } catch ( URISyntaxException ex ) { \n throw new IllegalArgumentException ( ex ) ; \n } } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/codecs/h264/H264UtilsTest.java", "className": "H264UtilsTest", "testName": "testAvcCToAnnexB", "testMethod": "@Test\n public void testAvcCToAnnexB ( ) {\n     ArrayList < ByteBuffer > spsList = new ArrayList < ByteBuffer > ( ) ; \n     spsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 's' , 't' , 'a' , 'n' } ) ) ; \n     spsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 't' , 'h' , 'e' } ) ) ; \n     ArrayList < ByteBuffer > ppsList = new ArrayList < ByteBuffer > ( ) ; \n     ppsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 'm' , 'a' , 'n' } ) ) ; \n     ppsList . add ( ByteBuffer . wrap ( new byte [ ] { \n 'c' , 'o' , 'o' , 'l' } ) ) ; \n     AvcCBox avcCBox = AvcCBox . createAvcCBox ( 66 , 0 , 42 , 0 , spsList , ppsList ) ; \n     byte [ ] res = NIOUtils . toArray ( H264Utils . avcCToAnnexB ( avcCBox ) ) ; \n     Assert.assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);\n}", "oracle": "Assert.assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);", "focalFile": "src/main/java/org/jcodec/common/io/NIOUtils.java", "focalName": "toArray", "focalMethod": " public static byte [ ] toArray ( ByteBuffer buffer ) { \n byte [ ] result = new byte [ buffer . remaining ( ) ] ; \n buffer . duplicate ( ) . get ( result ) ; \n return result ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtilTest.java", "className": "MBeanAnnotationUtilTest", "testName": "testGetAttributes", "testMethod": "@Test\n public void testGetAttributes ( ) throws Exception {\n     Map < String , Method > atts = MBeanAnnotationUtil . getAttributes ( this . testAnnotation1 ) ; \n     assertEquals(2,atts.size());\n}", "oracle": "assertEquals(2,atts.size());", "focalFile": "src/main/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtil.java", "focalName": "getAttributes", "focalMethod": " public static Map < String , Method > getAttributes ( Object mbeanLocation ) { \n Map < String , Method > result = new TreeMap < String , Method > ( ) ; \n Method [ ] methods = mbeanLocation . getClass ( ) . getMethods ( ) ; \n for ( Method oneMethod : methods ) { \n MBeanAttribute attribute = oneMethod . getAnnotation ( MBeanAttribute . class ) ; \n if ( attribute != null ) { \n result . put ( attribute . name ( ) , oneMethod ) ; \n } } return result ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "className": "BatchPollProcessorTest", "testName": "testGetSetLog", "testMethod": "@Test\n public void testGetSetLog ( ) throws Exception {\n     assertNotNull(this.processor.getLog());\n}", "oracle": "assertNotNull(this.processor.getLog());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/BatchPollProcessor.java", "focalName": "getLog", "focalMethod": " public Logger getLog ( ) { \n return log ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/UuidUtilTest.java", "className": "UuidUtilTest", "testName": "testNewUnsecureUuidString", "testMethod": "@Test\n public void testNewUnsecureUuidString ( ) {\n     String uuid = newUnsecureUuidString ( ) ; \n     assertNotNull(uuid);\n}", "oracle": "assertNotNull(uuid);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/UuidUtil.java", "focalName": "newUnsecureUuidString", "focalMethod": " public static String newUnsecureUuidString ( ) { \n return newUnsecureUUID ( ) . toString ( ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testFlattenOnEmbedded", "testMethod": "@Test\n public void testFlattenOnEmbedded ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}", "oracle": "assertEquals(qResult.size(),1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "className": "OPropertyMapIndexDefinitionTest", "testName": "testCreateValueByValueTwoParametersArrayParams", "testMethod": "@Test\n public void testCreateValueByValueTwoParametersArrayParams ( ) {\n     final Object result = propertyIndexByValue . createValue ( mapToTest , \"STR\" ) ; \n     Assert.assertTrue(resultinstanceofCollection);\n}", "oracle": "Assert.assertTrue(resultinstanceofCollection);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focalName": "createValue", "focalMethod": "@Override\n public Object createValue ( Object ... params ) { \n if ( ! ( params [ 0 ] instanceof Map ) ) return null ; \n final Collection < ? > mapParams = extractMapParams ( ( Map < ? , ? > ) params [ 0 ] ) ; \n final List < Object > result = new ArrayList < > ( mapParams . size ( ) ) ; \n for ( final Object mapParam : mapParams ) { \n Object val = createSingleValue ( mapParam ) ; \n result . add ( val ) ; \n } if ( getFieldsToIndex ( ) . size ( ) == 1 && result . size ( ) == 1 ) { \n return result . get ( 0 ) ; \n } return result ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "className": "OPropertyMapIndexDefinitionTest", "testName": "testCreateSingleValueByValue", "testMethod": "@Test\n public void testCreateSingleValueByValue ( ) {\n     final Object result = propertyIndexByValue . createSingleValue ( \"STR\" ) ; \n     Assert.assertEquals(result,12);\n}", "oracle": "Assert.assertEquals(result,12);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focalName": "createSingleValue", "focalMethod": " public Object createSingleValue ( final Object ... param ) { \n return OType . convert ( param [ 0 ] , keyType . getDefaultJavaType ( ) ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "object"], "classPath": "object/src/test/java/com/orientechnologies/orient/object/enhancement/field/OObjectBinaryDataStorageTest.java", "className": "OObjectBinaryDataStorageTest", "testName": "testSaveAndLoad_BinaryFieldsSimpleRecordMapping", "testMethod": "@Test\n public void testSaveAndLoad_BinaryFieldsSimpleRecordMapping ( ) throws IOException {\n     this . createDb ( ODocumentFieldHandlingStrategyFactory . SIMPLE ) ; \n     Driver hunt = new Driver ( ) ; \n     hunt . setName ( \"STR\" ) ; \n     byte [ ] huntUglyPicture = randomBytes ( 1024 * 32 ) ; \n     hunt . setImageData ( huntUglyPicture ) ; \n     Driver savedHunt = this . databaseTx . save ( hunt ) ; \n     Driver loadedHunt = this . databaseTx . load ( new ORecordId ( savedHunt . getId ( ) ) ) ; \n     Assert.assertNotNull(savedHunt);\n}", "oracle": "Assert.assertNotNull(savedHunt);", "focalFile": "object/src/main/java/com/orientechnologies/orient/object/db/OObjectDatabaseTx.java", "focalName": "load", "focalMethod": " public < RET > RET load ( final ORID recordId ) { \n return ( RET ) load ( recordId , null ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropSequenceStatementExecutionTest.java", "className": "ODropSequenceStatementExecutionTest", "testName": "testPlain", "testMethod": "@Test\n public void testPlain ( ) {\n     String name = \"STR\" ; \n     db . getMetadata ( ) . getSequenceLibrary ( ) . createSequence ( name , OSequence . SEQUENCE_TYPE . CACHED , new OSequence . CreateParams ( ) ) ; \n     Assert.assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));\n}", "oracle": "Assert.assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/sequence/OSequenceLibrary.java", "focalName": "getSequence", "focalMethod": " OSequence getSequence ( String iName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "className": "OCompositeKeyTest", "testName": "testCompareToLT", "testMethod": "@Test\n public void testCompareToLT ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey anotherCompositeKey = new OCompositeKey ( ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);\n}", "oracle": "assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focalName": "compareTo", "focalMethod": " public int compareTo ( final OCompositeKey otherKey ) { \n final Iterator < Object > inIter = keys . iterator ( ) ; \n final Iterator < Object > outIter = otherKey . keys . iterator ( ) ; \n while ( inIter . hasNext ( ) && outIter . hasNext ( ) ) { \n final Object inKey = inIter . next ( ) ; \n final Object outKey = outIter . next ( ) ; \n if ( outKey instanceof OAlwaysGreaterKey ) return - 1 ; \n if ( outKey instanceof OAlwaysLessKey ) return 1 ; \n if ( inKey instanceof OAlwaysGreaterKey ) return 1 ; \n if ( inKey instanceof OAlwaysLessKey ) return - 1 ; \n final int result = comparator . compare ( inKey , outKey ) ; \n if ( result != 0 ) return result ; \n } return 0 ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "className": "LuceneSpatialMiscFunctionsTest", "testName": "testStContainsPoint", "testMethod": "@Test\n public void testStContainsPoint ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     Assert.assertEquals(true,next.field(\"STR\"));\n}", "oracle": "Assert.assertEquals(true,next.field(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "field", "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialTxPointTest.java", "className": "LuceneSpatialTxPointTest", "testName": "testIndexingComplexUpdateTxPoint", "testMethod": "@Test\n public void testIndexingComplexUpdateTxPoint ( ) {\n     ODocument rome = newCity ( \"STR\" , 12.5 , 41.9 ) ; \n     ODocument london = newCity ( \"STR\" , - 0.1275 , 51.507222 ) ; \n     rome = db . save ( rome ) ; \n     london = db . save ( london ) ; \n     db . begin ( ) ; \n     rome . field ( \"STR\" , newPoint ( 12.5 , 41.9 ) ) ; \n     london . field ( \"STR\" , newPoint ( - 0.1275 , 51.507222 ) ) ; \n     london . field ( \"STR\" , newPoint ( - 0.1275 , 51.507222 ) ) ; \n     london . field ( \"STR\" , newPoint ( 12.5 , 41.9 ) ) ; \n     db . save ( rome ) ; \n     db . save ( london ) ; \n     db . commit ( ) ; \n     OIndex < ? > index = db . getMetadata ( ) . getIndexManager ( ) . getIndex ( \"STR\" ) ; \n     Assert.assertEquals(3,index.getSize());\n}", "oracle": "Assert.assertEquals(3,index.getSize());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focalName": "getSize", "focalMethod": " long getSize ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "className": "OCompositeIndexDefinitionTest", "testName": "testIndexReload", "testMethod": "@Test\n public void testIndexReload ( ) {\n     final ODocument docToStore = compositeIndex . toStream ( ) ; \n     final OCompositeIndexDefinition result = new OCompositeIndexDefinition ( ) ; \n     result . fromStream ( docToStore ) ; \n     Assert.assertEquals(result,compositeIndex);\n}", "oracle": "Assert.assertEquals(result,compositeIndex);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/type/ODocumentWrapperNoClass.java", "focalName": "fromStream", "focalMethod": "@Override\n public void fromStream ( ODocument iDocument ) { \n super . fromStream ( iDocument ) ; \n fromStream ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "className": "MPEGESTest", "testName": "testES", "testMethod": "@Test\n public void testES ( ) throws IOException {\n     byte [ ] mpeg = MPEGTestConst . mpeg ( ) ; \n     byte [ ] frame1 = MPEGTestConst . toBB ( new int [ ] [ ] { \n MPEGTestConst . _mpegHeader , MPEGTestConst . _mpegFrame } ) ; \n     byte [ ] frame2 = MPEGTestConst . toBB ( new int [ ] [ ] { \n MPEGTestConst . _mpegFrame } ) ; \n     MPEGES mpeges = new MPEGES ( Channels . newChannel ( new ByteArrayInputStream ( mpeg ) ) , 32 ) ; \n     ByteBuffer buf = ByteBuffer . allocate ( 1024 ) ; \n     Packet f1 = mpeges . frame ( buf ) ; \n     assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));\n}", "oracle": "assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));", "focalFile": "src/main/java/org/jcodec/common/io/NIOUtils.java", "focalName": "toArray", "focalMethod": " public static byte [ ] toArray ( ByteBuffer buffer ) { \n byte [ ] result = new byte [ buffer . remaining ( ) ] ; \n buffer . duplicate ( ) . get ( result ) ; \n return result ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AsCollectionCopyTest.java", "className": "AsCollectionCopyTest", "testName": "testAsCollectionCopy", "testMethod": "@Test\n public void testAsCollectionCopy ( ) {\n     final List < String > list = new ArrayList < > ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n     final ACollection < String > copied = ACollectionHelper . asACollectionCopy ( list ) ; \n     assertEquals(2,copied.size());\n}", "oracle": "assertEquals(2,copied.size());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/ACollection.java", "focalName": "size", "focalMethod": " int size ( ) ; \n", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "className": "ProtocolTest", "testName": "testToString", "testMethod": "@Test\n public void testToString ( ) throws Exception {\n     Protocol protocol0 = new Protocol ( \"STR\" ) ; \n     assertEquals(\"STR\",protocol0.getProvidedProtocol());\n}", "oracle": "assertEquals(\"STR\",protocol0.getProvidedProtocol());", "focalFile": "src/main/java/org/java_websocket/protocols/Protocol.java", "focalName": "getProvidedProtocol", "focalMethod": "@Override\n public String getProvidedProtocol ( ) { \n return this . providedProtocol ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/server/WebSocketServerTest.java", "className": "WebSocketServerTest", "testName": "testGetDrafts", "testMethod": "@Test\n public void testGetDrafts ( ) {\n     List < Draft > draftCollection = Collections . < Draft > singletonList ( new Draft_6455 ( ) ) ; \n     Collection < WebSocket > webSocketCollection = new HashSet < WebSocket > ( ) ; \n     InetSocketAddress inetAddress = new InetSocketAddress ( 1337 ) ; \n     MyWebSocketServer server = new MyWebSocketServer ( inetAddress , 1 , draftCollection , webSocketCollection ) ; \n     assertEquals(1,server.getDraft().size());\n}", "oracle": "assertEquals(1,server.getDraft().size());", "focalFile": "src/main/java/org/java_websocket/drafts/Draft_6455.java", "focalName": "Draft_6455", "focalMethod": " public Draft_6455 ( ) { \n this ( Collections . < IExtension > emptyList ( ) ) ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "className": "MacAddressTest", "testName": "testAddressNormalizedSeparator", "testMethod": "@Test\n public void testAddressNormalizedSeparator ( ) {\n     final MacAddress macAddress = new MacAddress ( NORMALIZED_ADDRESS ) ; \n     assertEquals(NORMALIZED_ADDRESS,macAddress.toString());\n}", "oracle": "assertEquals(NORMALIZED_ADDRESS,macAddress.toString());", "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) { \n final StringBuilder builder = new StringBuilder ( ) ; \n for ( int i = 0 ; \n i < address . length ; \n i ++ ) { \n if ( i != 0 ) { \n builder . append ( STANDARD_SEPARATOR ) ; \n } builder . append ( String . format ( \"STR\" , address [ i ] ) ) ; \n } return builder . toString ( ) ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "className": "CEFParserTest", "testName": "validStringMessageWithoutTZWithLocaleAndValidationTest", "testMethod": "@Test\n public void validStringMessageWithoutTZWithLocaleAndValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     Assert.assertNotNull(parser.parse(sample1,true,Locale.FRANCE));\n}", "oracle": "Assert.assertNotNull(parser.parse(sample1,true,Locale.FRANCE));", "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focalName": "parse", "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate , Locale locale ) { \n return this . parse ( cefString , validate , false , locale ) ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "className": "SubStatementTest", "testName": "testSetVerb", "testMethod": "@Test\n public void testSetVerb ( ) {\n     Verb expected = new Verb ( ID ) ; \n     substatement . setVerb ( expected ) ; \n     Verb actual = substatement . getVerb ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/SubStatement.java", "focalName": "getVerb", "focalMethod": " public Verb getVerb ( ) { \n return verb ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "className": "ActivityDefinitionTest", "testName": "testGetCorrectResponsesPattern", "testMethod": "@Test\n public void testGetCorrectResponsesPattern ( ) {\n     ArrayList < String > expected = new ArrayList < String > ( ) ; \n     expected . add ( \"STR\" ) ; \n     expected . add ( \"STR\" ) ; \n     ArrayList < String > actual = activityDefinition . getCorrectResponsesPattern ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java", "focalName": "getCorrectResponsesPattern", "focalMethod": " public ArrayList < String > getCorrectResponsesPattern ( ) { \n return correctResponsesPattern ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["javadev", "moneytostr-russian", ""], "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "className": "MoneyToStrTest", "testName": "checkUAHRUS", "testMethod": "@Test\n public void checkUAHRUS ( ) {\n     assertEquals(\"STR\",moneyToStrUAHRUS.convert(V_300D));\n}", "oracle": "assertEquals(\"STR\",moneyToStrUAHRUS.convert(V_300D));", "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focalName": "convert", "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } ", "commitid": "d39c8729e15292d4f3d38ddbae68977f170f482b"}
{"project": ["javadev", "moneytostr-russian", ""], "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "className": "MoneyToStrTest", "testName": "checkUSDUKR", "testMethod": "@Test\n public void checkUSDUKR ( ) {\n     assertEquals(\"STR\",moneyToStrUSD.convert(V_300D));\n}", "oracle": "assertEquals(\"STR\",moneyToStrUSD.convert(V_300D));", "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focalName": "convert", "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } ", "commitid": "d39c8729e15292d4f3d38ddbae68977f170f482b"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "className": "JmxAttributePollerTest", "testName": "testGetSetBatchPollProcessor", "testMethod": "@Test\n public void testGetSetBatchPollProcessor ( ) throws Exception {\n     assertNotNull(this.poller.getBatchPollProcessor());\n}", "oracle": "assertNotNull(this.poller.getBatchPollProcessor());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focalName": "getBatchPollProcessor", "focalMethod": " public BatchPollProcessor getBatchPollProcessor ( ) { \n return batchPollProcessor ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "className": "TSqlBuilderTest", "testName": "testSort", "testMethod": "@Test\n public void testSort ( ) {\n     sql . select ( ) . from ( \"STR\" ) . orderBy ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}", "oracle": "assertEquals(\"STR\",sql.toString());", "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) ; \n", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/rpc/addressargs/RpcAddressParserTest.java", "className": "RpcAddressParserTest", "testName": "testParserWithProtocol", "testMethod": "@Test\n public void testParserWithProtocol ( ) throws RemotingException {\n     String url = \"STR\" ; \n     RpcAddressParser parser = new RpcAddressParser ( ) ; \n     Url btUrl = parser . parse ( url ) ; \n     Assert.assertEquals(\"STR\",btUrl.getIp());\n}", "oracle": "Assert.assertEquals(\"STR\",btUrl.getIp());", "focalFile": "src/main/java/com/alipay/remoting/Url.java", "focalName": "getIp", "focalMethod": " public String getIp ( ) { \n return ip ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "className": "SpringBootUtilTest", "testName": "testNonExistentYamlToPropertiesParsing", "testMethod": "@Test\n public void testNonExistentYamlToPropertiesParsing ( ) {\n     Properties props = YamlUtil . getPropertiesFromYamlResource ( SpringBootUtilTest . class . getResource ( \"STR\" ) ) ; \n     assertNotNull(props);\n}", "oracle": "assertNotNull(props);", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/YamlUtil.java", "focalName": "getPropertiesFromYamlResource", "focalMethod": " protected static Properties getPropertiesFromYamlResource ( URL resource ) { \n return getPropertiesFromYamlResource ( null , resource ) ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "className": "RpcConnectionManagerTest", "testName": "testRemoveConnWithSpecifiedPoolkey", "testMethod": "@Test\n public void testRemoveConnWithSpecifiedPoolkey ( ) {\n     Connection conn1 = getAConn ( ) ; \n     conn1 . addPoolKey ( \"STR\" ) ; \n     Connection conn2 = getAConn ( ) ; \n     conn2 . addPoolKey ( \"STR\" ) ; \n     cm . add ( conn1 ) ; \n     cm . add ( conn2 ) ; \n     Assert.assertEquals(2,cm.count(poolKey));\n}", "oracle": "Assert.assertEquals(2,cm.count(poolKey));", "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focalName": "count", "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/wizard/WizardUtilsTest.java", "className": "WizardUtilsTest", "testName": "testGetFileFromUrl_fromJarFile", "testMethod": "@Test\n public void testGetFileFromUrl_fromJarFile ( ) throws Exception {\n     URL url = new URL ( \"STR\" ) ; \n     File file = WizardUtils . getFileFromUrl ( url , \"STR\" ) ; \n     assertNotNull(file);\n}", "oracle": "assertNotNull(file);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/wizard/WizardUtils.java", "focalName": "getFileFromUrl", "focalMethod": " static File getFileFromUrl ( URL url , String className ) { \n String extURL = url . toExternalForm ( ) ; \n if ( extURL . endsWith ( \"STR\" ) ) { \n extURL = extURL . substring ( 0 , extURL . lastIndexOf ( '/' ) ) ; \n } else { \n String suffix = \"STR\" + className . replace ( \"STR\" , \"STR\" ) + \"STR\" ; \n extURL = extURL . replace ( suffix , \"STR\" ) ; \n if ( extURL . startsWith ( \"STR\" ) && extURL . endsWith ( \"STR\" ) ) { \n extURL = extURL . substring ( FILE_EXTENSION_LENGTH , extURL . lastIndexOf ( '/' ) ) ; \n } } try { \n url = new URL ( extURL ) ; \n } catch ( MalformedURLException e ) { \n EmptyStatement . ignore ( e ) ; \n } try { \n return new File ( url . toURI ( ) ) ; \n } catch ( Exception ignored ) { \n return new File ( url . getPath ( ) ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "className": "OETLCSVExtractorTest", "testName": "testDoubleWithingQuotes", "testMethod": "@Test\n public void testDoubleWithingQuotes ( ) {\n     Double minDouble = 540282346638528870000000000000000000000.0d ; \n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}", "oracle": "assertFalse(res.isEmpty());", "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focalName": "execute", "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "className": "OPropertyMapIndexDefinitionTest", "testName": "testProcessChangeEventRemoveKeyWithConversion", "testMethod": "@Test\n public void testProcessChangeEventRemoveKeyWithConversion ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < String , String > multiValueChangeEvent = new OMultiValueChangeEvent < String , String > ( OMultiValueChangeEvent . OChangeType . REMOVE , \"STR\" , \"STR\" ) ; \n     propertyIndexByIntegerKey . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     removedKeys . put ( 12 , 1 ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}", "oracle": "Assert.assertEquals(keysToAdd,addedKeys);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focalName": "processChangeEvent", "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n final boolean result ; \n if ( indexBy . equals ( INDEX_BY . KEY ) ) result = processKeyChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n else result = processValueChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n if ( ! result ) throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropClusterStatementExecutionTest.java", "className": "ODropClusterStatementExecutionTest", "testName": "testDropClusterIfExists", "testMethod": "@Test\n public void testDropClusterIfExists ( ) {\n     String cluster = \"STR\" ; \n     ( ( ODatabaseDocumentTx ) db ) . getStorage ( ) . addCluster ( cluster ) ; \n     Assert.assertTrue(db.getClusterIdByName(cluster)>0);\n}", "oracle": "Assert.assertTrue(db.getClusterIdByName(cluster)>0);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "getClusterIdByName", "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "client"], "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsTest.java", "className": "OBatchOperationsTest", "testName": "testBatchOperationsNoTx", "testMethod": "@Test\n public void testBatchOperationsNoTx ( ) throws IOException {\n     List < ORecordOperation > operations = new ArrayList < > ( ) ; \n     operations . add ( new ORecordOperation ( new ODocument ( ) , ORecordOperation . CREATED ) ) ; \n     MockChannel channel = new MockChannel ( ) ; \n     OBatchOperationsRequest request = new OBatchOperationsRequest ( - 1 , operations ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     request = new OBatchOperationsRequest ( ) ; \n     request . read ( channel , 0 , ORecordSerializerNetworkFactory . INSTANCE . current ( ) ) ; \n     assertEquals(request.getOperations().size(),1);\n}", "oracle": "assertEquals(request.getOperations().size(),1);", "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsRequest.java", "focalName": "getOperations", "focalMethod": " public List < ORecordOperationRequest > getOperations ( ) { \n return operations ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "className": "OSQLFunctionAbsoluteValueTest", "testName": "testEmpty", "testMethod": "@Test\n public void testEmpty ( ) {\n     Object result = function . getResult ( ) ; \n     assertNull(result);\n}", "oracle": "assertNull(result);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java", "focalName": "getResult", "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "client"], "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OLiveQueryMessagesTests.java", "className": "OLiveQueryMessagesTests", "testName": "testLiveQueryPushRequest", "testMethod": "@Test\n public void testLiveQueryPushRequest ( ) throws IOException {\n     List < OLiveQueryResult > events = new ArrayList < > ( ) ; \n     OResultInternal res = new OResultInternal ( ) ; \n     res . setProperty ( \"STR\" , \"STR\" ) ; \n     res . setProperty ( \"STR\" , 10 ) ; \n     events . add ( new OLiveQueryResult ( OLiveQueryResult . CREATE_EVENT , res , null ) ) ; \n     events . add ( new OLiveQueryResult ( OLiveQueryResult . UPDATE_EVENT , new OResultInternal ( ) , new OResultInternal ( ) ) ) ; \n     events . add ( new OLiveQueryResult ( OLiveQueryResult . DELETE_EVENT , new OResultInternal ( ) , null ) ) ; \n     OLiveQueryPushRequest pushRequest = new OLiveQueryPushRequest ( 10 , OLiveQueryPushRequest . END , events ) ; \n     MockChannel channel = new MockChannel ( ) ; \n     pushRequest . write ( channel ) ; \n     channel . close ( ) ; \n     OLiveQueryPushRequest pushRequestRead = new OLiveQueryPushRequest ( ) ; \n     pushRequestRead . read ( channel ) ; \n     assertEquals(pushRequestRead.getMonitorId(),10);\n}", "oracle": "assertEquals(pushRequestRead.getMonitorId(),10);", "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OLiveQueryPushRequest.java", "focalName": "getMonitorId", "focalMethod": " public int getMonitorId ( ) { \n return monitorId ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "object"], "classPath": "object/src/test/java/com/orientechnologies/orient/object/enhancement/TestObjectWithDeletedLink.java", "className": "TestObjectWithDeletedLink", "testName": "testDeletedLink", "testMethod": "@Test\n public void testDeletedLink ( ) {\n     db . activateOnCurrentThread ( ) ; \n     SimpleSelfRef ob1 = new SimpleSelfRef ( ) ; \n     ob1 . setName ( \"STR\" ) ; \n     SimpleSelfRef ob2 = new SimpleSelfRef ( ) ; \n     ob2 . setName ( \"STR\" ) ; \n     ob1 . setFriend ( ob2 ) ; \n     ob1 = db . save ( ob1 ) ; \n     ob1 = db . reload ( ob1 , \"STR\" , true ) ; \n     ob2 = ob1 . getFriend ( ) ; \n     Assert.assertNotNull(ob1.getFriend());\n}", "oracle": "Assert.assertNotNull(ob1.getFriend());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "reload", "focalMethod": " < RET extends T > RET reload ( final T iObject , String iFetchPlan , boolean iIgnoreCache ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/OConnectionExecutorTransactionTest.java", "className": "OConnectionExecutorTransactionTest", "testName": "testExecutionBeginTransaction", "testMethod": "@Test\n public void testExecutionBeginTransaction ( ) {\n     OConnectionBinaryExecutor executor = new OConnectionBinaryExecutor ( connection , server ) ; \n     List < ORecordOperation > operations = new ArrayList < > ( ) ; \n     ODocument rec = new ODocument ( ) ; \n     ORecordInternal . setIdentity ( rec , new ORecordId ( 3 , - 2 ) ) ; \n     operations . add ( new ORecordOperation ( rec , ORecordOperation . CREATED ) ) ; \n     assertFalse(database.getTransaction().isActive());\n}", "oracle": "assertFalse(database.getTransaction().isActive());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java", "focalName": "isActive", "focalMethod": " boolean isActive ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "className": "JavaCompilerOptionsTest", "testName": "testRelease", "testMethod": "@Test\n public void testRelease ( ) throws Exception {\n     JavaCompilerOptions jco = new JavaCompilerOptions ( ) ; \n     jco . setRelease ( \"STR\" ) ; \n     List < String > result = jco . getOptions ( ) ; \n     assertEquals(3,result.size());\n}", "oracle": "assertEquals(3,result.size());", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java", "focalName": "getOptions", "focalMethod": " public List < String > getOptions ( ) { \n List < String > options = new ArrayList < String > ( ) ; \n if ( ! showWarnings ) { \n options . add ( \"STR\" ) ; \n } addStringOption ( options , \"STR\" , source ) ; \n addStringOption ( options , \"STR\" , target ) ; \n addStringOption ( options , \"STR\" , release ) ; \n return options ; \n } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "className": "JavaCompilerOptionsTest", "testName": "testTarget", "testMethod": "@Test\n public void testTarget ( ) throws Exception {\n     JavaCompilerOptions jco = new JavaCompilerOptions ( ) ; \n     jco . setTarget ( \"STR\" ) ; \n     List < String > result = jco . getOptions ( ) ; \n     assertEquals(3,result.size());\n}", "oracle": "assertEquals(3,result.size());", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java", "focalName": "getOptions", "focalMethod": " public List < String > getOptions ( ) { \n List < String > options = new ArrayList < String > ( ) ; \n if ( ! showWarnings ) { \n options . add ( \"STR\" ) ; \n } addStringOption ( options , \"STR\" , source ) ; \n addStringOption ( options , \"STR\" , target ) ; \n addStringOption ( options , \"STR\" , release ) ; \n return options ; \n } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "className": "YamlConfigLoaderTest", "testName": "roundtrips", "testMethod": "@Test\n public void roundtrips ( ) {\n     String yaml = \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     Config config = new Config ( ) ; \n     ConfigLoader configLoader = new YamlConfigLoader ( new StringReader ( yaml ) ) ; \n     configLoader . load ( config ) ; \n     assertEquals(yaml,config.toYaml(\"STR\"));\n}", "oracle": "assertEquals(yaml,config.toYaml(\"STR\"));", "focalFile": "src/main/java/io/cucumber/pro/config/Config.java", "focalName": "toYaml", "focalMethod": " public String toYaml ( String rootKey ) { \n try { \n StringBuilder out = new StringBuilder ( ) ; \n this . print ( 0 , rootKey , out ) ; \n return out . toString ( ) ; \n } catch ( IOException e ) { \n throw new RuntimeException ( e ) ; \n } } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "className": "PuzzleStateTest", "testName": "equal_even_with_different_history", "testMethod": "@Test\n public void equal_even_with_different_history ( ) {\n     Stack < PuzzleState . Direction > history = new Stack < > ( ) ; \n     history . add ( PuzzleState . Direction . Right ) ; \n     PuzzleState a = new PuzzleState ( getPuzzle ( 3 ) , history ) ; \n     PuzzleState b = new PuzzleState ( getPuzzle ( 3 ) ) ; \n     assertEquals(a,b);\n}", "oracle": "assertEquals(a,b);", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focalName": "PuzzleState", "focalMethod": " public PuzzleState ( Puzzle puzzle ) { \n this ( puzzle , new Stack < Direction > ( ) ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "className": "CABACTest", "testName": "testReadIntraChromaPredMode", "testMethod": "@Test\n public void testReadIntraChromaPredMode ( ) {\n     MockMDecoder m = new MockMDecoder ( new int [ ] { \n 0 } , new int [ ] { \n 64 } ) ; \n     Assert.assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));\n}", "oracle": "Assert.assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));", "focalFile": "src/main/java/org/jcodec/codecs/h264/io/CABAC.java", "focalName": "readIntraChromaPredMode", "focalMethod": " public int readIntraChromaPredMode ( MDecoder decoder , int mbX , MBType left , MBType top , boolean leftAvailable , boolean topAvailable ) { \n int ctx = 64 ; \n ctx += ! leftAvailable || left == null || ! left . isIntra ( ) || chromaPredModeLeft == 0 ? 0 : 1 ; \n ctx += ! topAvailable || top == null || ! top . isIntra ( ) || chromaPredModeTop [ mbX ] == 0 ? 0 : 1 ; \n int mode ; \n if ( decoder . decodeBin ( ctx ) == 0 ) mode = 0 ; \n else if ( decoder . decodeBin ( 67 ) == 0 ) mode = 1 ; \n else if ( decoder . decodeBin ( 67 ) == 0 ) mode = 2 ; \n else mode = 3 ; \n chromaPredModeLeft = chromaPredModeTop [ mbX ] = mode ; \n return mode ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "className": "ActivityDefinitionTest", "testName": "testSetType", "testMethod": "@Test\n public void testSetType ( ) {\n     String expected = \"STR\" ; \n     activityDefinition . setType ( expected ) ; \n     String actual = activityDefinition . getType ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java", "focalName": "getType", "focalMethod": " public String getType ( ) { \n return type ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "className": "VerbsTest", "testName": "testCompleted", "testMethod": "@Test\n public void testCompleted ( ) {\n     Verb actual = Verbs . completed ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focalName": "completed", "focalMethod": " public static Verb completed ( ) { \n return createVerb ( \"STR\" ) ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "className": "JMXJvmIdConnectionFactoryTest", "testName": "testCreateConnectionFailedToGetUrl", "testMethod": "@Test\n public void testCreateConnectionFailedToGetUrl ( ) throws Exception {\n     this . initFactory ( ) ; \n     Mockito . when ( this . mockAttacher . attach ( \"STR\" ) ) . thenReturn ( this . mockVirtualMachine ) ; \n     Mockito . when ( this . mockVirtualMachine . getAgentProperties ( ) ) . thenReturn ( this . mockAgentProperties ) ; \n     Mockito . when ( this . mockVirtualMachine . getSystemProperties ( ) ) . thenReturn ( this . mockSystemProperties ) ; \n     Mockito . when ( this . mockAgentProperties . getProperty ( JMXJvmIdConnectionFactory . COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ) . thenReturn ( null ) ; \n     MBeanAccessConnection result = this . factory . createConnection ( ) ; \n     assertNull(result);\n}", "oracle": "assertNull(result);", "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focalName": "createConnection", "focalMethod": "@Override\n public MBeanAccessConnection createConnection ( ) throws IOException { \n JMXMBeanConnection result = null ; \n try { \n VirtualMachine vm = this . attacher . attach ( jvmId ) ; \n String url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n if ( url == null ) { \n String javaHome = vm . getSystemProperties ( ) . getProperty ( \"STR\" ) ; \n String agent = javaHome + File . separator + \"STR\" + File . separator + \"STR\" ; \n vm . loadAgent ( agent ) ; \n url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n } if ( url != null ) { \n JMXServiceURL jmxUrl = this . jmxServiceUrlFactory . createJMXServiceUrl ( url ) ; \n JMXConnector connector = this . jmxConnectorFactoryDelegate . connect ( jmxUrl ) ; \n result = this . jmxmBeanConnectionFactory . create ( connector ) ; \n } else { \n log . warn ( \"STR\" , this . jvmId ) ; \n } } catch ( AgentInitializationException | AgentLoadException | AttachNotSupportedException exc ) { \n log . warn ( \"STR\" , this . jvmId , exc ) ; \n } return result ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "className": "ObjectQueryPreparerTest", "testName": "testPrepareObjectQueryWithParameterReplacement", "testMethod": "@Test\n public void testPrepareObjectQueryWithParameterReplacement ( ) throws Exception {\n     ObjectQueryInfo result ; \n     this . initPreparer ( ) ; \n     Mockito . when ( this . mockParameterReplacer . replaceObjectNameParameters ( TEST_ONAME_STR002 , this . testTarget002 ) ) . thenReturn ( TEST_ONAME_STR002B ) ; \n     result = this . preparer . prepareObjectQuery ( this . testTarget002 ) ; \n     assertSame(this.testTarget002,result.getTarget());\n}", "oracle": "assertSame(this.testTarget002,result.getTarget());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryInfo.java", "focalName": "getTarget", "focalMethod": " public Object getTarget ( ) { \n return target ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "className": "AJsonSerHelperTest", "testName": "testArray1", "testMethod": "@Test\n public void testArray1 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . startArray ( ) ; \n     ser . writeBooleanLiteral ( true ) ; \n     ser . endArray ( ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}", "oracle": "assertEquals(\"STR\",result);", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focalName": "endArray", "focalMethod": " public void endArray ( ) throws IOException { \n checkInArray ( ) ; \n state . pop ( ) ; \n out . write ( \"STR\" ) ; \n afterValueWritten ( ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["xmlet", "XsdParser", ""], "classPath": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "className": "IssuesTest", "testName": "testIssue23", "testMethod": "@Test\n public void testIssue23 ( ) {\n     XsdParser parser = new XsdParser ( getFilePath ( \"STR\" ) ) ; \n     List < XsdSchema > schemas = parser . getResultXsdSchemas ( ) . collect ( Collectors . toList ( ) ) ; \n     Assert.assertTrue(true);\n}", "oracle": "Assert.assertTrue(true);", "focalFile": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java", "focalName": "getResultXsdSchemas", "focalMethod": " public Stream < XsdSchema > getResultXsdSchemas ( ) { \n return parseElements . values ( ) . stream ( ) . flatMap ( List :: stream ) . filter ( element -> element . getElement ( ) instanceof XsdSchema ) . map ( element -> ( XsdSchema ) element . getElement ( ) ) ; \n } ", "commitid": "8dce9914aac46eea527f6c773a753175e93ad709"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "className": "MacAddressTest", "testName": "testAddressMulticast", "testMethod": "@Test\n public void testAddressMulticast ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     assertTrue(macAddress.isMulticast());\n}", "oracle": "assertTrue(macAddress.isMulticast());", "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focalName": "isMulticast", "focalMethod": " public boolean isMulticast ( ) { \n return ( address [ 0 ] & MUTLTICAST_FLAG ) == MUTLTICAST_FLAG ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "className": "ACollectionHelperTest", "testName": "testCollect", "testMethod": "@Test\n public void testCollect ( ) throws Exception {\n     APartialFunctionNoThrow < Integer , Double > squareRoot = new APartialFunctionNoThrow < Integer , Double > ( ) { \n @Override\n public boolean isDefinedAt ( Integer param ) { \n return param != 0 ; \n } @Override\n public Double apply ( Integer param ) { \n return Math . sqrt ( param ) ; \n } } ; \n     final List < Double > result = ACollectionHelper . collect ( Arrays . asList ( 0 , 1 , 2 , 3 , 4 ) , squareRoot ) ; \n     assertEquals(4,result.size());\n}", "oracle": "assertEquals(4,result.size());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focalName": "collect", "focalMethod": " public static < T , X , E extends Throwable > List < X > collect ( List < T > coll , APartialFunction < ? super T , ? extends X , E > pf ) throws E { \n final List < X > result = createEmptyListOfType ( coll , true ) ; \n for ( T o : coll ) { \n if ( pf . isDefinedAt ( o ) ) { \n result . add ( pf . apply ( o ) ) ; \n } } return result ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "className": "AJsonSerHelperTest", "testName": "testNumber", "testMethod": "@Test\n public void testNumber ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeNumberLiteral ( 12345 , 0 ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}", "oracle": "assertEquals(\"STR\",result);", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focalName": "writeNumberLiteral", "focalMethod": " public void writeNumberLiteral ( long value , int numFracDigits ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n if ( value < 0 ) { \n out . write ( '-' ) ; \n value = - value ; \n } if ( numFracDigits == 0 ) { \n out . write ( String . valueOf ( value ) ) ; \n } else { \n final long intPart = value / TEN_POW [ numFracDigits ] ; \n final String fracPart = String . valueOf ( 1_000_000_000 + value % TEN_POW [ numFracDigits ] ) . substring ( 10 - numFracDigits , 10 ) ; \n out . write ( String . valueOf ( intPart ) ) ; \n out . write ( \"STR\" ) ; \n out . write ( fracPart ) ; \n } afterValueWritten ( ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "className": "OMatchStatementExecutionNewTest", "testName": "testIndexedEdgeArrows", "testMethod": "@Test\n public void testIndexedEdgeArrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}", "oracle": "Assert.assertTrue(result.hasNext());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "hasNext", "focalMethod": "@Override\n boolean hasNext ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "className": "AlterPropertyTest", "testName": "testPropertyRenaming", "testMethod": "@Test\n public void testPropertyRenaming ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass classA = schema . createClass ( \"STR\" ) ; \n     OProperty property = classA . createProperty ( \"STR\" , OType . STRING ) ; \n     assertEquals(property,classA.getProperty(\"STR\"));\n}", "oracle": "assertEquals(property,classA.getProperty(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java", "focalName": "getProperty", "focalMethod": " OProperty getProperty ( String iPropertyName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "className": "ContentActivitiesTest", "testName": "testGetCategory", "testMethod": "@Test\n public void testGetCategory ( ) {\n     ArrayList < Activity > expected = category ; \n     ArrayList < Activity > actual = contextActivities . getCategory ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ContextActivities.java", "focalName": "getCategory", "focalMethod": " public ArrayList < Activity > getCategory ( ) { \n return category ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/AboutTest.java", "className": "AboutTest", "testName": "testSetExtensions", "testMethod": "@Test\n public void testSetExtensions ( ) {\n     JsonObject expected = new JsonObject ( ) ; \n     expected . addProperty ( \"STR\" , UUID . randomUUID ( ) . toString ( ) ) ; \n     about . setExtensions ( expected ) ; \n     JsonObject actual = about . getExtensions ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/About.java", "focalName": "getExtensions", "focalMethod": " public JsonObject getExtensions ( ) { \n return extensions ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "className": "SubStatementTest", "testName": "testGetContext", "testMethod": "@Test\n public void testGetContext ( ) {\n     Context expected = context ; \n     Context actual = substatement . getContext ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/SubStatement.java", "focalName": "getContext", "focalMethod": " public Context getContext ( ) { \n return context ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/AttachmentTest.java", "className": "AttachmentTest", "testName": "testGetUsageType", "testMethod": "@Test\n public void testGetUsageType ( ) throws URISyntaxException {\n     URI expected = new URI ( \"STR\" ) ; \n     attachment . setUsageType ( expected ) ; \n     URI actual = attachment . getUsageType ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Attachment.java", "focalName": "getUsageType", "focalMethod": " public URI getUsageType ( ) { \n return usageType ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java", "className": "StatementTest", "testName": "testSetVersion", "testMethod": "@Test\n public void testSetVersion ( ) {\n     String expected = \"STR\" ; \n     statement . setVersion ( expected ) ; \n     String actual = statement . getVersion ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java", "focalName": "getVersion", "focalMethod": " public String getVersion ( ) { \n return version ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/ThorntailUtilTest.java", "className": "ThorntailUtilTest", "testName": "testReadThorntailPort", "testMethod": "@Test\n public void testReadThorntailPort ( ) {\n     Properties props = YamlUtil . getPropertiesFromYamlResource ( SpringBootUtilTest . class . getResource ( \"STR\" ) ) ; \n     assertNotNull(props);\n}", "oracle": "assertNotNull(props);", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/YamlUtil.java", "focalName": "getPropertiesFromYamlResource", "focalMethod": " protected static Properties getPropertiesFromYamlResource ( URL resource ) { \n return getPropertiesFromYamlResource ( null , resource ) ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["NanoHttpd", "nanohttpd", "core"], "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "className": "LoadKeyStoreTest", "testName": "loadKeyStoreFromResourcesWrongPassword", "testMethod": "@Test\n public void loadKeyStoreFromResourcesWrongPassword ( ) throws Exception {\n     String keyStorePath = \"STR\" ; \n     InputStream resourceAsStream = this . getClass ( ) . getResourceAsStream ( keyStorePath ) ; \n     assertNotNull(resourceAsStream);\n}", "oracle": "assertNotNull(resourceAsStream);", "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java", "focalName": "makeSSLSocketFactory", "focalMethod": " public static SSLServerSocketFactory makeSSLSocketFactory ( String keyAndTrustStoreClasspathPath , char [ ] passphrase ) throws IOException { \n try { \n KeyStore keystore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; \n InputStream keystoreStream = NanoHTTPD . class . getResourceAsStream ( keyAndTrustStoreClasspathPath ) ; \n if ( keystoreStream == null ) { \n throw new IOException ( \"STR\" + keyAndTrustStoreClasspathPath ) ; \n } keystore . load ( keystoreStream , passphrase ) ; \n KeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ; \n keyManagerFactory . init ( keystore , passphrase ) ; \n return makeSSLSocketFactory ( keystore , keyManagerFactory ) ; \n } catch ( Exception e ) { \n throw new IOException ( e . getMessage ( ) ) ; \n } } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["Yubico", "yubico-java-client", "v2client"], "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "className": "YubicoClientTest", "testName": "testTwoQueries", "testMethod": "@Test\n public void testTwoQueries ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());\n}", "oracle": "assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());", "focalFile": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java", "focalName": "getStatus", "focalMethod": " ResponseStatus getStatus ( ) ; \n", "commitid": "e21fb672e290a118f7420daaf81ccb96d319d52c"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "className": "HostURLFilterTest", "testName": "testWithinHostOnly", "testMethod": "@Test\n public void testWithinHostOnly ( ) throws MalformedURLException {\n     HostURLFilter allAllowed = createFilter ( true , false ) ; \n     URL sourceURL = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = allAllowed . filter ( sourceURL , metadata , \"STR\" ) ; \n     Assert.assertEquals(\"STR\",filterResult);\n}", "oracle": "Assert.assertEquals(\"STR\",filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focalName": "filter", "focalMethod": "@Override\n public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) { \n if ( sourceUrl == null || ( ! ignoreOutsideHost && ! ignoreOutsideDomain ) ) { \n return urlToFilter ; \n } URL tURL ; \n try { \n tURL = new URL ( urlToFilter ) ; \n } catch ( MalformedURLException e1 ) { \n return null ; \n } String fromHost ; \n String fromDomain = null ; \n if ( sourceUrl == previousSourceUrl ) { \n fromHost = previousSourceHost ; \n if ( ignoreOutsideDomain ) { \n fromDomain = previousSourceDomain ; \n } } else { \n fromHost = sourceUrl . getHost ( ) ; \n if ( ignoreOutsideDomain ) { \n fromDomain = PaidLevelDomain . getPLD ( fromHost ) ; \n } previousSourceHost = fromHost ; \n previousSourceDomain = fromDomain ; \n previousSourceUrl = sourceUrl ; \n } String toHost = tURL . getHost ( ) ; \n if ( ignoreOutsideHost ) { \n if ( toHost == null || ! toHost . equalsIgnoreCase ( fromHost ) ) { \n return null ; \n } } if ( ignoreOutsideDomain ) { \n String toDomain = PaidLevelDomain . getPLD ( toHost ) ; \n if ( toDomain == null || ! toDomain . equals ( fromDomain ) ) { \n return null ; \n } } return urlToFilter ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java", "className": "SeekHeadFactoryTest", "testName": "testEdgeCasesWithFakeZ", "testMethod": "@Test\n public void testEdgeCasesWithFakeZ ( ) throws Exception {\n     SeekHeadFactory a = new SeekHeadFactory ( - 1 ) ; \n     a . a . add ( createFakeZ ( Info . id , 0xFF ) ) ; \n     a . a . add ( createFakeZ ( Tracks . id , 0xFF05 ) ) ; \n     a . a . add ( createFakeZ ( Tags . id , 0xFEFFC0 ) ) ; \n     a . a . add ( createFakeZ ( Cues . id , 0xFF ) ) ; \n     int computeSize = a . computeSeekHeadSize ( ) ; \n     System . out . println ( \"STR\" + computeSize ) ; \n     assertEquals(a.estimateSize(),computeSize);\n}", "oracle": "assertEquals(a.estimateSize(),computeSize);", "focalFile": "src/main/java/org/jcodec/containers/mkv/SeekHeadFactory.java", "focalName": "estimateSize", "focalMethod": " int estimateSize ( ) { \n int s = SeekHead . id . length + 1 ; \n s += estimeteSeekSize ( a . get ( 0 ) . id . length , 1 ) ; \n for ( int i = 1 ; \n i < a . size ( ) ; \n i ++ ) { \n s += estimeteSeekSize ( a . get ( i ) . id . length , a . get ( i ) . seekPointerSize ) ; \n } return s ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/codecs/mpeg12/SegmentReaderTest.java", "className": "SegmentReaderTest", "testName": "testToNextMarkerPartialVar1", "testMethod": "@Test\n public void testToNextMarkerPartialVar1 ( ) throws IOException {\n     byte [ ] bytes = new byte [ ] { \n 0 , 0 , 1 , 42 , 43 , 44 , 45 , 46 , 0 , 0 , 1 , 43 } ; \n     ReadableByteChannel ch = Channels . newChannel ( new ByteArrayInputStream ( bytes ) ) ; \n     SegmentReader reader = new SegmentReader ( ch , 1 ) ; \n     reader . setBufferIncrement ( 1 ) ; \n     ByteBuffer buf1 = reader . readToNextMarkerNewBuffer ( ) ; \n     ByteBuffer buf2 = reader . readToNextMarkerNewBuffer ( ) ; \n     ByteBuffer buf3 = reader . readToNextMarkerNewBuffer ( ) ; \n     Assert.assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);\n}", "oracle": "Assert.assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);", "focalFile": "src/main/java/org/jcodec/codecs/mpeg12/SegmentReader.java", "focalName": "readToNextMarkerNewBuffer", "focalMethod": " public ByteBuffer readToNextMarkerNewBuffer ( ) throws IOException { \n if ( done ) return null ; \n List < ByteBuffer > buffers = new ArrayList < ByteBuffer > ( ) ; \n readToNextMarkerBuffers ( buffers ) ; \n return NIOUtils . combineBuffers ( buffers ) ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/source/DirectorySourceLoaderTest.java", "className": "DirectorySourceLoaderTest", "testName": "testMissingSourceFileFromDirectory", "testMethod": "@Test\n public void testMissingSourceFileFromDirectory ( ) throws Exception {\n     DirectorySourceLoader sourceLoader = new DirectorySourceLoader ( folder . getRoot ( ) , folder . getRoot ( ) , \"STR\" ) ; \n     assertNull(sourceLoader.load(\"STR\"));\n}", "oracle": "assertNull(sourceLoader.load(\"STR\"));", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/source/AbstractSourceLoader.java", "focalName": "load", "focalMethod": "@Override\n public Source load ( final String sourceFile ) throws IOException { \n InputStream stream = locate ( sourceFile ) ; \n if ( stream != null ) { \n try ( Md5DigestInputStream ds = new Md5DigestInputStream ( stream ) ; \n InputStreamReader reader = new InputStreamReader ( ds , getSourceEncoding ( ) ) ) { \n String source = IOUtil . toString ( reader ) ; \n return new Source ( getFileName ( sourceFile ) , source , ds . getDigestHex ( ) ) ; \n } catch ( NoSuchAlgorithmException ex ) { \n throw new IOException ( \"STR\" , ex ) ; \n } } else { \n return null ; \n } } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "className": "SimulatorAddressTest", "testName": "testGetAddressIndex_fromAgent", "testMethod": "@Test\n public void testGetAddressIndex_fromAgent ( ) {\n     assertEquals(5,agentAddress(5).getAddressIndex());\n}", "oracle": "assertEquals(5,agentAddress(5).getAddressIndex());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java", "focalName": "getAddressIndex", "focalMethod": " public int getAddressIndex ( ) { \n switch ( addressLevel ) { \n case AGENT : return agentIndex ; \n case WORKER : return workerIndex ; \n default : throw new IllegalArgumentException ( \"STR\" ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/io/OIOUtilsTest.java", "className": "OIOUtilsTest", "testName": "shoudGetRightTimeFromString", "testMethod": "@Test\n public void shoudGetRightTimeFromString ( ) throws ParseException {\n     Calendar calendar = Calendar . getInstance ( ) ; \n     calendar . set ( Calendar . HOUR_OF_DAY , 5 ) ; \n     calendar . set ( Calendar . MINUTE , 10 ) ; \n     calendar . set ( Calendar . SECOND , 0 ) ; \n     calendar . set ( Calendar . MILLISECOND , 0 ) ; \n     Date d = OIOUtils . getTodayWithTime ( \"STR\" ) ; \n     assertEquals(calendar.getTime(),d);\n}", "oracle": "assertEquals(calendar.getTime(),d);", "focalFile": "core/src/main/java/com/orientechnologies/common/io/OIOUtils.java", "focalName": "getTodayWithTime", "focalMethod": " public static Date getTodayWithTime ( final String iTime ) throws ParseException { \n final SimpleDateFormat df = new SimpleDateFormat ( \"STR\" ) ; \n Calendar calParsed = Calendar . getInstance ( ) ; \n calParsed . setTime ( df . parse ( iTime ) ) ; \n Calendar cal = Calendar . getInstance ( ) ; \n cal . set ( Calendar . HOUR_OF_DAY , calParsed . get ( Calendar . HOUR_OF_DAY ) ) ; \n cal . set ( Calendar . MINUTE , calParsed . get ( Calendar . MINUTE ) ) ; \n cal . set ( Calendar . SECOND , calParsed . get ( Calendar . SECOND ) ) ; \n cal . set ( Calendar . MILLISECOND , 0 ) ; \n return cal . getTime ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "className": "OMatchStatementExecutionTest", "testName": "testSimpleLimit", "testMethod": "@Test\n public void testSimpleLimit ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}", "oracle": "assertEquals(1,qResult.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneSortTest.java", "className": "LuceneSortTest", "testName": "shouldIndexVeryLongDescriptionWithSingleField", "testMethod": "@Test\n public void shouldIndexVeryLongDescriptionWithSingleField ( ) throws Exception {\n     db . save ( new ODocument ( \"STR\" ) . field ( \"STR\" , DESCRIPTION ) ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     long count = db . query ( \"STR\" ) . stream ( ) . count ( ) ; \n     Assert.assertEquals(1,count);\n}", "oracle": "Assert.assertEquals(1,count);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "stream", "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "className": "AlterPropertyTest", "testName": "testRemoveLinkedClass", "testMethod": "@Test\n public void testRemoveLinkedClass ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass classA = schema . createClass ( \"STR\" ) ; \n     OClass classLinked = schema . createClass ( \"STR\" ) ; \n     OProperty prop = classA . createProperty ( \"STR\" , OType . LINK , classLinked ) ; \n     assertNotNull(prop.getLinkedClass());\n}", "oracle": "assertNotNull(prop.getLinkedClass());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focalName": "getLinkedClass", "focalMethod": " public OClass getLinkedClass ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/CompactedLinkSerializerTest.java", "className": "CompactedLinkSerializerTest", "testName": "testSerializeThreeBytesInByteBuffer", "testMethod": "@Test\n public void testSerializeThreeBytesInByteBuffer ( ) {\n     final OCompactedLinkSerializer linkSerializer = new OCompactedLinkSerializer ( ) ; \n     final ORecordId rid = new ORecordId ( 123 , 65628 ) ; \n     final int size = linkSerializer . getObjectSize ( rid ) ; \n     ByteBuffer buffer = ByteBuffer . allocate ( size + 1 ) ; \n     buffer . position ( 1 ) ; \n     linkSerializer . serializeInByteBufferObject ( rid , buffer ) ; \n     buffer . position ( 1 ) ; \n     Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));\n}", "oracle": "Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/OCompactedLinkSerializer.java", "focalName": "getObjectSizeInByteBuffer", "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer ) { \n return buffer . get ( buffer . position ( ) + OShortSerializer . SHORT_SIZE ) + OByteSerializer . BYTE_SIZE + OShortSerializer . SHORT_SIZE ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testAggregations", "testMethod": "@Test\n public void testAggregations ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(1,results.size());\n}", "oracle": "assertEquals(1,results.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focalName": "query", "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "className": "DefaultExtensionTest", "testName": "testGetProvidedExtensionAsClient", "testMethod": "@Test\n public void testGetProvidedExtensionAsClient ( ) throws Exception {\n     DefaultExtension defaultExtension = new DefaultExtension ( ) ; \n     assertEquals(\"STR\",defaultExtension.getProvidedExtensionAsClient());\n}", "oracle": "assertEquals(\"STR\",defaultExtension.getProvidedExtensionAsClient());", "focalFile": "src/main/java/org/java_websocket/extensions/DefaultExtension.java", "focalName": "getProvidedExtensionAsClient", "focalMethod": "@Override\n public String getProvidedExtensionAsClient ( ) { \n return \"STR\" ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "className": "DefaultExtensionTest", "testName": "testHashCode", "testMethod": "@Test\n public void testHashCode ( ) throws Exception {\n     DefaultExtension defaultExtension0 = new DefaultExtension ( ) ; \n     DefaultExtension defaultExtension1 = new DefaultExtension ( ) ; \n     assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());\n}", "oracle": "assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());", "focalFile": "src/main/java/org/java_websocket/extensions/DefaultExtension.java", "focalName": "hashCode", "focalMethod": "@Override\n public int hashCode ( ) { \n return getClass ( ) . hashCode ( ) ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "className": "CEFParserTest", "testName": "validByteArrayMessageWithoutValidationTest", "testMethod": "@Test\n public void validByteArrayMessageWithoutValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     byte [ ] sample1Array = sample1 . getBytes ( Charset . forName ( \"STR\" ) ) ; \n     Assert.assertNotNull(parser.parse(sample1Array));\n}", "oracle": "Assert.assertNotNull(parser.parse(sample1Array));", "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focalName": "parse", "focalMethod": " public CommonEvent parse ( byte [ ] cefByteArray ) { \n String cefString ; \n cefString = new String ( cefByteArray , Charset . forName ( \"STR\" ) ) ; \n return this . parse ( cefString , false ) ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "className": "CEFParserTest", "testName": "invalidMessageTypesTest", "testMethod": "@Test\n public void invalidMessageTypesTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     CommonEvent event = parser . parse ( sample1 , true ) ; \n     Assert.assertNull(event);\n}", "oracle": "Assert.assertNull(event);", "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focalName": "parse", "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "className": "SystemLoggerTest", "testName": "ignores_log_level_case", "testMethod": "@Test\n public void ignores_log_level_case ( ) {\n     Config config = createConfig ( ) ; \n     config . set ( Keys . CUCUMBERPRO_LOGGING , \"STR\" ) ; \n     Logger . SystemLogger logger = new Logger . SystemLogger ( config ) ; \n     assertEquals(Logger.Level.DEBUG,logger.level);\n}", "oracle": "assertEquals(Logger.Level.DEBUG,logger.level);", "focalFile": "src/main/java/io/cucumber/pro/config/Config.java", "focalName": "set", "focalMethod": " public void set ( String key , String value ) { \n setIn ( normalize ( key ) , RealValue . fromString ( value ) ) ; \n } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "className": "SystemLoggerTest", "testName": "is_info_level_by_default", "testMethod": "@Test\n public void is_info_level_by_default ( ) {\n     Config config = createConfig ( ) ; \n     Logger . SystemLogger logger = new Logger . SystemLogger ( config ) ; \n     assertEquals(Logger.Level.INFO,logger.level);\n}", "oracle": "assertEquals(Logger.Level.INFO,logger.level);", "focalFile": "src/main/java/io/cucumber/pro/Keys.java", "focalName": "createConfig", "focalMethod": " public static Config createConfig ( ) { \n Config config = new Config ( ) ; \n config . set ( CUCUMBERPRO_CONNECTION_TIMEOUT , 5000 ) ; \n config . set ( CUCUMBERPRO_ENVMASK , \"STR\" ) ; \n config . setNull ( CUCUMBERPRO_LOGFILE ) ; \n config . set ( CUCUMBERPRO_LOGGING , \"STR\" ) ; \n config . setNull ( CUCUMBERPRO_PROFILE ) ; \n config . setNull ( CUCUMBERPRO_PROJECTNAME ) ; \n config . setNull ( CUCUMBERPRO_TOKEN ) ; \n config . set ( CUCUMBERPRO_URL , \"STR\" ) ; \n return config ; \n } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "className": "VerbsTest", "testName": "testAnswered", "testMethod": "@Test\n public void testAnswered ( ) {\n     Verb actual = Verbs . answered ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focalName": "answered", "focalMethod": " public static Verb answered ( ) { \n return createVerb ( \"STR\" ) ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "className": "StatementResultTest", "testName": "testSetStatements", "testMethod": "@Test\n public void testSetStatements ( ) {\n     ArrayList < Statement > expected = statements ; \n     Statement s = new Statement ( ) ; \n     expected . add ( s ) ; \n     statementResult . setStatements ( expected ) ; \n     ArrayList < Statement > actual = statementResult . getStatements ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/StatementResult.java", "focalName": "getStatements", "focalMethod": " public ArrayList < Statement > getStatements ( ) { \n return statements ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/platform/PlatformTest.java", "className": "PlatformTest", "testName": "testInvokeStatic2", "testMethod": "@Test\n public void testInvokeStatic2 ( ) {\n     int parseBuf = Platform . invokeStaticMethod ( PlatformTest . class , \"STR\" , new Object [ ] { \n ByteBuffer . wrap ( \"STR\" . getBytes ( ) ) } ) ; \n     assertEquals(42,parseBuf);\n}", "oracle": "assertEquals(42,parseBuf);", "focalFile": "src/main/java/org/jcodec/platform/Platform.java", "focalName": "invokeStaticMethod", "focalMethod": " public static < T > T invokeStaticMethod ( Class < ? > cls , String methodName , Object [ ] params ) { \n try { \n for ( Method method : cls . getDeclaredMethods ( ) ) { \n if ( method . getName ( ) . equals ( methodName ) ) { \n return ( T ) method . invoke ( null , params ) ; \n } } throw new NoSuchMethodException ( cls + \"STR\" + methodName ) ; \n } catch ( Exception e ) { \n throw new RuntimeException ( e ) ; \n } } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["Yubico", "yubico-java-client", "v2client"], "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "className": "YubicoClientTest", "testName": "testSignature", "testMethod": "@Test\n public void testSignature ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     client . setKey ( this . apiKey ) ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertNotNull(response);\n}", "oracle": "assertNotNull(response);", "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focalName": "verify", "focalMethod": " public abstract VerificationResponse verify ( String otp ) throws YubicoVerificationException , YubicoValidationFailure ; \n", "commitid": "e21fb672e290a118f7420daaf81ccb96d319d52c"}
{"project": ["NanoHttpd", "nanohttpd", "nanolets"], "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "className": "TestNanolets", "testName": "uriToString", "testMethod": "@Test\n public void uriToString ( ) throws Exception {\n     Assert.assertEquals(\"STR\",newUriResource(\"STR\",100,GeneralHandler.class).toString());\n}", "oracle": "Assert.assertEquals(\"STR\",newUriResource(\"STR\",100,GeneralHandler.class).toString());", "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD$UriResource.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) { \n return new StringBuilder ( \"STR\" ) . append ( ( uri == null ? \"STR\" : uri ) ) . append ( \"STR\" ) . append ( uriParams ) . append ( '}' ) . toString ( ) ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["DigitalPebble", "storm-crawler", "external/warc"], "classPath": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "className": "WARCRecordFormatTest", "testName": "testGetDigestSha1RobotsTxt", "testMethod": "@Test\n public void testGetDigestSha1RobotsTxt ( ) {\n     String robotsTxt = \"STR\" ; \n     byte [ ] content = robotsTxt . getBytes ( StandardCharsets . UTF_8 ) ; \n     String sha1str = \"STR\" ; \n     assertEquals(\"STR\",sha1str,WARCRecordFormat.getDigestSha1(content));\n}", "oracle": "assertEquals(\"STR\",sha1str,WARCRecordFormat.getDigestSha1(content));", "focalFile": "external/warc/src/main/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormat.java", "focalName": "getDigestSha1", "focalMethod": " public static String getDigestSha1 ( byte [ ] bytes ) { \n return \"STR\" + base32 . encodeAsString ( DigestUtils . sha1 ( bytes ) ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "className": "BasicURLNormalizerTest", "testName": "testInvalidURI", "testMethod": "@Test\n public void testInvalidURI ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( true , true ) ; \n     String nonURI = \"STR\" ; \n     URL testSourceUrl = new URL ( nonURI ) ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , nonURI ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}", "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focalName": "filter", "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "className": "CircleTest", "testName": "testGetName", "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newCircle(env()).getName());\n}", "oracle": "assertEquals(\"STR\",newCircle(env()).getName());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Circle.java", "focalName": "getName", "focalMethod": "@Override\n public String getName ( ) { \n return CIRCLE_NAME ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["basis-technology-corp", "tcl-regex-java", ""], "classPath": "src/test/java/apitests/MatcherTest.java", "className": "MatcherTest", "testName": "reset", "testMethod": "@Test\n public void reset ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}", "oracle": "assertTrue(matcher.find());", "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java", "focalName": "find", "focalMethod": " boolean find ( ) ; \n", "commitid": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "className": "PropertyBindingSupport_bind0_NumericalTest", "testName": "bind_Double", "testMethod": "@Test\n public void bind_Double ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}", "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focalName": "bind0", "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingkidsprogramming/recipes/completed/FizzBuzzTDDTest.java", "className": "FizzBuzzTDDTest", "testName": "test1Returns1", "testMethod": "@Test\n public void test1Returns1 ( ) {\n     String result = FizzBuzzTDD . convert ( 1 ) ; \n     assertEquals(\"STR\",result);\n}", "oracle": "assertEquals(\"STR\",result);", "focalFile": "src/main/java/org/teachingkidsprogramming/recipes/completed/section09final/FizzBuzzTDD.java", "focalName": "convert", "focalMethod": " public static String convert ( int i ) { \n if ( 0 == i % 15 ) { \n return \"STR\" ; \n } if ( 0 == i % 5 ) { \n return \"STR\" ; \n } if ( 0 == i % 3 ) { \n return \"STR\" ; \n } return \"STR\" + i ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testProjection", "testMethod": "@Test\n public void testProjection ( ) {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}", "oracle": "assertEquals(qResult.size(),1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ORecordBytesTest.java", "className": "ORecordBytesTest", "testName": "testReadFromInputStreamWithWaitSizeTooBigLimit", "testMethod": "@Test\n public void testReadFromInputStreamWithWaitSizeTooBigLimit ( ) throws Exception {\n     final byte [ ] data = new byte [ ] { \n 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; \n     final InputStream is = new NotFullyAvailableAtTheTimeInputStream ( data , 5 ) ; \n     final int result = testedInstance . fromInputStream ( is , 15 ) ; \n     Assert.assertEquals(result,data.length);\n}", "oracle": "Assert.assertEquals(result,data.length);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/OBlob.java", "focalName": "fromInputStream", "focalMethod": " int fromInputStream ( final InputStream in , final int maxSize ) throws IOException ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "className": "CASObjectArrayTest", "testName": "testSetTwoItems", "testMethod": "@Test\n public void testSetTwoItems ( ) {\n     final CASObjectArray < Integer > array = new CASObjectArray < > ( ) ; \n     Assert.assertEquals(0,array.add(1));\n}", "oracle": "Assert.assertEquals(0,array.add(1));", "focalFile": "core/src/main/java/com/orientechnologies/common/concur/collection/CASObjectArray.java", "focalName": "add", "focalMethod": " public int add ( T value ) { \n Objects . requireNonNull ( value ) ; \n while ( true ) { \n final int newIndex = size . get ( ) ; \n final int containerIndex = 31 - Integer . numberOfLeadingZeros ( newIndex + 1 ) ; \n final int containerSize = 1 << containerIndex ; \n final int indexInsideContainer = newIndex + 1 - containerSize ; \n AtomicReferenceArray < T > container = containers . get ( containerIndex ) ; \n if ( container == null ) { \n container = new AtomicReferenceArray < > ( containerSize ) ; \n if ( ! containers . compareAndSet ( containerIndex , null , container ) ) { \n container = containers . get ( containerIndex ) ; \n } } if ( container . compareAndSet ( indexInsideContainer , null , value ) ) { \n size . incrementAndGet ( ) ; \n return newIndex ; \n } } } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "className": "OMatchStatementExecutionNewTest", "testName": "testArrayRange2", "testMethod": "@Test\n public void testArrayRange2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}", "oracle": "Assert.assertTrue(result.hasNext());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "hasNext", "focalMethod": "@Override\n boolean hasNext ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "className": "OMultiKeyTest", "testName": "testOneKeyMap", "testMethod": "@Test\n public void testOneKeyMap ( ) {\n     final Map < OMultiKey , Object > multiKeyMap = new HashMap < OMultiKey , Object > ( ) ; \n     final OMultiKey multiKey = new OMultiKey ( Collections . singletonList ( \"STR\" ) ) ; \n     multiKeyMap . put ( multiKey , new Object ( ) ) ; \n     final OMultiKey anotherMultiKey = new OMultiKey ( Collections . singletonList ( \"STR\" ) ) ; \n     final Object mapResult = multiKeyMap . get ( anotherMultiKey ) ; \n     assertNotNull(mapResult);\n}", "oracle": "assertNotNull(mapResult);", "focalFile": "core/src/main/java/com/orientechnologies/common/util/OMultiKey.java", "focalName": "OMultiKey", "focalMethod": " public OMultiKey ( final Collection < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys ) ; \n hash = generateHashCode ( keys ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["fabric8io", "fabric8-maven-plugin", "enricher/api"], "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "className": "InitContainerHandlerTest", "testName": "simple", "testMethod": "@Test\n public void simple ( ) {\n     PodTemplateSpecBuilder builder = getPodTemplateBuilder ( ) ; \n     assertFalse(handler.hasInitContainer(builder,\"STR\"));\n}", "oracle": "assertFalse(handler.hasInitContainer(builder,\"STR\"));", "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/InitContainerHandler.java", "focalName": "hasInitContainer", "focalMethod": " public boolean hasInitContainer ( PodTemplateSpecBuilder builder , String name ) { \n return getInitContainer ( builder , name ) != null ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java", "className": "ProcessorConfigTest", "testName": "order", "testMethod": "@Test\n public void order ( ) {\n     List < TestNamed > data = Arrays . asList ( new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) ) ; \n     List < String > inc = Arrays . asList ( \"STR\" , \"STR\" ) ; \n     ProcessorConfig pConfig = new ProcessorConfig ( inc , null , null ) ; \n     List < TestNamed > result = pConfig . prepareProcessors ( data , \"STR\" ) ; \n     assertEquals(2,result.size());\n}", "oracle": "assertEquals(2,result.size());", "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java", "focalName": "prepareProcessors", "focalMethod": " public < T extends Named > List < T > prepareProcessors ( List < T > namedList , String type ) { \n List < T > ret = new ArrayList < > ( ) ; \n Map < String , T > lookup = new HashMap < > ( ) ; \n for ( T named : namedList ) { \n lookup . put ( named . getName ( ) , named ) ; \n } for ( String inc : includes ) { \n if ( use ( inc ) ) { \n T named = lookup . get ( inc ) ; \n if ( named == null ) { \n List < String > keys = new ArrayList < > ( lookup . keySet ( ) ) ; \n Collections . sort ( keys ) ; \n throw new IllegalArgumentException ( \"STR\" + type + \"STR\" + inc + \"STR\" + \"STR\" + type + \"STR\" + StringUtils . join ( keys , \"STR\" ) ) ; \n } ret . add ( named ) ; \n } } return ret ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/inner/utiltest/GlobalSwitchTest.java", "className": "GlobalSwitchTest", "testName": "testSystemSettings_takesEffect_before_defaultvalue", "testMethod": "@Test\n public void testSystemSettings_takesEffect_before_defaultvalue ( ) {\n     System . setProperty ( Configs . CONN_RECONNECT_SWITCH , \"STR\" ) ; \n     System . setProperty ( Configs . CONN_MONITOR_SWITCH , \"STR\" ) ; \n     client1 = new RpcClient ( ) ; \n     client2 = new RpcClient ( ) ; \n     Assert.assertTrue(client1.isConnectionMonitorSwitchOn());\n}", "oracle": "Assert.assertTrue(client1.isConnectionMonitorSwitchOn());", "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focalName": "isConnectionMonitorSwitchOn", "focalMethod": "@Override\n@Deprecated\n public boolean isConnectionMonitorSwitchOn ( ) { \n return option ( BoltClientOption . CONN_MONITOR_SWITCH ) ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["myabc", "markdownj", "core"], "classPath": "core/src/test/java/org/markdownj/test/EdgeCases.java", "className": "EdgeCases", "testName": "testNull", "testMethod": "@Test\n public void testNull ( ) {\n     assertEquals(\"STR\",m.markdown(null));\n}", "oracle": "assertEquals(\"STR\",m.markdown(null));", "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focalName": "markdown", "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } ", "commitid": "f8ed00caeb69fc602aa2209812d953c26c2a4263"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ScoreTest.java", "className": "ScoreTest", "testName": "testGetMin", "testMethod": "@Test\n public void testGetMin ( ) {\n     float expected = MIN ; \n     float actual = score . getMin ( ) ; \n     assertEquals(expected,actual,0);\n}", "oracle": "assertEquals(expected,actual,0);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java", "focalName": "getMin", "focalMethod": " public float getMin ( ) { \n return min ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/VerbTest.java", "className": "VerbTest", "testName": "testVerb", "testMethod": "@Test\n public void testVerb ( ) {\n     Verb verb = new Verb ( ) ; \n     assertNotNull(verb);\n}", "oracle": "assertNotNull(verb);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Verb.java", "focalName": "Verb", "focalMethod": " public Verb ( ) { \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactoryTest.java", "className": "HttpClientFactoryTest", "testName": "testNonProxiedHostRequest", "testMethod": "@Test\n public void testNonProxiedHostRequest ( ) throws Exception {\n     targetServer . stubFor ( get ( urlMatching ( \"STR\" ) ) . willReturn ( aResponse ( ) . withBody ( \"STR\" ) ) ) ; \n     proxyServer . stubFor ( get ( urlMatching ( \"STR\" ) ) . willReturn ( aResponse ( ) . withBody ( \"STR\" ) ) ) ; \n     Proxy proxy = new Proxy ( ) ; \n     proxy . setHost ( \"STR\" ) ; \n     proxy . setPort ( PROXY_PORT ) ; \n     proxy . setProtocol ( \"STR\" ) ; \n     proxy . setNonProxyHosts ( \"STR\" ) ; \n     HttpClient client = new HttpClientFactory ( TARGET_URL ) . proxy ( proxy ) . create ( ) ; \n     String body = EntityUtils . toString ( client . execute ( new HttpGet ( TARGET_URL ) ) . getEntity ( ) ) ; \n     Assert.assertEquals(\"STR\",body);\n}", "oracle": "Assert.assertEquals(\"STR\",body);", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactory.java", "focalName": "create", "focalMethod": " public HttpClient create ( ) { \n return hcb . setDefaultRequestConfig ( rcb . build ( ) ) . build ( ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "className": "CircleTest", "testName": "testGetEnvironment", "testMethod": "@Test\n public void testGetEnvironment ( ) {\n     Properties properties = new Circle ( env ( ) ) . getEnvironment ( ) ; \n     assertEquals(3,properties.size());\n}", "oracle": "assertEquals(3,properties.size());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Circle.java", "focalName": "getEnvironment", "focalMethod": "@Override\n public Properties getEnvironment ( ) { \n Properties environment = new Properties ( ) ; \n addProperty ( environment , \"STR\" , getProperty ( CIRCLE_BUILD_NUMBER ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( CIRCLE_BRANCH ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( CIRCLE_COMMIT ) ) ; \n return environment ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "className": "ACollectionHelperTest", "testName": "testExists", "testMethod": "@Test\n public void testExists ( ) {\n     final APredicateNoThrow < String > len1 = new APredicateNoThrow < String > ( ) { \n @Override\n public boolean apply ( String o ) { \n return o . length ( ) == 1 ; \n } } ; \n     assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));\n}", "oracle": "assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focalName": "exists", "focalMethod": " public static < T , E extends Throwable > boolean exists ( Iterable < T > coll , APredicate < ? super T , E > pred ) throws E { \n for ( T o : coll ) { \n if ( pred . apply ( o ) ) { \n return true ; \n } } return false ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "className": "PuzzleStateTest", "testName": "not_equal_to_state_with_different_puzzle", "testMethod": "@Test\n public void not_equal_to_state_with_different_puzzle ( ) {\n     PuzzleState a = new PuzzleState ( getSolvedPuzzle ( ) ) ; \n     PuzzleState b = new PuzzleState ( getPuzzle ( 2 ) ) ; \n     assertNotEquals(a,b);\n}", "oracle": "assertNotEquals(a,b);", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focalName": "PuzzleState", "focalMethod": " public PuzzleState ( Puzzle puzzle ) { \n this ( puzzle , new Stack < Direction > ( ) ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "className": "AttributeInjectorTest", "testName": "testGetSetLog", "testMethod": "@Test\n public void testGetSetLog ( ) throws Exception {\n     this . injector = new AttributeInjector ( ) ; \n     assertNotNull(this.injector.getLog());\n}", "oracle": "assertNotNull(this.injector.getLog());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/AttributeInjector.java", "focalName": "getLog", "focalMethod": " public Logger getLog ( ) { \n return log ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "className": "TSqlBuilderTest", "testName": "testWhere", "testMethod": "@Test\n public void testWhere ( ) {\n     sql . select ( ) . from ( \"STR\" ) . where ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}", "oracle": "assertEquals(\"STR\",sql.toString());", "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) ; \n", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "className": "TSqlBuilderTest", "testName": "testSelectSomeFrom", "testMethod": "@Test\n public void testSelectSomeFrom ( ) {\n     assertEquals(\"STR\",sql.select(\"STR\",\"STR\").from(\"STR\").toString());\n}", "oracle": "assertEquals(\"STR\",sql.select(\"STR\",\"STR\").from(\"STR\").toString());", "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) ; \n", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "className": "WorkerQueryTest", "testName": "noFilters", "testMethod": "@Test\n public void noFilters ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ; \n     List < WorkerData > result = new WorkerQuery ( ) . execute ( list ) ; \n     assertEquals(list,result);\n}", "oracle": "assertEquals(list,result);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java", "focalName": "execute", "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["Yubico", "yubico-java-client", "v2client"], "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "className": "YubicoClientTest", "testName": "testUnPrintableOTP", "testMethod": "@Test\n public void testUnPrintableOTP ( ) {\n     String otp = new String ( new byte [ ] { \n 0x01 , 0x02 , 0x03 , 0x04 , 0x05 , 0x06 } ) ; \n     assertFalse(YubicoClient.isValidOTPFormat(otp));\n}", "oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));", "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focalName": "isValidOTPFormat", "focalMethod": " public static boolean isValidOTPFormat ( String otp ) { \n if ( otp == null ) { \n return false ; \n } int len = otp . length ( ) ; \n for ( char c : otp . toCharArray ( ) ) { \n if ( c < 0x20 || c > 0x7E ) { \n return false ; \n } } return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN ; \n } ", "commitid": "e21fb672e290a118f7420daaf81ccb96d319d52c"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "crap", "testMethod": "@Test\n public void crap ( ) {\n     Word crap = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertFalse(crap.isRecognized());\n}", "oracle": "assertFalse(crap.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java", "className": "EnvFilterTest", "testName": "allows_overriding_mask", "testMethod": "@Test\n public void allows_overriding_mask ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Config config = createConfig ( ) ; \n     new EnvironmentVariablesConfigLoader ( env ) . load ( config ) ; \n     EnvFilter envFilter = new EnvFilter ( config ) ; \n     Map < String , String > expectedEnv = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     assertEquals(expectedEnv,envFilter.filter(env));\n}", "oracle": "assertEquals(expectedEnv,envFilter.filter(env));", "focalFile": "src/main/java/io/cucumber/pro/environment/EnvFilter.java", "focalName": "filter", "focalMethod": " public Map < String , String > filter ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( Map . Entry < String , String > entry : env . entrySet ( ) ) { \n if ( ! maskPattern . matcher ( entry . getKey ( ) ) . matches ( ) ) result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; \n } return result ; \n } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "className": "BasicIndexingTest", "testName": "testFilterMetadata", "testMethod": "@Test\n public void testFilterMetadata ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     final List vector = new ArrayList ( ) ; \n     vector . add ( \"STR\" ) ; \n     vector . add ( \"STR\" ) ; \n     config . put ( AbstractIndexerBolt . metadata2fieldParamName , vector ) ; \n     prepareIndexerBolt ( config ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertArrayEquals(\"STR\",newString[]{\"STR\",\"STR\",\"STR\"},newTreeSet<>(fields.keySet()).toArray());\n}", "oracle": "Assert.assertArrayEquals(\"STR\",newString[]{\"STR\",\"STR\",\"STR\"},newTreeSet<>(fields.keySet()).toArray());", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focalName": "setValue", "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "className": "MaxDepthFilterTest", "testName": "testCustomDepth", "testMethod": "@Test\n public void testCustomDepth ( ) throws MalformedURLException {\n     URLFilter filter = createFilter ( \"STR\" , 1 ) ; \n     URL url = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( MetadataTransfer . maxDepthKeyName , \"STR\" ) ; \n     metadata . setValue ( MetadataTransfer . depthKeyName , \"STR\" ) ; \n     String filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ; \n     Assert.assertEquals(url.toExternalForm(),filterResult);\n}", "oracle": "Assert.assertEquals(url.toExternalForm(),filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focalName": "filter", "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "external/warc"], "classPath": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "className": "WARCRecordFormatTest", "testName": "testGetDigestSha1TwoByteArrays", "testMethod": "@Test\n public void testGetDigestSha1TwoByteArrays ( ) {\n     byte [ ] content1 = { \n 'a' , 'b' , 'c' } ; \n     byte [ ] content2 = { \n 'd' , 'e' , 'f' } ; \n     String sha1str = \"STR\" ; \n     assertEquals(\"STR\",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));\n}", "oracle": "assertEquals(\"STR\",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));", "focalFile": "external/warc/src/main/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormat.java", "focalName": "getDigestSha1", "focalMethod": " public static String getDigestSha1 ( byte [ ] bytes1 , byte [ ] bytes2 ) { \n MessageDigest sha1 = DigestUtils . getSha1Digest ( ) ; \n sha1 . update ( bytes1 ) ; \n return \"STR\" + base32 . encodeAsString ( sha1 . digest ( bytes2 ) ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "className": "BasicURLNormalizerTest", "testName": "testAnchorFilterFalse", "testMethod": "@Test\n public void testAnchorFilterFalse ( ) throws MalformedURLException {\n     URLFilter allAllowed = createFilter ( false , false ) ; \n     URL url = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = allAllowed . filter ( url , metadata , url . toExternalForm ( ) ) ; \n     Assert.assertEquals(url.toExternalForm(),filterResult);\n}", "oracle": "Assert.assertEquals(url.toExternalForm(),filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focalName": "filter", "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "className": "BasicIndexingTest", "testName": "testRelativeCanonicalURL", "testMethod": "@Test\n public void testRelativeCanonicalURL ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     config . put ( AbstractIndexerBolt . canonicalMetadataParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focalName": "setValue", "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "className": "UrlUtilsTest", "testName": "testCreateValidUrl", "testMethod": "@Test\n public void testCreateValidUrl ( ) throws Exception {\n     assertEquals(\"STR\",UrlUtils.create(\"STR\").toURI().toASCIIString());\n}", "oracle": "assertEquals(\"STR\",UrlUtils.create(\"STR\").toURI().toASCIIString());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/UrlUtils.java", "focalName": "create", "focalMethod": " public static URL create ( final String url ) { \n try { \n return new URL ( url ) ; \n } catch ( MalformedURLException ex ) { \n throw new IllegalArgumentException ( ex ) ; \n } } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "className": "JmxAttributePollerTest", "testName": "testGetPolledObjects", "testMethod": "@Test\n public void testGetPolledObjects ( ) throws Exception {\n     assertEquals(this.polledObjects,this.poller.getPolledObjects());\n}", "oracle": "assertEquals(this.polledObjects,this.poller.getPolledObjects());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focalName": "getPolledObjects", "focalMethod": " public List < Object > getPolledObjects ( ) { \n return Collections . unmodifiableList ( polledObjects ) ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/concurrent/AThreadPoolTest.java", "className": "AThreadPoolTest", "testName": "testPrime", "testMethod": "@Test\n public void testPrime ( ) {\n     assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));\n}", "oracle": "assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/concurrent/AThreadPoolImpl.java", "focalName": "prime", "focalMethod": " static int prime ( int number , Set < Integer > exceptions ) { \n int numPrevPrimes = 0 ; \n for ( int candidate = 1 ; \n candidate < Integer . MAX_VALUE ; \n candidate ++ ) { \n if ( isPrime ( candidate ) && ! exceptions . contains ( candidate ) ) { \n if ( numPrevPrimes >= number ) { \n return candidate ; \n } numPrevPrimes += 1 ; \n } } return 1 ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "className": "DevUtilTest", "testName": "testParseNetworks", "testMethod": "@Test\n public void testParseNetworks ( ) {\n     String [ ] networkArray = new String [ ] { \n \"STR\" } ; \n     assertArrayEquals(networkArray,DevUtil.parseNetworks(\"STR\"));\n}", "oracle": "assertArrayEquals(networkArray,DevUtil.parseNetworks(\"STR\"));", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "parseNetworks", "focalMethod": " protected static String [ ] parseNetworks ( String dockerResult ) { \n if ( ! dockerResult . matches ( \"STR\" ) ) { \n return null ; \n } String networkMap = dockerResult . substring ( dockerResult . indexOf ( \"STR\" ) + 1 , dockerResult . indexOf ( \"STR\" ) ) ; \n String [ ] networkHex = networkMap . split ( \"STR\" ) ; \n String [ ] networks = new String [ networkHex . length ] ; \n for ( int i = 0 ; \n i < networkHex . length ; \n i ++ ) { \n networks [ i ] = networkHex [ i ] . split ( \"STR\" ) [ 0 ] ; \n } return networks ; \n } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "className": "OMatchStatementExecutionTest", "testName": "testTriangle2", "testMethod": "@Test\n public void testTriangle2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     List < ODocument > result = db . command ( new OCommandSQL ( query . toString ( ) ) ) . execute ( ) ; \n     assertEquals(1,result.size());\n}", "oracle": "assertEquals(1,result.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "className": "ODirtyManagerTest", "testName": "testLinkCollectionOther", "testMethod": "@Test\n public void testLinkCollectionOther ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     List < ODocument > lst = new ArrayList < ODocument > ( ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     lst . add ( doc1 ) ; \n     doc . field ( \"STR\" , lst ) ; \n     Set < ODocument > set = new HashSet < ODocument > ( ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     set . add ( doc2 ) ; \n     doc . field ( \"STR\" , set ) ; \n     ODocumentInternal . convertAllMultiValuesToTrackedVersions ( doc ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc1 ) ; \n     ODirtyManager manager2 = ORecordInternal . getDirtyManager ( doc2 ) ; \n     assertTrue(manager2.isSame(manager));\n}", "oracle": "assertTrue(manager2.isSame(manager));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java", "focalName": "isSame", "focalMethod": " public boolean isSame ( ODirtyManager other ) { \n return this . getReal ( ) == other . getReal ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java", "className": "TrackedSetTest", "testName": "testRemoveNotificationOne", "testMethod": "@Test\n public void testRemoveNotificationOne ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}", "oracle": "Assert.assertFalse(doc.isDirty());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focalName": "isDirty", "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/network/OLiveQueryRemoteTest.java", "className": "OLiveQueryRemoteTest", "testName": "testRidSelect", "testMethod": "@Test\n public void testRidSelect ( ) throws InterruptedException {\n     MyLiveQueryListener listener = new MyLiveQueryListener ( new CountDownLatch ( 1 ) ) ; \n     OVertex item = database . newVertex ( ) ; \n     item . save ( ) ; \n     OLiveQueryMonitor live = database . live ( \"STR\" + item . getIdentity ( ) , listener ) ; \n     item . setProperty ( \"STR\" , \"STR\" ) ; \n     item . save ( ) ; \n     Assert.assertTrue(listener.latch.await(10,TimeUnit.SECONDS));\n}", "oracle": "Assert.assertTrue(listener.latch.await(10,TimeUnit.SECONDS));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecord.java", "focalName": "save", "focalMethod": " < RET extends ORecord > RET save ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/document/RecursiveLinkedSaveTest.java", "className": "RecursiveLinkedSaveTest", "testName": "testTxLinked", "testMethod": "@Test\n public void testTxLinked ( ) {\n     db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     db . begin ( ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     ODocument doc1 = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , doc1 ) ; \n     ODocument doc2 = new ODocument ( \"STR\" ) ; \n     doc1 . field ( \"STR\" , doc2 ) ; \n     doc2 . field ( \"STR\" , doc ) ; \n     db . save ( doc ) ; \n     db . commit ( ) ; \n     assertEquals(3,db.countClass(\"STR\"));\n}", "oracle": "assertEquals(3,db.countClass(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocument.java", "focalName": "countClass", "focalMethod": " long countClass ( String iClassName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/util/SeqTest.java", "className": "SeqTest", "testName": "testFormatMap", "testMethod": "@Test\n public void testFormatMap ( ) {\n     String [ ] actuals = Seq . map ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) , \"STR\" ) . toArray ( new String [ 0 ] ) ; \n     Assert.assertArrayEquals(newString[]{\"STR\",\"STR\",\"STR\"},actuals);\n}", "oracle": "Assert.assertArrayEquals(newString[]{\"STR\",\"STR\",\"STR\"},actuals);", "focalFile": "src/main/java/me/zzp/util/Seq.java", "focalName": "map", "focalMethod": " public static List < String > map ( Collection < ? > from , String format ) { \n List < String > to = new ArrayList < > ( from . size ( ) ) ; \n for ( Object e : from ) { \n to . add ( String . format ( format , e ) ) ; \n } return to ; \n } ", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/util/SeqTest.java", "className": "SeqTest", "testName": "testCommaList", "testMethod": "@Test\n public void testCommaList ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));", "focalFile": "src/main/java/me/zzp/util/Seq.java", "focalName": "join", "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } ", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/framing/FramedataImpl1Test.java", "className": "FramedataImpl1Test", "testName": "testDefaultValues", "testMethod": "@Test\n public void testDefaultValues ( ) {\n     FramedataImpl1 binary = FramedataImpl1 . get ( Opcode . BINARY ) ; \n     assertEquals(\"STR\",Opcode.BINARY,binary.getOpcode());\n}", "oracle": "assertEquals(\"STR\",Opcode.BINARY,binary.getOpcode());", "focalFile": "src/main/java/org/java_websocket/framing/FramedataImpl1.java", "focalName": "getOpcode", "focalMethod": "@Override\n public Opcode getOpcode ( ) { \n return optcode ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "className": "ConfigTest", "testName": "has_yaml_representation", "testMethod": "@Test\n public void has_yaml_representation ( ) {\n     Config config = new Config ( ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     String expected = \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     assertEquals(expected,config.toYaml(\"STR\"));\n}", "oracle": "assertEquals(expected,config.toYaml(\"STR\"));", "focalFile": "src/main/java/io/cucumber/pro/config/Config.java", "focalName": "toYaml", "focalMethod": " public String toYaml ( String rootKey ) { \n try { \n StringBuilder out = new StringBuilder ( ) ; \n this . print ( 0 , rootKey , out ) ; \n return out . toString ( ) ; \n } catch ( IOException e ) { \n throw new RuntimeException ( e ) ; \n } } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["rockagen", "commons-lib", ""], "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "className": "CommUtilTest", "testName": "testSameChars", "testMethod": "@Test\n public void testSameChars ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));\n}", "oracle": "Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));", "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java", "focalName": "repeatChar", "focalMethod": " public static String repeatChar ( char cha , int len ) { \n len = len < 0 ? 0 : len ; \n char [ ] c = new char [ len ] ; \n for ( int i = 0 ; \n i < len ; \n i ++ ) c [ i ] = cha ; \n return new String ( c ) ; \n } ", "commitid": "f37141cf40be79d130db804c39ce61690541d5f1"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/rpc/RpcServerTest.java", "className": "RpcServerTest", "testName": "doTestRandomPortConstructor", "testMethod": "@Test\n public void doTestRandomPortConstructor ( ) {\n     RpcServer rpcServer = new RpcServer ( ) ; \n     rpcServer . startup ( ) ; \n     Assert.assertNotEquals(0,rpcServer.port());\n}", "oracle": "Assert.assertNotEquals(0,rpcServer.port());", "focalFile": "src/main/java/com/alipay/remoting/AbstractRemotingServer.java", "focalName": "port", "focalMethod": "@Override\n public int port ( ) { \n return port ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/AgentsFileTest.java", "className": "AgentsFileTest", "testName": "testLoad_emptyTag", "testMethod": "@Test\n public void testLoad_emptyTag ( ) {\n     writeText ( \"STR\" , agentsFile ) ; \n     registry = load ( agentsFile ) ; \n     assertEquals(1,registry.agentCount());\n}", "oracle": "assertEquals(1,registry.agentCount());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focalName": "agentCount", "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityTest.java", "className": "ActivityTest", "testName": "testSerialize", "testMethod": "@Test\n public void testSerialize ( ) {\n     String expected = \"STR\" ; \n     JsonElement actual = activity . serialize ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Activity.java", "focalName": "serialize", "focalMethod": " public JsonElement serialize ( ) { \n JsonObject obj = new JsonObject ( ) ; \n if ( this . id != null ) { \n obj . addProperty ( \"STR\" , this . id ) ; \n } if ( this . definition != null ) { \n obj . add ( \"STR\" , this . definition . serialize ( ) ) ; \n } return obj ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["NanoHttpd", "nanohttpd", "core"], "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java", "className": "GZipIntegrationTest", "testName": "fixedLengthContentIsEncodedProperly", "testMethod": "@Test\n public void fixedLengthContentIsEncodedProperly ( ) throws IOException {\n     testServer . response = Response . newFixedLengthResponse ( \"STR\" ) ; \n     HttpGet request = new HttpGet ( \"STR\" ) ; \n     request . addHeader ( \"STR\" , \"STR\" ) ; \n     HttpResponse response = new DecompressingHttpClient ( httpclient ) . execute ( request ) ; \n     assertEquals(\"STR\",EntityUtils.toString(response.getEntity()));\n}", "oracle": "assertEquals(\"STR\",EntityUtils.toString(response.getEntity()));", "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java", "focalName": "newFixedLengthResponse", "focalMethod": " public static Response newFixedLengthResponse ( String msg ) { \n return newFixedLengthResponse ( Status . OK , NanoHTTPD . MIME_HTML , msg ) ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["jribble", "Java-Websockify", ""], "classPath": "src/test/java/com/netiq/websockify/FlashPolicyHandlerTest.java", "className": "FlashPolicyHandlerTest", "testName": "testDecodeCustomResponse", "testMethod": "@Test\n public void testDecodeCustomResponse ( ) {\n     String XML = \"STR\" ; \n     ChannelBuffer policyResponse = ChannelBuffers . copiedBuffer ( XML , CharsetUtil . UTF_8 ) ; \n     embedder = new DecoderEmbedder < FlashPolicyRequest > ( new FlashPolicyHandler ( policyResponse ) ) ; \n     String request = \"STR\" ; \n     byte [ ] b = request . getBytes ( ) ; \n     ChannelBuffer buf = wrappedBuffer ( b ) ; \n     embedder . offer ( buf ) ; \n     Object first = embedder . poll ( ) ; \n     ChannelBuffer response = ( ChannelBuffer ) first ; \n     String resp = new String ( response . array ( ) , 0 , response . readableBytes ( ) ) ; \n     assertTrue(XML.equals(resp));\n}", "oracle": "assertTrue(XML.equals(resp));", "focalFile": "src/main/java/com/netiq/websockify/FlashPolicyHandler.java", "focalName": "FlashPolicyHandler", "focalMethod": " public FlashPolicyHandler ( ChannelBuffer policyResponse ) { \n super ( ) ; \n this . policyResponse = policyResponse ; \n } ", "commitid": "3aa62299b11023676dada7ec3b8214960c5dcce2"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/service/openshift/ImageStreamServiceTest.java", "className": "ImageStreamServiceTest", "testName": "should_return_newer_tag", "testMethod": "@Test\n public void should_return_newer_tag ( ) throws Exception {\n     ImageStreamService service = new ImageStreamService ( client , log ) ; \n     TagEvent oldTag = new TagEvent ( \"STR\" , null , null , null ) ; \n     TagEvent latestTag = new TagEvent ( \"STR\" , null , null , null ) ; \n     TagEvent resultedTag = service . newerTag ( oldTag , latestTag ) ; \n     Assert.assertEquals(latestTag,resultedTag);\n}", "oracle": "Assert.assertEquals(latestTag,resultedTag);", "focalFile": "core/src/main/java/io/fabric8/maven/core/service/openshift/ImageStreamService.java", "focalName": "newerTag", "focalMethod": " public TagEvent newerTag ( TagEvent tag1 , TagEvent tag2 ) { \n Date tag1Date = extractDate ( tag1 ) ; \n Date tag2Date = extractDate ( tag2 ) ; \n if ( tag1Date == null ) { \n return tag2 ; \n } if ( tag2Date == null ) { \n return tag1 ; \n } return tag1Date . compareTo ( tag2Date ) > 0 ? tag1 : tag2 ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["fluent", "fluent-logger-java", ""], "classPath": "src/test/java/org/fluentd/logger/TestBugfixes.java", "className": "TestBugfixes", "testName": "validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters", "testMethod": "@Test\n public void validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters ( ) {\n     System . setProperty ( Config . FLUENT_SENDER_CLASS , \"STR\" ) ; \n     FluentLogger logger = FluentLogger . getLogger ( \"STR\" ) ; \n     logger . log ( \"STR\" , Collections . < String , Object > emptyMap ( ) ) ; \n     logger . close ( ) ; \n     assertEquals(null,logger.sender);\n}", "oracle": "assertEquals(null,logger.sender);", "focalFile": "src/main/java/org/fluentd/logger/FluentLogger.java", "focalName": "close", "focalMethod": " public void close ( ) { \n if ( sender != null ) { \n sender . flush ( ) ; \n sender . close ( ) ; \n sender = null ; \n } factory . purgeLogger ( this ) ; \n } ", "commitid": "2e5fdf2dbed59cc5af88442ceae6cbe72f321060"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "className": "JMXRemoteUrlConnectionFactoryTest", "testName": "testGetSetConnectionFactoryDelegate", "testMethod": "@Test\n public void testGetSetConnectionFactoryDelegate ( ) throws Exception {\n     assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);\n}", "oracle": "assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);", "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactory.java", "focalName": "getConnectorFactoryDelegate", "focalMethod": " public JMXConnectorFactoryDelegate getConnectorFactoryDelegate ( ) { \n return connectorFactoryDelegate ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "className": "JMXJvmIdConnectionFactoryTest", "testName": "testGetSetAttacher", "testMethod": "@Test\n public void testGetSetAttacher ( ) {\n     assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);\n}", "oracle": "assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);", "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focalName": "getAttacher", "focalMethod": " public VirtualMachineAttacher getAttacher ( ) { \n return attacher ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "className": "JmxAttributePollerTest", "testName": "testGetStepAfterShutdown", "testMethod": "@Test\n public void testGetStepAfterShutdown ( ) throws Exception {\n     this . poller . shutdown ( ) ; \n     JmxAttributePoller . PollOneObjectSchedulerProcess process = this . poller . new PollOneObjectSchedulerProcess ( \"STR\" ) ; \n     assertNull(process.getNextStep());\n}", "oracle": "assertNull(process.getNextStep());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller$PollOneObjectSchedulerProcess.java", "focalName": "getNextStep", "focalMethod": "@Override\n public Step getNextStep ( ) { \n if ( done || shutdownInd ) { \n return null ; \n } Step result = new Step ( ) { \n @Override\n public void execute ( ) { \n try { \n pollOneObject ( target ) ; \n } catch ( Exception exc ) { \n failureException = exc ; \n } finally { \n done = true ; \n } } @Override\n public boolean isBlocking ( ) { \n return true ; \n } } ; \n return result ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "className": "ActivityDefinitionTest", "testName": "testActivityDefinitionHashMapOfStringStringHashMapOfStringString", "testMethod": "@Test\n public void testActivityDefinitionHashMapOfStringStringHashMapOfStringString ( ) {\n     HashMap < String , String > name = new HashMap < String , String > ( ) ; \n     HashMap < String , String > description = new HashMap < String , String > ( ) ; \n     name . put ( \"STR\" , \"STR\" ) ; \n     description . put ( \"STR\" , \"STR\" ) ; \n     ActivityDefinition ad = new ActivityDefinition ( name , description ) ; \n     assertNotNull(ad);\n}", "oracle": "assertNotNull(ad);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java", "focalName": "ActivityDefinition", "focalMethod": " public ActivityDefinition ( HashMap < String , String > name , HashMap < String , String > description ) { \n this . name = name ; \n this . description = description ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ResultTest.java", "className": "ResultTest", "testName": "testGetDuration", "testMethod": "@Test\n public void testGetDuration ( ) {\n     String expected = DURATION ; \n     String actual = result . getDuration ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Result.java", "focalName": "getDuration", "focalMethod": " public String getDuration ( ) { \n return duration ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "className": "AttachmentResultTest", "testName": "testGetXapiStatement", "testMethod": "@Test\n public void testGetXapiStatement ( ) {\n     AttachmentResult a = new AttachmentResult ( RESPONSE_MESSAGE , statements , attachments ) ; \n     assertNotNull(a);\n}", "oracle": "assertNotNull(a);", "focalFile": "src/main/java/gov/adlnet/xapi/util/AttachmentResult.java", "focalName": "AttachmentResult", "focalMethod": " public AttachmentResult ( String inputMessage , StatementResult inputStatements , Map < String , AttachmentAndType > inputAttachments ) { \n responseMessage = inputMessage ; \n statements = inputStatements ; \n attachments = inputAttachments ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["NanoHttpd", "nanohttpd", "core"], "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "className": "LoadKeyStoreTest", "testName": "loadNonExistentKeyStoreFromResources", "testMethod": "@Test\n public void loadNonExistentKeyStoreFromResources ( ) throws Exception {\n     String nonExistentPath = \"STR\" ; \n     InputStream resourceAsStream = this . getClass ( ) . getResourceAsStream ( nonExistentPath ) ; \n     assertNull(resourceAsStream);\n}", "oracle": "assertNull(resourceAsStream);", "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java", "focalName": "makeSSLSocketFactory", "focalMethod": " public static SSLServerSocketFactory makeSSLSocketFactory ( String keyAndTrustStoreClasspathPath , char [ ] passphrase ) throws IOException { \n try { \n KeyStore keystore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; \n InputStream keystoreStream = NanoHTTPD . class . getResourceAsStream ( keyAndTrustStoreClasspathPath ) ; \n if ( keystoreStream == null ) { \n throw new IOException ( \"STR\" + keyAndTrustStoreClasspathPath ) ; \n } keystore . load ( keystoreStream , passphrase ) ; \n KeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ; \n keyManagerFactory . init ( keystore , passphrase ) ; \n return makeSSLSocketFactory ( keystore , keyManagerFactory ) ; \n } catch ( Exception e ) { \n throw new IOException ( e . getMessage ( ) ) ; \n } } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "className": "BasicURLNormalizerTest", "testName": "testNonStandardPercentEncoding", "testMethod": "@Test\n public void testNonStandardPercentEncoding ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( false , false ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String inputURL = \"STR\" ; \n     String expectedURL = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , inputURL ) ; \n     assertEquals(\"STR\",expectedURL,normalizedUrl);\n}", "oracle": "assertEquals(\"STR\",expectedURL,normalizedUrl);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focalName": "filter", "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLScriptTest.java", "className": "OCommandExecutorSQLScriptTest", "testName": "testSleep", "testMethod": "@Test\n public void testSleep ( ) throws Exception {\n     long begin = System . currentTimeMillis ( ) ; \n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertTrue(System.currentTimeMillis()-begin>=500);\n}", "oracle": "Assert.assertTrue(System.currentTimeMillis()-begin>=500);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/metadata/RemoteMetadataReloadTest.java", "className": "RemoteMetadataReloadTest", "testName": "testStorageUpdate", "testMethod": "@Test\n public void testStorageUpdate ( ) throws InterruptedException {\n     database . command ( \"STR\" , Locale . GERMANY . getLanguage ( ) ) ; \n     assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());\n}", "oracle": "assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "get", "focalMethod": " Object get ( ATTRIBUTES iAttribute ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "className": "OScriptExecutionTest", "testName": "testReturnInIf", "testMethod": "@Test\n public void testReturnInIf ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     db . execute ( \"STR\" , script ) ; \n     OResultSet rs = db . query ( \"STR\" + className ) ; \n     Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));\n}", "oracle": "Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focalName": "getProperty", "focalMethod": " < T > T getProperty ( String name ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["open-korean-text", "open-korean-text", ""], "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "className": "OpenKoreanProcessorJavaTest", "testName": "testDetokenizer", "testMethod": "@Test\n public void testDetokenizer ( ) {\n     List < String > words = Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));\n}", "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));", "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java", "focalName": "detokenize", "focalMethod": " public static String detokenize ( List < String > tokens ) { \n return OpenKoreanTextProcessor . detokenize ( JavaConverters . asScalaBufferConverter ( tokens ) . asScala ( ) ) ; \n } ", "commitid": "95bf003beb3b357fcb16f94d4f595613cf7c5276"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/TestSuiteTest.java", "className": "TestSuiteTest", "testName": "getTestCase_null", "testMethod": "@Test\n public void getTestCase_null ( ) throws Exception {\n     TestSuite testSuite = new TestSuite ( \"STR\" ) ; \n     assertNull(testSuite.getTestCase(null));\n}", "oracle": "assertNull(testSuite.getTestCase(null));", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/TestSuite.java", "focalName": "getTestCase", "focalMethod": " public TestCase getTestCase ( String testCaseId ) { \n if ( testCaseId == null ) { \n return null ; \n } for ( TestCase testCase : testCaseList ) { \n if ( testCaseId . equals ( testCase . getId ( ) ) ) { \n return testCase ; \n } } return null ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/GitInfoTest.java", "className": "GitInfoTest", "testName": "testLoadProperties", "testMethod": "@Test\n public void testLoadProperties ( ) {\n     Properties properties = GitInfo . loadGitProperties ( GitInfo . GIT_INFO_FILE ) ; \n     assertNotNull(properties);\n}", "oracle": "assertNotNull(properties);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/GitInfo.java", "focalName": "loadGitProperties", "focalMethod": " static Properties loadGitProperties ( String fileName ) { \n Properties properties = new Properties ( ) ; \n InputStream inputStream = GitInfo . class . getClassLoader ( ) . getResourceAsStream ( fileName ) ; \n try { \n properties . load ( inputStream ) ; \n return properties ; \n } catch ( NullPointerException e ) { \n LOGGER . trace ( \"STR\" + fileName , e ) ; \n } catch ( Exception e ) { \n LOGGER . warn ( \"STR\" + fileName , e ) ; \n } finally { \n closeQuietly ( inputStream ) ; \n } return new UnknownGitProperties ( ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["myabc", "markdownj", "core"], "classPath": "core/src/test/java/org/markdownj/test/LineConventions.java", "className": "LineConventions", "testName": "testUnixLineConventions", "testMethod": "@Test\n public void testUnixLineConventions ( ) {\n     assertEquals(EXPECTED,m.markdown(\"STR\"));\n}", "oracle": "assertEquals(EXPECTED,m.markdown(\"STR\"));", "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focalName": "markdown", "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } ", "commitid": "f8ed00caeb69fc602aa2209812d953c26c2a4263"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "className": "CharsetfunctionsTest", "testName": "testAsciiBytes", "testMethod": "@Test\n public void testAsciiBytes ( ) {\n     Assert.assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(\"STR\"));\n}", "oracle": "Assert.assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(\"STR\"));", "focalFile": "src/main/java/org/java_websocket/util/Charsetfunctions.java", "focalName": "asciiBytes", "focalMethod": " public static byte [ ] asciiBytes ( String s ) { \n return s . getBytes ( StandardCharsets . US_ASCII ) ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "simtiem", "testMethod": "@Test\n public void simtiem ( ) {\n     Word simtiem = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(simtiem.isRecognized());\n}", "oracle": "assertTrue(simtiem.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest.java", "className": "ModeInfoTest", "testName": "testReadIntraMode", "testMethod": "@Test\n public void testReadIntraMode ( ) {\n     MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder ( new int [ ] { \n 91 , 30 , 32 , 116 , 93 } , new int [ ] { \n 1 , 1 , 1 , 1 , 0 } ) ; \n     DecodingContext c = new DecodingContext ( ) ; \n     int miCol = 2 ; \n     int miRow = 0 ; \n     int blSz = 3 ; \n     c . miTileStartCol = 0 ; \n     c . aboveModes = new int [ 16 ] ; \n     c . leftModes = new int [ 16 ] ; \n     c . leftModes [ 0 ] = 3 ; \n     Assert.assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));\n}", "oracle": "Assert.assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));", "focalFile": "src/main/java/org/jcodec/codecs/vpx/vp9/ModeInfo.java", "focalName": "readKfIntraMode", "focalMethod": " public int readKfIntraMode ( int miCol , int miRow , int blSz , VPXBooleanDecoder decoder , DecodingContext c ) { \n boolean availAbove = miRow > 0 ; \n boolean availLeft = miCol > c . getMiTileStartCol ( ) ; \n int [ ] aboveIntraModes = c . getAboveModes ( ) ; \n int [ ] leftIntraModes = c . getLeftModes ( ) ; \n int aboveMode ; \n int leftMode ; \n aboveMode = availAbove ? aboveIntraModes [ miCol ] : DC_PRED ; \n leftMode = availLeft ? leftIntraModes [ miRow % 8 ] : DC_PRED ; \n short [ ] [ ] [ ] probs = c . getKfYModeProbs ( ) ; \n int intraMode = decoder . readTree ( TREE_INTRA_MODE , probs [ aboveMode ] [ leftMode ] ) ; \n aboveIntraModes [ miCol ] = intraMode ; \n leftIntraModes [ miRow % 8 ] = intraMode ; \n return intraMode ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListMapTest.java", "className": "AListMapTest", "testName": "testKeysValues", "testMethod": "@Test\n public void testKeysValues ( ) {\n     final AListMap < String , Integer > map = AListMap . < String , Integer > empty ( ) . updated ( \"STR\" , 1 ) . updated ( \"STR\" , 2 ) . updated ( \"STR\" , 3 ) . updated ( \"STR\" , 4 ) ; \n     final ASet < String > keys = map . keys ( ) ; \n     assertEquals(4,keys.size());\n}", "oracle": "assertEquals(4,keys.size());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/ACollection.java", "focalName": "size", "focalMethod": " int size ( ) ; \n", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "className": "ConfigTest", "testName": "gets_and_sets_value", "testMethod": "@Test\n public void gets_and_sets_value ( ) {\n     Config config = new Config ( ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",config.getString(\"STR\"));\n}", "oracle": "assertEquals(\"STR\",config.getString(\"STR\"));", "focalFile": "src/main/java/io/cucumber/pro/config/Config.java", "focalName": "getString", "focalMethod": " public String getString ( String key ) { \n return getIn ( normalize ( key ) , false ) . getString ( ) ; \n } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplierTest.java", "className": "MetronomeSupplierTest", "testName": "testThreadCount", "testMethod": "@Test\n public void testThreadCount ( ) {\n     PropertyBinding propertyBinding = new PropertyBinding ( new TestCase ( \"STR\" ) . setProperty ( \"STR\" , \"STR\" ) ) ; \n     MetronomeSupplier supplier = new MetronomeSupplier ( \"STR\" , propertyBinding , 10 ) ; \n     Metronome m = supplier . get ( ) ; \n     assertEquals(SleepingMetronome.class,m.getClass());\n}", "oracle": "assertEquals(SleepingMetronome.class,m.getClass());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplier.java", "focalName": "get", "focalMethod": "@Override\n public Metronome get ( ) { \n if ( metronomeClass == EmptyMetronome . class ) { \n return EmptyMetronome . INSTANCE ; \n } try { \n Constructor < ? extends Metronome > constructor = metronomeClass . getConstructor ( Metronome . class ) ; \n return constructor . newInstance ( masterMetronome ) ; \n } catch ( Exception e ) { \n throw new RuntimeException ( e ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/NativeUtilsTest.java", "className": "NativeUtilsTest", "testName": "testGetPidStringOrNull", "testMethod": "@Test\n public void testGetPidStringOrNull ( ) {\n     Integer pid = getPidFromBeanString ( \"STR\" ) ; \n     assertNotNull(pid);\n}", "oracle": "assertNotNull(pid);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/NativeUtils.java", "focalName": "getPidFromBeanString", "focalMethod": " static Integer getPidFromBeanString ( String name ) { \n int indexOf = name . indexOf ( '@' ) ; \n if ( indexOf == - 1 ) { \n return null ; \n } String pidString = name . substring ( 0 , indexOf ) ; \n try { \n return Integer . parseInt ( pidString ) ; \n } catch ( NumberFormatException e ) { \n LOGGER . warn ( e ) ; \n return null ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "className": "MapUtilTest", "testName": "testMergeMaps", "testMethod": "@Test\n public void testMergeMaps ( ) {\n     Map < String , String > mapA = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     Map < String , String > mapB = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     Map < String , String > expectedA = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     Map < String , String > expectedB = createMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));\n}", "oracle": "assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/MapUtil.java", "focalName": "mergeMaps", "focalMethod": " public static < K , V > Map < K , V > mergeMaps ( Map < K , V > map1 , Map < K , V > map2 ) { \n Map < K , V > answer = new HashMap < > ( ) ; \n if ( map2 != null ) { \n answer . putAll ( map2 ) ; \n } if ( map1 != null ) { \n answer . putAll ( map1 ) ; \n } return answer ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java", "className": "ProfileUtilTest", "testName": "simple", "testMethod": "@Test\n public void simple ( ) throws IOException {\n     InputStream is = getClass ( ) . getResourceAsStream ( \"STR\" ) ; \n     assertNotNull(is);\n}", "oracle": "assertNotNull(is);", "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java", "focalName": "use", "focalMethod": " public boolean use ( String inc ) { \n return ! excludes . contains ( inc ) && includes . contains ( inc ) ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "className": "CASObjectArrayTest", "testName": "testCompareAndSetSingleItem", "testMethod": "@Test\n public void testCompareAndSetSingleItem ( ) {\n     final CASObjectArray < Integer > array = new CASObjectArray < > ( ) ; \n     Assert.assertEquals(0,array.add(1));\n}", "oracle": "Assert.assertEquals(0,array.add(1));", "focalFile": "core/src/main/java/com/orientechnologies/common/concur/collection/CASObjectArray.java", "focalName": "add", "focalMethod": " public int add ( T value ) { \n Objects . requireNonNull ( value ) ; \n while ( true ) { \n final int newIndex = size . get ( ) ; \n final int containerIndex = 31 - Integer . numberOfLeadingZeros ( newIndex + 1 ) ; \n final int containerSize = 1 << containerIndex ; \n final int indexInsideContainer = newIndex + 1 - containerSize ; \n AtomicReferenceArray < T > container = containers . get ( containerIndex ) ; \n if ( container == null ) { \n container = new AtomicReferenceArray < > ( containerSize ) ; \n if ( ! containers . compareAndSet ( containerIndex , null , container ) ) { \n container = containers . get ( containerIndex ) ; \n } } if ( container . compareAndSet ( indexInsideContainer , null , value ) ) { \n size . incrementAndGet ( ) ; \n return newIndex ; \n } } } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "className": "OMatchStatementExecutionNewTest", "testName": "testOrderByDesc", "testMethod": "@Test\n public void testOrderByDesc ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     String query = \"STR\" ; \n     OResultSet result = db . query ( query ) ; \n     Assert.assertTrue(result.hasNext());\n}", "oracle": "Assert.assertTrue(result.hasNext());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "hasNext", "focalMethod": "@Override\n boolean hasNext ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "className": "OCompositeKeyTest", "testName": "testEqualNull", "testMethod": "@Test\n public void testEqualNull ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     assertFalse(compositeKey.equals(null));\n}", "oracle": "assertFalse(compositeKey.equals(null));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focalName": "equals", "focalMethod": "@Override\n public boolean equals ( final Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n final OCompositeKey that = ( OCompositeKey ) o ; \n return keys . equals ( that . keys ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OSchemaSharedGlobalPropertyTest.java", "className": "OSchemaSharedGlobalPropertyTest", "testName": "testGlobalPropertyCreate", "testMethod": "@Test\n public void testGlobalPropertyCreate ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createGlobalProperty ( \"STR\" , OType . SHORT , 100 ) ; \n     OGlobalProperty prop = schema . getGlobalPropertyById ( 100 ) ; \n     assertEquals(prop.getName(),\"STR\");\n}", "oracle": "assertEquals(prop.getName(),\"STR\");", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OGlobalProperty.java", "focalName": "getName", "focalMethod": " String getName ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedMapTest.java", "className": "TrackedMapTest", "testName": "testRemoveTwo", "testMethod": "@Test\n public void testRemoveTwo ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     final OTrackedMap < String > map = new OTrackedMap < String > ( doc ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}", "oracle": "Assert.assertFalse(doc.isDirty());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focalName": "isDirty", "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/SaveLinkedTypeAnyTest.java", "className": "SaveLinkedTypeAnyTest", "testName": "testAlterRemoveLinkedType", "testMethod": "@Test\n public void testAlterRemoveLinkedType ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass classA = schema . createClass ( \"STR\" ) ; \n     OProperty prop = classA . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . ANY ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     Assert.assertNotNull(result);\n}", "oracle": "Assert.assertNotNull(result);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "query", "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "className": "ODatabaseDocumentTxTest", "testName": "testDocFromJsonEmbedded", "testMethod": "@Test\n public void testDocFromJsonEmbedded ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass c0 = schema . createClass ( \"STR\" ) ; \n     OClass c1 = schema . createClass ( \"STR\" ) ; \n     c1 . createProperty ( \"STR\" , OType . STRING ) ; \n     c1 . createProperty ( \"STR\" , OType . EMBEDDED , c0 ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . fromJSON ( \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ; \n     db . save ( doc ) ; \n     List < ODocument > result = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     Assert.assertEquals(result.size(),0);\n}", "oracle": "Assert.assertEquals(result.size(),0);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focalName": "query", "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "className": "OMatchStatementExecutionTest", "testName": "testFriendsOfFriends", "testMethod": "@Test\n public void testFriendsOfFriends ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}", "oracle": "assertEquals(1,qResult.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/test/server/network/http/HttpIndexTest.java", "className": "HttpIndexTest", "testName": "updateKey", "testMethod": "@Test\n public void updateKey ( ) throws IOException {\n     put ( \"STR\" + getDatabaseName ( ) + \"STR\" ) . payload ( \"STR\" , CONTENT . JSON ) . exec ( ) ; \n     Assert.assertEquals(getResponse().getStatusLine().getStatusCode(),201);\n}", "oracle": "Assert.assertEquals(getResponse().getStatusLine().getStatusCode(),201);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focalName": "getVersion", "focalMethod": " public int getVersion ( ) { \n return _recordVersion ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["Yubico", "yubico-java-client", "v2client"], "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "className": "YubicoClientTest", "testName": "testReplayedOTP", "testMethod": "@Test\n public void testReplayedOTP ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertNotNull(response);\n}", "oracle": "assertNotNull(response);", "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focalName": "verify", "focalMethod": " public abstract VerificationResponse verify ( String otp ) throws YubicoVerificationException , YubicoValidationFailure ; \n", "commitid": "e21fb672e290a118f7420daaf81ccb96d319d52c"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/MultiTurtlePanelTest.java", "className": "MultiTurtlePanelTest", "testName": "testAddTurtle", "testMethod": "@Test\n public void testAddTurtle ( ) throws Exception {\n     JUnitUtils . assumeNotHeadless ( ) ; \n     MultiTurtleWindow panel = new MultiTurtleWindow ( ) ; \n     panel . addTurtle ( new Turtle ( ) ) ; \n     assertEquals(1,panel.getTurtleCount());\n}", "oracle": "assertEquals(1,panel.getTurtleCount());", "focalFile": "src/main/java/org/teachingextensions/WindowUtils/MultiTurtleWindow.java", "focalName": "getTurtleCount", "focalMethod": " public int getTurtleCount ( ) { \n return this . turtles . size ( ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "className": "DevUtilPrepareDockerfileTest", "testName": "testDisableOpenJ9SCC_mixedcase", "testMethod": "@Test\n public void testDisableOpenJ9SCC_mixedcase ( ) throws Exception {\n     List < String > dockerfileLines = new ArrayList < String > ( ) ; \n     List < String > expectedDockerfileLines = new ArrayList < String > ( ) ; \n     dockerfileLines . add ( \"STR\" ) ; \n     dockerfileLines . add ( \"STR\" ) ; \n     util . disableOpenJ9SCC ( dockerfileLines ) ; \n     expectedDockerfileLines . add ( \"STR\" ) ; \n     expectedDockerfileLines . add ( \"STR\" ) ; \n     expectedDockerfileLines . add ( \"STR\" ) ; \n     assertEquals(expectedDockerfileLines,dockerfileLines);\n}", "oracle": "assertEquals(expectedDockerfileLines,dockerfileLines);", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "disableOpenJ9SCC", "focalMethod": " protected void disableOpenJ9SCC ( List < String > dockerfileLines ) { \n final String RUN_CONFIGURE_COMMAND_LOWERCASE = \"STR\" ; \n for ( int i = 0 ; \n i < dockerfileLines . size ( ) ; \n i ++ ) { \n String line = dockerfileLines . get ( i ) ; \n if ( line . toLowerCase ( ) . equals ( RUN_CONFIGURE_COMMAND_LOWERCASE ) ) { \n debug ( \"STR\" ) ; \n dockerfileLines . add ( i , \"STR\" ) ; \n return ; \n } } } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "className": "MkvBlockTest", "testName": "testXiph", "testMethod": "@Test\n public void testXiph ( ) {\n     int [ ] _in = new int [ ] { \n 187 , 630 , 255 , 60 , 0xFFFFFF } ; \n     byte [ ] expecteds = new byte [ ] { \n ( byte ) 187 , ( byte ) 255 , ( byte ) 255 , 120 , ( byte ) 255 , 0 , 60 } ; \n     assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));\n}", "oracle": "assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));", "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java", "focalName": "muxXiphLacing", "focalMethod": " public static byte [ ] muxXiphLacing ( int [ ] laceSizes ) { \n ByteArrayList bytes = ByteArrayList . createByteArrayList ( ) ; \n for ( int i = 0 ; \n i < laceSizes . length - 1 ; \n i ++ ) { \n long laceSize = laceSizes [ i ] ; \n while ( laceSize >= 255 ) { \n bytes . add ( ( byte ) 255 ) ; \n laceSize -= 255 ; \n } bytes . add ( ( byte ) laceSize ) ; \n } return bytes . toArray ( ) ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/containers/mp4/boxes/SegmentTypeBoxTest.java", "className": "SegmentTypeBoxTest", "testName": "testParse", "testMethod": "@Test\n public void testParse ( ) throws Exception {\n     ByteBuffer buf = ByteBuffer . allocate ( 0x18 + 8 ) ; \n     buf . putInt ( 0x18 ) ; \n     buf . put ( \"STR\" . getBytes ( ) ) ; \n     buf . putInt ( 0 ) ; \n     buf . put ( \"STR\" . getBytes ( ) ) ; \n     buf . putInt ( 8 ) ; \n     buf . put ( \"STR\" . getBytes ( ) ) ; \n     buf . clear ( ) ; \n     SeekableByteChannel input = ByteBufferSeekableByteChannel . readFromByteBuffer ( buf ) ; \n     List < Atom > rootAtoms = MP4Util . getRootAtoms ( input ) ; \n     assertEquals(2,rootAtoms.size());\n}", "oracle": "assertEquals(2,rootAtoms.size());", "focalFile": "src/main/java/org/jcodec/containers/mp4/MP4Util.java", "focalName": "getRootAtoms", "focalMethod": " public static List < Atom > getRootAtoms ( SeekableByteChannel input ) throws IOException { \n input . setPosition ( 0 ) ; \n List < Atom > result = new ArrayList < Atom > ( ) ; \n long off = 0 ; \n Header atom ; \n while ( off < input . size ( ) ) { \n input . setPosition ( off ) ; \n atom = Header . read ( NIOUtils . fetchFromChannel ( input , 16 ) ) ; \n if ( atom == null ) break ; \n result . add ( new Atom ( atom , off ) ) ; \n off += atom . getSize ( ) ; \n } return result ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "className": "MPEGESTest", "testName": "testESBuffer", "testMethod": "@Test\n public void testESBuffer ( ) throws IOException {\n     byte [ ] mpeg = MPEGTestConst . mpeg ( ) ; \n     byte [ ] frame1 = MPEGTestConst . toBB ( new int [ ] [ ] { \n MPEGTestConst . _mpegHeader , MPEGTestConst . _mpegFrame } ) ; \n     byte [ ] frame2 = MPEGTestConst . toBB ( new int [ ] [ ] { \n MPEGTestConst . _mpegFrame } ) ; \n     MPEGES mpeges = new MPEGES ( Channels . newChannel ( new ByteArrayInputStream ( mpeg ) ) , 32 ) ; \n     Packet f1 = mpeges . getFrame ( ) ; \n     assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));\n}", "oracle": "assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));", "focalFile": "src/main/java/org/jcodec/common/io/NIOUtils.java", "focalName": "toArray", "focalMethod": " public static byte [ ] toArray ( ByteBuffer buffer ) { \n byte [ ] result = new byte [ buffer . remaining ( ) ] ; \n buffer . duplicate ( ) . get ( result ) ; \n return result ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ContextTest.java", "className": "ContextTest", "testName": "testSetInstructor", "testMethod": "@Test\n public void testSetInstructor ( ) {\n     Agent expected = new Agent ( \"STR\" , \"STR\" ) ; \n     Context c = new Context ( ) ; \n     c . setInstructor ( expected ) ; \n     Actor actual = c . getInstructor ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Context.java", "focalName": "getInstructor", "focalMethod": " public Actor getInstructor ( ) { \n return instructor ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "izskanjas", "testMethod": "@Test\n public void izskanjas ( ) {\n     loc\u012bt\u0101js . enableGuessing = true ; \n     loc\u012bt\u0101js . enableVocative = false ; \n     loc\u012bt\u0101js . guessVerbs = true ; \n     loc\u012bt\u0101js . enableAllGuesses = true ; \n     Word austrumlatvija = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(austrumlatvija.isRecognized());\n}", "oracle": "assertTrue(austrumlatvija.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/rpc/userprocessor/UserProcessorRegisterHelperTest.java", "className": "UserProcessorRegisterHelperTest", "testName": "testRegisterMultiInterestUserProcessor", "testMethod": "@Test\n public void testRegisterMultiInterestUserProcessor ( ) {\n     UserProcessor multiInterestUserProcessor = new SimpleServerMultiInterestUserProcessor ( ) ; \n     UserProcessorRegisterHelper . registerUserProcessor ( multiInterestUserProcessor , userProcessors ) ; \n     Assert.assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());\n}", "oracle": "Assert.assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());", "focalFile": "src/main/java/com/alipay/remoting/rpc/protocol/UserProcessorRegisterHelper.java", "focalName": "registerUserProcessor", "focalMethod": " public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { \n if ( null == processor ) { \n throw new RuntimeException ( \"STR\" ) ; \n } if ( processor instanceof MultiInterestUserProcessor ) { \n registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; \n } else { \n if ( StringUtils . isBlank ( processor . interest ( ) ) ) { \n throw new RuntimeException ( \"STR\" ) ; \n } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; \n if ( preProcessor != null ) { \n String errMsg = \"STR\" + processor . interest ( ) + \"STR\" ; \n throw new RuntimeException ( errMsg ) ; \n } } } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "className": "RpcConnectionManagerTest", "testName": "testAdd", "testMethod": "@Test\n public void testAdd ( ) {\n     Connection conn = getAConn ( ) ; \n     cm . add ( conn ) ; \n     Assert.assertEquals(1,cm.count(poolKey));\n}", "oracle": "Assert.assertEquals(1,cm.count(poolKey));", "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focalName": "count", "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["basis-technology-corp", "tcl-regex-java", ""], "classPath": "src/test/java/apitests/MatcherTest.java", "className": "MatcherTest", "testName": "lookingAtPrefix", "testMethod": "@Test\n public void lookingAtPrefix ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.lookingAt());\n}", "oracle": "assertTrue(matcher.lookingAt());", "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java", "focalName": "lookingAt", "focalMethod": " boolean lookingAt ( ) ; \n", "commitid": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "className": "StringUtilsTest", "testName": "testIsEmptyNonZero", "testMethod": "@Test\n public void testIsEmptyNonZero ( ) throws Exception {\n     assertFalse(StringUtils.isNonZero(\"STR\"));\n}", "oracle": "assertFalse(StringUtils.isNonZero(\"STR\"));", "focalFile": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focalName": "isNonZero", "focalMethod": " public static boolean isNonZero ( String string ) { \n return string != null && 0 < string . trim ( ) . length ( ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "className": "PuzzleStateTest", "testName": "actual_cost_is_actual_steps", "testMethod": "@Test\n public void actual_cost_is_actual_steps ( ) {\n     Stack < PuzzleState . Direction > history = new Stack < > ( ) ; \n     history . add ( PuzzleState . Direction . Right ) ; \n     history . add ( PuzzleState . Direction . Right ) ; \n     PuzzleState s = new PuzzleState ( getSolvedPuzzle ( ) , history ) ; \n     assertEquals(2,s.getActualCost());\n}", "oracle": "assertEquals(2,s.getActualCost());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focalName": "getActualCost", "focalMethod": " public int getActualCost ( ) { \n return this . history . size ( ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClusterStatementExecutionTest.java", "className": "OCreateClusterStatementExecutionTest", "testName": "testBlob", "testMethod": "@Test\n public void testBlob ( ) {\n     String clusterName = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + clusterName ) ; \n     Assert.assertTrue(db.getClusterIdByName(clusterName)>0);\n}", "oracle": "Assert.assertTrue(db.getClusterIdByName(clusterName)>0);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "getClusterIdByName", "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java", "className": "OClassImplTest", "testName": "testCreatePropertyIdKeep", "testMethod": "@Test\n public void testCreatePropertyIdKeep ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     OProperty prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     Integer id = prop . getId ( ) ; \n     oClass . dropProperty ( \"STR\" ) ; \n     prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     assertEquals(id,prop.getId());\n}", "oracle": "assertEquals(id,prop.getId());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focalName": "getId", "focalMethod": " public Integer getId ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "className": "LuceneSpatialMiscFunctionsTest", "testName": "testStEqualsPoint", "testMethod": "@Test\n public void testStEqualsPoint ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     Assert.assertEquals(next.field(\"STR\"),true);\n}", "oracle": "Assert.assertEquals(next.field(\"STR\"),true);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "field", "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java", "className": "OETLFieldTransformerTest", "testName": "testToLowerCase", "testMethod": "@Test\n public void testToLowerCase ( ) {\n     configure ( \"STR\" ) ; \n     proc . execute ( ) ; \n     assertEquals(1,getResult().size());\n}", "oracle": "assertEquals(1,getResult().size());", "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focalName": "execute", "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "className": "ODatabaseDocumentTxTest", "testName": "testCreateEdgeClass", "testMethod": "@Test\n public void testCreateEdgeClass ( ) {\n     OClass clazz = db . createEdgeClass ( \"STR\" ) ; \n     Assert.assertNotNull(clazz);\n}", "oracle": "Assert.assertNotNull(clazz);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocument.java", "focalName": "createEdgeClass", "focalMethod": " default OClass createEdgeClass ( String className ) { \n return createClass ( className , \"STR\" ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java", "className": "OPropertyListIndexDefinitionTest", "testName": "testCreateValueWrongParameterArrayParams", "testMethod": "@Test\n public void testCreateValueWrongParameterArrayParams ( ) {\n     Assert.assertNull(propertyIndex.createValue(\"STR\"));\n}", "oracle": "Assert.assertNull(propertyIndex.createValue(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java", "focalName": "createValue", "focalMethod": "@Override\n public Object createValue ( final Object ... params ) { \n Object param = params [ 0 ] ; \n if ( ! ( param instanceof Collection ) ) { \n try { \n return OType . convert ( param , keyType . getDefaultJavaType ( ) ) ; \n } catch ( Exception e ) { \n return null ; \n } } final Collection < ? > multiValueCollection = ( Collection < ? > ) param ; \n final List < Object > values = new ArrayList < > ( multiValueCollection . size ( ) ) ; \n for ( final Object item : multiValueCollection ) { \n values . add ( createSingleValue ( item ) ) ; \n } return values ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["NanoHttpd", "nanohttpd", "nanolets"], "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "className": "TestNanolets", "testName": "testRoutePrioritizerRemoveRouteNoRouteMatches", "testMethod": "@Test\n public void testRoutePrioritizerRemoveRouteNoRouteMatches ( ) {\n     DefaultRoutePrioritizer prioritizer = new DefaultRoutePrioritizer ( ) ; \n     prioritizer . addRoute ( \"STR\" , 100 , NotImplementedHandler . class ) ; \n     prioritizer . removeRoute ( \"STR\" ) ; \n     Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());\n}", "oracle": "Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());", "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD$BaseRoutePrioritizer.java", "focalName": "getPrioritizedRoutes", "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["NanoHttpd", "nanohttpd", "nanolets"], "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "className": "TestNanolets", "testName": "testBaseRoutePrioritizerAddNullRoute", "testMethod": "@Test\n public void testBaseRoutePrioritizerAddNullRoute ( ) {\n     DefaultRoutePrioritizer routePrioritizer = new DefaultRoutePrioritizer ( ) ; \n     routePrioritizer . addRoute ( null , 100 , null ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}", "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());", "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD$BaseRoutePrioritizer.java", "focalName": "getPrioritizedRoutes", "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["Yubico", "yubico-java-client", "v2client"], "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "className": "YubicoClientTest", "testName": "testBadOTP", "testMethod": "@Test\n public void testBadOTP ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertNotNull(response);\n}", "oracle": "assertNotNull(response);", "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focalName": "verify", "focalMethod": " public abstract VerificationResponse verify ( String otp ) throws YubicoVerificationException , YubicoValidationFailure ; \n", "commitid": "e21fb672e290a118f7420daaf81ccb96d319d52c"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/util/SeqTest.java", "className": "SeqTest", "testName": "testJoinListEmpty", "testMethod": "@Test\n public void testJoinListEmpty ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(Collections.EMPTY_LIST,\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",Seq.join(Collections.EMPTY_LIST,\"STR\"));", "focalFile": "src/main/java/me/zzp/util/Seq.java", "focalName": "join", "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } ", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "className": "ActivityStateTest", "testName": "testSetAgent", "testMethod": "@Test\n public void testSetAgent ( ) {\n     Agent expected = new Agent ( ) ; \n     expected . setMbox ( \"STR\" ) ; \n     activityState . setAgent ( expected ) ; \n     Agent actual = activityState . getAgent ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focalName": "getAgent", "focalMethod": " public Agent getAgent ( ) { \n return this . agent ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/VerbTest.java", "className": "VerbTest", "testName": "testSetDisplay", "testMethod": "@Test\n public void testSetDisplay ( ) {\n     HashMap < String , String > expected = new HashMap < String , String > ( ) ; \n     expected . put ( \"STR\" , \"STR\" ) ; \n     verb . setDisplay ( expected ) ; \n     HashMap < String , String > actual = verb . getDisplay ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Verb.java", "focalName": "getDisplay", "focalMethod": " public HashMap < String , String > getDisplay ( ) { \n return display ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "className": "AttachmentResultTest", "testName": "testSetAttachments", "testMethod": "@Test\n public void testSetAttachments ( ) throws UnsupportedEncodingException {\n     AttachmentResult a = new AttachmentResult ( RESPONSE_MESSAGE , statements , attachments ) ; \n     assertNotNull(a);\n}", "oracle": "assertNotNull(a);", "focalFile": "src/main/java/gov/adlnet/xapi/util/AttachmentResult.java", "focalName": "AttachmentResult", "focalMethod": " public AttachmentResult ( String inputMessage , StatementResult inputStatements , Map < String , AttachmentAndType > inputAttachments ) { \n responseMessage = inputMessage ; \n statements = inputStatements ; \n attachments = inputAttachments ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["AlejandroRivera", "embedded-rabbitmq", ""], "classPath": "src/test/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactoryTest.java", "className": "ExtractorFactoryTest", "testName": "withCaching", "testMethod": "@Test\n public void withCaching ( ) throws Exception {\n     builder . useCachedDownload ( true ) ; \n     Extractor extractor = new ExtractorFactory ( builder . build ( ) ) . getNewInstance ( ) ; \n     assertTrue(extractor.getClass().equals(CachedExtractor.class));\n}", "oracle": "assertTrue(extractor.getClass().equals(CachedExtractor.class));", "focalFile": "src/main/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactory.java", "focalName": "getNewInstance", "focalMethod": " public Extractor getNewInstance ( ) { \n Extractor extractor = new BasicExtractor ( config ) ; \n if ( config . shouldCachedDownload ( ) ) { \n extractor = new CachedExtractor ( extractor , config ) ; \n } return extractor ; \n } ", "commitid": "79615bf3e8e738ba756ebb44e6bf456610de4520"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "className": "ACollectionHelperTest", "testName": "testGroupByEquals", "testMethod": "@Test\n public void testGroupByEquals ( ) {\n     final AFunction1NoThrow < String , Integer > len = new AFunction1NoThrow < String , Integer > ( ) { \n @Override\n public Integer apply ( String param ) { \n return param . length ( ) ; \n } } ; \n     final Map < Integer , List < String > > grouped = ACollectionHelper . groupBy ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) , len ) ; \n     assertEquals(3,grouped.size());\n}", "oracle": "assertEquals(3,grouped.size());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focalName": "groupBy", "focalMethod": " public static < T , X , E extends Throwable > Map < X , List < T > > groupBy ( List < T > coll , AFunction1 < ? super T , ? extends X , E > f ) throws E { \n final Map < X , List < T > > result = new HashMap < > ( ) ; \n for ( T o : coll ) { \n final X key = f . apply ( o ) ; \n List < T > perKey = result . get ( key ) ; \n if ( perKey == null ) { \n perKey = createEmptyListOfType ( coll , false ) ; \n result . put ( key , perKey ) ; \n } perKey . add ( o ) ; \n } return result ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "className": "ACollectionHelperTest", "testName": "testMkStringSeparator", "testMethod": "@Test\n public void testMkStringSeparator ( ) {\n     assertEquals(\"STR\",ACollectionHelper.mkString(Arrays.asList(),\"STR\"));\n}", "oracle": "assertEquals(\"STR\",ACollectionHelper.mkString(Arrays.asList(),\"STR\"));", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focalName": "mkString", "focalMethod": " public static String mkString ( Iterable < ? > iterable , String separator ) { \n return mkString ( iterable , \"STR\" , separator , \"STR\" ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "jaundzimu\u0161\u0101kais", "testMethod": "@Test\n public void jaundzimu\u0161\u0101kais ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}", "oracle": "assertTrue(w.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotationFilterTest.java", "className": "AnnotationFilterTest", "testName": "testGlobalVerifyFilter", "testMethod": "@Test\n public void testGlobalVerifyFilter ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Verify . class ) . withVoidReturnType ( ) . withFilter ( new VerifyFilter ( true ) ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}", "oracle": "assertEquals(\"STR\",method.getName());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java", "focalName": "find", "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "className": "PerformanceStatsCollectorTest", "testName": "testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold", "testMethod": "@Test\n public void testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold ( ) throws Exception {\n     SimulatorAddress worker = workerAddress ( 3 , 1 ) ; \n     Map < String , PerformanceStats > performanceStats = new HashMap < String , PerformanceStats > ( ) ; \n     performanceStats . put ( TEST_CASE_ID_1 , new PerformanceStats ( 800 , 100 , 300 , SECONDS . toNanos ( 3 ) , MICROSECONDS . toNanos ( 2400 ) , MICROSECONDS . toNanos ( 2500 ) ) ) ; \n     performanceStatsCollector . update ( worker , performanceStats ) ; \n     String performance = performanceStatsCollector . formatIntervalPerformanceNumbers ( TEST_CASE_ID_1 ) ; \n     assertTrue(performance.contains(\"STR\"));\n}", "oracle": "assertTrue(performance.contains(\"STR\"));", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollector.java", "focalName": "formatIntervalPerformanceNumbers", "focalMethod": " public String formatIntervalPerformanceNumbers ( String testId ) { \n PerformanceStats latest = get ( testId , false ) ; \n if ( latest . isEmpty ( ) || latest . getOperationCount ( ) < 1 ) { \n return \"STR\" ; \n } String latencyUnit = \"STR\" ; \n long latencyAvg = NANOSECONDS . toMicros ( round ( latest . getIntervalLatencyAvgNanos ( ) ) ) ; \n long latency999Percentile = NANOSECONDS . toMicros ( latest . getIntervalLatency999PercentileNanos ( ) ) ; \n long latencyMax = NANOSECONDS . toMicros ( latest . getIntervalLatencyMaxNanos ( ) ) ; \n if ( latencyAvg > DISPLAY_LATENCY_AS_MICROS_MAX_VALUE ) { \n latencyUnit = \"STR\" ; \n latencyAvg = MICROSECONDS . toMillis ( latencyAvg ) ; \n latency999Percentile = MICROSECONDS . toMillis ( latency999Percentile ) ; \n latencyMax = MICROSECONDS . toMillis ( latencyMax ) ; \n } return format ( \"STR\" , formatLong ( latest . getOperationCount ( ) , OPERATION_COUNT_FORMAT_LENGTH ) , formatDouble ( latest . getIntervalThroughput ( ) , THROUGHPUT_FORMAT_LENGTH ) , formatLong ( latencyAvg , LATENCY_FORMAT_LENGTH ) , latencyUnit , formatLong ( latency999Percentile , LATENCY_FORMAT_LENGTH ) , latencyUnit , INTERVAL_LATENCY_PERCENTILE , formatLong ( latencyMax , LATENCY_FORMAT_LENGTH ) , latencyUnit ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/CommonUtils_SleepTest.java", "className": "CommonUtils_SleepTest", "testName": "testSleepTimeUnit", "testMethod": "@Test\n public void testSleepTimeUnit ( ) {\n     long started = System . nanoTime ( ) ; \n     sleepTimeUnit ( MILLISECONDS , 1 ) ; \n     long duration = NANOSECONDS . toMillis ( System . nanoTime ( ) - started ) ; \n     long durationLimit = SECONDS . toMillis ( 3 ) ; \n     assertTrue(format(\"STR\",duration),duration>0);\n}", "oracle": "assertTrue(format(\"STR\",duration),duration>0);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CommonUtils.java", "focalName": "sleepTimeUnit", "focalMethod": " public static void sleepTimeUnit ( TimeUnit timeUnit , long timeout ) { \n try { \n timeUnit . sleep ( timeout ) ; \n } catch ( InterruptedException e ) { \n ignore ( e ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java", "className": "EbmlSintTest", "testName": "testNegativeVals", "testMethod": "@Test\n public void testNegativeVals ( ) throws Exception {\n     Assert.assertEquals(1,ebmlSignedLength(-3));\n}", "oracle": "Assert.assertEquals(1,ebmlSignedLength(-3));", "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/EbmlSint.java", "focalName": "ebmlSignedLength", "focalMethod": " public static int ebmlSignedLength ( long val ) { \n if ( val <= 0x40 && val >= ( - 0x3F ) ) { \n return 1 ; \n } else if ( val <= 0x2000 && val >= ( - 0x1FFF ) ) { \n return 2 ; \n } else if ( val <= 0x100000 && val >= ( - 0x0FFFFF ) ) { \n return 3 ; \n } else if ( val <= 0x8000000 && val >= ( - 0x07FFFFFF ) ) { \n return 4 ; \n } else if ( val <= 0x400000000L && val >= - 0x03FFFFFFFFL ) { \n return 5 ; \n } else if ( val <= 0x20000000000L && val >= - 0x01FFFFFFFFFFL ) { \n return 6 ; \n } else if ( val <= 0x1000000000000L && val >= - 0x00FFFFFFFFFFFFL ) { \n return 7 ; \n } else { \n return 8 ; \n } } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["fabric8io", "fabric8-maven-plugin", "enricher/api"], "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "className": "InitContainerHandlerTest", "testName": "removeOne", "testMethod": "@Test\n public void removeOne ( ) {\n     PodTemplateSpecBuilder builder = getPodTemplateBuilder ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertTrue(handler.hasInitContainer(builder,\"STR\"));\n}", "oracle": "assertTrue(handler.hasInitContainer(builder,\"STR\"));", "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/InitContainerHandler.java", "focalName": "hasInitContainer", "focalMethod": " public boolean hasInitContainer ( PodTemplateSpecBuilder builder , String name ) { \n return getInitContainer ( builder , name ) != null ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["basis-technology-corp", "tcl-regex-java", ""], "classPath": "src/test/java/com/basistech/tclre/SmpTest.java", "className": "SmpTest", "testName": "findCharClass", "testMethod": "@Test\n public void findCharClass ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}", "oracle": "assertTrue(matcher.find());", "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java", "focalName": "find", "focalMethod": " boolean find ( ) ; \n", "commitid": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "className": "OETLCSVExtractorTest", "testName": "testNullValueInCell", "testMethod": "@Test\n public void testNullValueInCell ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}", "oracle": "assertFalse(res.isEmpty());", "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focalName": "execute", "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OVarIntSerializerTest.java", "className": "OVarIntSerializerTest", "testName": "serializePosition", "testMethod": "@Test\n public void serializePosition ( ) {\n     BytesContainer bytes = new BytesContainer ( ) ; \n     bytes . offset = OVarIntSerializer . write ( bytes , 16238 ) ; \n     assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);\n}", "oracle": "assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OVarIntSerializer.java", "focalName": "readAsLong", "focalMethod": " public static long readAsLong ( final BytesContainer bytes ) { \n return readSignedVarLong ( bytes ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "className": "ODocumentTest", "testName": "testKeepFieldTypeSerialization", "testMethod": "@Test\n public void testKeepFieldTypeSerialization ( ) throws Exception {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , 10 , OType . INTEGER ) ; \n     doc . field ( \"STR\" , new ORecordId ( 1 , 2 ) , OType . LINK ) ; \n     doc . field ( \"STR\" , 20 , OType . STRING ) ; \n     doc . field ( \"STR\" , new byte [ ] { \n 30 } , OType . BINARY ) ; \n     assertEquals(doc.fieldType(\"STR\"),OType.INTEGER);\n}", "oracle": "assertEquals(doc.fieldType(\"STR\"),OType.INTEGER);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "fieldType", "focalMethod": " public OType fieldType ( final String iFieldName ) { \n checkForLoading ( ) ; \n checkForFields ( iFieldName ) ; \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n if ( entry != null ) return entry . type ; \n return null ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "className": "RemoteTransactionSupportTest", "testName": "testRefFlushedInTransaction", "testMethod": "@Test\n public void testRefFlushedInTransaction ( ) {\n     database . begin ( ) ; \n     OElement someTx = database . newElement ( \"STR\" ) ; \n     someTx . setProperty ( \"STR\" , \"STR\" ) ; \n     database . save ( someTx ) ; \n     OElement oneMore = database . newElement ( \"STR\" ) ; \n     oneMore . setProperty ( \"STR\" , \"STR\" ) ; \n     oneMore . setProperty ( \"STR\" , someTx ) ; \n     OResultSet result = database . query ( \"STR\" ) ; \n     assertEquals(1,result.stream().count());\n}", "oracle": "assertEquals(1,result.stream().count());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "stream", "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/tool/ODatabaseImportTest.java", "className": "ODatabaseImportTest", "testName": "exportImportExcludeClusters", "testMethod": "@Test\n public void exportImportExcludeClusters ( ) throws IOException {\n     ODatabaseDocument db = new ODatabaseDocumentTx ( \"STR\" + ODatabaseImportTest . class . getSimpleName ( ) + \"STR\" ) ; \n     db . create ( ) ; \n     db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; \n     ODatabaseExport export = new ODatabaseExport ( ( ODatabaseDocumentInternal ) db , output , new OCommandOutputListener ( ) { \n @Override\n public void onMessage ( String iText ) { \n } } ) ; \n     export . setOptions ( \"STR\" ) ; \n     export . exportDatabase ( ) ; \n     db . drop ( ) ; \n     ODatabaseDocument dbImp = new ODatabaseDocumentTx ( \"STR\" + ODatabaseImportTest . class . getSimpleName ( ) ) ; \n     dbImp . create ( ) ; \n     ODatabaseImport importer = new ODatabaseImport ( ( ODatabaseDocumentInternal ) dbImp , new ByteArrayInputStream ( output . toByteArray ( ) ) , new OCommandOutputListener ( ) { \n @Override\n public void onMessage ( String iText ) { \n } } ) ; \n     importer . importDatabase ( ) ; \n     Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"STR\"));\n}", "oracle": "Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java", "focalName": "existsClass", "focalMethod": " boolean existsClass ( String iClassName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OTruncateClassStatementExecutionTest.java", "className": "OTruncateClassStatementExecutionTest", "testName": "testTruncateVertexClassSubclassesWithIndex", "testMethod": "@Test\n public void testTruncateVertexClassSubclassesWithIndex ( ) {\n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     OResultSet result = database . query ( \"STR\" ) ; \n     Assert.assertEquals(toList(result).size(),2);\n}", "oracle": "Assert.assertEquals(toList(result).size(),2);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focalName": "query", "focalMethod": " default OResultSet query ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "className": "OCompositeKeyTest", "testName": "testDocumentSerializationCompositeKeyNull", "testMethod": "@Test\n public void testDocumentSerializationCompositeKeyNull ( ) {\n     final OCompositeKey compositeKeyOne = new OCompositeKey ( ) ; \n     compositeKeyOne . addKey ( 1 ) ; \n     compositeKeyOne . addKey ( null ) ; \n     compositeKeyOne . addKey ( 2 ) ; \n     ODocument document = compositeKeyOne . toDocument ( ) ; \n     final OCompositeKey compositeKeyTwo = new OCompositeKey ( ) ; \n     compositeKeyTwo . fromDocument ( document ) ; \n     assertEquals(compositeKeyOne,compositeKeyTwo);\n}", "oracle": "assertEquals(compositeKeyOne,compositeKeyTwo);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focalName": "fromDocument", "focalMethod": "@Override\n public void fromDocument ( ODocument document ) { \n document . setLazyLoad ( false ) ; \n final String [ ] fieldNames = document . fieldNames ( ) ; \n final SortedMap < Integer , Object > keyMap = new TreeMap < Integer , Object > ( ) ; \n for ( String fieldName : fieldNames ) { \n if ( fieldName . startsWith ( \"STR\" ) ) { \n final String keyIndex = fieldName . substring ( 3 ) ; \n keyMap . put ( Integer . valueOf ( keyIndex ) , document . field ( fieldName ) ) ; \n } } keys . clear ( ) ; \n for ( Object value : keyMap . values ( ) ) keys . add ( value ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["NanoHttpd", "nanohttpd", "nanolets"], "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "className": "TestNanolets", "testName": "checkIniParameter2", "testMethod": "@Test\n public void checkIniParameter2 ( ) throws Exception {\n     Assert.assertEquals(\"STR\",newRouterNanoHTTPD.UriResource(\"STR\",100,null,\"STR\").initParameter(String.class));\n}", "oracle": "Assert.assertEquals(\"STR\",newRouterNanoHTTPD.UriResource(\"STR\",100,null,\"STR\").initParameter(String.class));", "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD$UriResource.java", "focalName": "initParameter", "focalMethod": " public < T > T initParameter ( Class < T > paramClazz ) { \n return initParameter ( 0 , paramClazz ) ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["NanoHttpd", "nanohttpd", "nanolets"], "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "className": "TestNanolets", "testName": "testProvidedPriorityRoutePrioritizerNullUri", "testMethod": "@Test\n public void testProvidedPriorityRoutePrioritizerNullUri ( ) {\n     ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer ( ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}", "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());", "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD$BaseRoutePrioritizer.java", "focalName": "getPrioritizedRoutes", "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["NanoHttpd", "nanohttpd", "nanolets"], "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "className": "TestNanolets", "testName": "testHandlerSetters", "testMethod": "@Test\n public void testHandlerSetters ( ) throws Exception {\n     final UriResponder notFoundHandler = new GeneralHandler ( ) { \n } ; \n     final UriResponder notImplementedHandler = new GeneralHandler ( ) { \n } ; \n     TestRouter router = new TestRouter ( ) ; \n     RouterNanoHTTPD routerNanoHttpd = new RouterNanoHTTPD ( 9999 ) ; \n     Field routerField = RouterNanoHTTPD . class . getDeclaredField ( \"STR\" ) ; \n     routerField . setAccessible ( true ) ; \n     routerField . set ( routerNanoHttpd , router ) ; \n     routerNanoHttpd . setNotFoundHandler ( notFoundHandler . getClass ( ) ) ; \n     routerNanoHttpd . setNotImplementedHandler ( notImplementedHandler . getClass ( ) ) ; \n     Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);\n}", "oracle": "Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);", "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focalName": "setNotImplementedHandler", "focalMethod": " public < T extends UriResponder > void setNotImplementedHandler ( Class < T > handler ) { \n router . setNotImplemented ( handler ) ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "className": "TestExceptionTest", "testName": "testConstructor_withCause", "testMethod": "@Test\n public void testConstructor_withCause ( ) {\n     RuntimeException cause = new RuntimeException ( ) ; \n     TestException exception = new TestException ( cause ) ; \n     assertEquals(cause,exception.getCause());\n}", "oracle": "assertEquals(cause,exception.getCause());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/test/TestException.java", "focalName": "TestException", "focalMethod": " public TestException ( Throwable cause ) { \n super ( cause ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "className": "TestExceptionTest", "testName": "testConstructor_withMessageFormat_singleArgument", "testMethod": "@Test\n public void testConstructor_withMessageFormat_singleArgument ( ) {\n     TestException exception = new TestException ( \"STR\" , 1 ) ; \n     assertEquals(\"STR\",exception.getMessage());\n}", "oracle": "assertEquals(\"STR\",exception.getMessage());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/test/TestException.java", "focalName": "TestException", "focalMethod": " public TestException ( String message , Object ... args ) { \n super ( format ( message , args ) ) ; \n Object lastArg = args [ args . length - 1 ] ; \n if ( lastArg instanceof Throwable ) { \n initCause ( ( Throwable ) lastArg ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "className": "PerformanceStatsCollectorTest", "testName": "testGet", "testMethod": "@Test\n public void testGet ( ) {\n     update ( a1w1 , TEST_CASE_ID_1 , new PerformanceStats ( 1000 , 200 , 500 , 1900.0d , 1800 , 2500 ) ) ; \n     update ( a1w1 , TEST_CASE_ID_1 , new PerformanceStats ( 1500 , 150 , 550 , 1600.0d , 1700 , 2400 ) ) ; \n     update ( a2w1 , TEST_CASE_ID_1 , new PerformanceStats ( 800 , 100 , 300 , 2200.0d , 2400 , 2800 ) ) ; \n     PerformanceStats performanceStats = performanceStatsCollector . get ( TEST_CASE_ID_1 , true ) ; \n     assertFalse(performanceStats.isEmpty());\n}", "oracle": "assertFalse(performanceStats.isEmpty());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/performance/PerformanceStats.java", "focalName": "isEmpty", "focalMethod": " public boolean isEmpty ( ) { \n return ( operationCount == EMPTY_OPERATION_COUNT && intervalThroughput == EMPTY_THROUGHPUT ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "className": "SimulatorAddressTest", "testName": "testToString_whenCoordinator", "testMethod": "@Test\n public void testToString_whenCoordinator ( ) {\n     assertEquals(\"STR\",coordinatorAddress().toString());\n}", "oracle": "assertEquals(\"STR\",coordinatorAddress().toString());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) { \n if ( addressLevel == COORDINATOR ) { \n return COORDINATOR_STRING ; \n } else if ( addressLevel == AGENT ) { \n return \"STR\" + agentIndex ; \n } else { \n return \"STR\" + agentIndex + \"STR\" + workerIndex ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "className": "AnnotatedMethodRetrieverTest", "testName": "testSubClass_methodFoundInSuper", "testMethod": "@Test\n public void testSubClass_methodFoundInSuper ( ) {\n     List < Method > methodList = new AnnotatedMethodRetriever ( Subclass . class , Teardown . class ) . withFilter ( new AnnotationFilter . TeardownFilter ( false ) ) . withVoidReturnType ( ) . withoutArgs ( ) . findAll ( ) ; \n     assertEquals(1,methodList.size());\n}", "oracle": "assertEquals(1,methodList.size());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java", "focalName": "findAll", "focalMethod": " public List < Method > findAll ( ) { \n List < Method > methods = findAllDeclaredMethods ( clazz ) ; \n for ( Method method : methods ) { \n verifyPublic ( method ) ; \n verifyNotStatic ( method ) ; \n verifyReturnType ( method ) ; \n verifyArgs ( method ) ; \n method . setAccessible ( true ) ; \n } return methods ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "className": "SpringBootUtilTest", "testName": "testMultipleProfilesParsing", "testMethod": "@Test\n public void testMultipleProfilesParsing ( ) {\n     Properties props = SpringBootUtil . getPropertiesFromApplicationYamlResource ( null , getClass ( ) . getResource ( \"STR\" ) ) ; \n     assertTrue(props.size()>0);\n}", "oracle": "assertTrue(props.size()>0);", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/SpringBootUtil.java", "focalName": "getPropertiesFromApplicationYamlResource", "focalMethod": " public static Properties getPropertiesFromApplicationYamlResource ( String springActiveProfile , URL ymlResource ) { \n return YamlUtil . getPropertiesFromYamlResource ( springActiveProfile , ymlResource ) ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "className": "EnvironmentTest", "testName": "testSetupWithCompleteJob", "testMethod": "@Test\n public void testSetupWithCompleteJob ( ) {\n     mojo . serviceName = null ; \n     Properties environment = new Properties ( ) ; \n     environment . setProperty ( \"STR\" , \"STR\" ) ; \n     when ( serviceMock . getName ( ) ) . thenReturn ( \"STR\" ) ; \n     when ( serviceMock . getJobId ( ) ) . thenReturn ( \"STR\" ) ; \n     when ( serviceMock . getBuildNumber ( ) ) . thenReturn ( \"STR\" ) ; \n     when ( serviceMock . getBuildUrl ( ) ) . thenReturn ( \"STR\" ) ; \n     when ( serviceMock . getBranch ( ) ) . thenReturn ( \"STR\" ) ; \n     when ( serviceMock . getPullRequest ( ) ) . thenReturn ( \"STR\" ) ; \n     when ( serviceMock . getEnvironment ( ) ) . thenReturn ( environment ) ; \n     create ( Arrays . asList ( mock ( ServiceSetup . class ) , serviceMock ) ) . setup ( ) ; \n     assertEquals(\"STR\",mojo.serviceName);\n}", "oracle": "assertEquals(\"STR\",mojo.serviceName);", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/Environment.java", "focalName": "setup", "focalMethod": " public void setup ( ) { \n setupService ( ) ; \n verify ( ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["javadev", "moneytostr-russian", ""], "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "className": "MoneyToStrTest", "testName": "checkPER100", "testMethod": "@Test\n public void checkPER100 ( ) {\n     assertEquals(\"STR\",moneyToStrPER100.convert(V_1_01D));\n}", "oracle": "assertEquals(\"STR\",moneyToStrPER100.convert(V_1_01D));", "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focalName": "convert", "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } ", "commitid": "d39c8729e15292d4f3d38ddbae68977f170f482b"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "rezidu\u0101\u013ci", "testMethod": "@Test\n public void rezidu\u0101\u013ci ( ) {\n     loc\u012bt\u0101js . enableDiminutive = true ; \n     loc\u012bt\u0101js . enablePrefixes = true ; \n     loc\u012bt\u0101js . enableGuessing = true ; \n     loc\u012bt\u0101js . enableAllGuesses = true ; \n     loc\u012bt\u0101js . mekl\u0113tsalikte\u0146us = true ; \n     Word m = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(m.isRecognized());\n}", "oracle": "assertTrue(m.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana", "testMethod": "@Test\n public void apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana ( ) {\n     List < Wordform > formas = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     assertEquals(1,formas.size());\n}", "oracle": "assertEquals(1,formas.size());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Analyzer.java", "focalName": "generateInflections", "focalMethod": " public ArrayList < Wordform > generateInflections ( String lemma ) { \n return generateInflections ( lemma , false ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["nidi3", "graphviz-java", "graphviz-java"], "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java", "className": "RecordsTest", "testName": "turn", "testMethod": "@Test\n void turn ( ) {\n     assertEquals(\"STR\",Records.turn(Records.rec(\"STR\",\"STR\"),\"STR\"));\n}", "oracle": "assertEquals(\"STR\",Records.turn(Records.rec(\"STR\",\"STR\"),\"STR\"));", "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Records.java", "focalName": "turn", "focalMethod": " public static String turn ( String ... records ) { \n return \"STR\" + String . join ( \"STR\" , records ) + \"STR\" ; \n } ", "commitid": "dcbd021a903a4114dd087ef9acec5650b92c89b2"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "className": "RpcConnectionManagerTest", "testName": "testGetAll", "testMethod": "@Test\n public void testGetAll ( ) {\n     cm . add ( getAConn ( ) ) ; \n     cm . add ( getAConn ( ) ) ; \n     cm . add ( getAConn ( ) ) ; \n     cm . add ( getAConn ( ) ) ; \n     Map < String , List < Connection > > conns = cm . getAll ( ) ; \n     Assert.assertEquals(1,conns.size());\n}", "oracle": "Assert.assertEquals(1,conns.size());", "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focalName": "getAll", "focalMethod": "@Override\n public Map < String , List < Connection > > getAll ( ) { \n Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; \n for ( Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry : this . getConnPools ( ) . entrySet ( ) ) { \n ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; \n if ( null != pool ) { \n allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; \n } } return allConnections ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AOptionTest.java", "className": "AOptionTest", "testName": "testSome", "testMethod": "@Test\n public void testSome ( ) throws Exception {\n     final AOption < String > s = AOption . some ( \"STR\" ) ; \n     assertEquals(\"STR\",s.get());\n}", "oracle": "assertEquals(\"STR\",s.get());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AOption.java", "focalName": "get", "focalMethod": " public abstract T get ( ) ; \n", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "className": "PuzzleStateTest", "testName": "estimated_cost_is_zero_when_solved", "testMethod": "@Test\n public void estimated_cost_is_zero_when_solved ( ) {\n     PuzzleState s = new PuzzleState ( getSolvedPuzzle ( ) ) ; \n     assertEquals(0,s.getEstimatedCost());\n}", "oracle": "assertEquals(0,s.getEstimatedCost());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focalName": "getEstimatedCost", "focalMethod": " public int getEstimatedCost ( ) { \n return puzzle . getDistanceToGoal ( ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "className": "RpcConnectionManagerTest", "testName": "testAddWconnithPoolKey_multiPoolKey", "testMethod": "@Test\n public void testAddWconnithPoolKey_multiPoolKey ( ) throws InterruptedException {\n     Connection conn = getAConn ( ) ; \n     cm . add ( conn , poolKey ) ; \n     cm . add ( conn , \"STR\" ) ; \n     cm . add ( conn , \"STR\" ) ; \n     Assert.assertEquals(1,cm.count(poolKey));\n}", "oracle": "Assert.assertEquals(1,cm.count(poolKey));", "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focalName": "count", "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java", "className": "TrackedListTest", "testName": "testAddIndexNotificationThree", "testMethod": "@Test\n public void testAddIndexNotificationThree ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}", "oracle": "Assert.assertFalse(doc.isDirty());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focalName": "isDirty", "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "className": "OETLCSVExtractorTest", "testName": "testFloatWithinQuotesAndCommaAsDecimalSeparator", "testMethod": "@Test\n public void testFloatWithinQuotesAndCommaAsDecimalSeparator ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}", "oracle": "assertFalse(res.isEmpty());", "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focalName": "execute", "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/CharSerializerTest.java", "className": "CharSerializerTest", "testName": "testSerialize", "testMethod": "@Test\n public void testSerialize ( ) {\n     charSerializer . serialize ( OBJECT , stream , 0 ) ; \n     Assert.assertEquals(charSerializer.deserialize(stream,0),OBJECT);\n}", "oracle": "Assert.assertEquals(charSerializer.deserialize(stream,0),OBJECT);", "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OCharSerializer.java", "focalName": "deserialize", "focalMethod": " public Character deserialize ( final byte [ ] stream , final int startPosition ) { \n return deserializeLiteral ( stream , startPosition ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/blueprints/BlueprintsTest.java", "className": "BlueprintsTest", "testName": "testPersistentRIDAfterCommit", "testMethod": "@Test\n public void testPersistentRIDAfterCommit ( ) {\n     Vertex v = graph . addVertex ( null ) ; \n     v . setProperty ( \"STR\" , \"STR\" ) ; \n     graph . commit ( ) ; \n     Assert.assertTrue(((ORID)v.getId()).isPersistent());\n}", "oracle": "Assert.assertTrue(((ORID)v.getId()).isPersistent());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/id/ORID.java", "focalName": "isPersistent", "focalMethod": " boolean isPersistent ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "className": "OCompositeIndexDefinitionTest", "testName": "testDocumentToIndexMapValueSuccessful", "testMethod": "@Test\n public void testDocumentToIndexMapValueSuccessful ( ) {\n     final ODocument document = new ODocument ( ) ; \n     final Map < String , String > stringMap = new HashMap < String , String > ( ) ; \n     stringMap . put ( \"STR\" , \"STR\" ) ; \n     stringMap . put ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , 12 ) ; \n     document . field ( \"STR\" , stringMap ) ; \n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ) ; \n     final Object result = compositeIndexDefinition . getDocumentValueToIndex ( document ) ; \n     final Collection < OCompositeKey > collectionResult = ( Collection < OCompositeKey > ) result ; \n     Assert.assertEquals(collectionResult.size(),2);\n}", "oracle": "Assert.assertEquals(collectionResult.size(),2);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinition.java", "focalName": "getDocumentValueToIndex", "focalMethod": " public Object getDocumentValueToIndex ( final ODocument iDocument ) { \n final List < OCompositeKey > compositeKeys = new ArrayList < OCompositeKey > ( 10 ) ; \n final OCompositeKey firstKey = new OCompositeKey ( ) ; \n boolean containsCollection = false ; \n compositeKeys . add ( firstKey ) ; \n for ( final OIndexDefinition indexDefinition : indexDefinitions ) { \n final Object result = indexDefinition . getDocumentValueToIndex ( iDocument ) ; \n if ( result == null && isNullValuesIgnored ( ) ) return null ; \n if ( result instanceof Collection && ( ( Collection ) result ) . isEmpty ( ) && isNullValuesIgnored ( ) ) return null ; \n containsCollection = addKey ( firstKey , compositeKeys , containsCollection , result ) ; \n } if ( ! containsCollection ) return firstKey ; \n return compositeKeys ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "className": "OCompositeIndexDefinitionTest", "testName": "testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport", "testMethod": "@Test\n public void testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport ( ) {\n     final ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , Collections . emptyList ( ) ) ; \n     document . field ( \"STR\" , 12 ) ; \n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . setNullValuesIgnored ( false ) ; \n     final Object result = compositeIndexDefinition . getDocumentValueToIndex ( document ) ; \n     Assert.assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));\n}", "oracle": "Assert.assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focalName": "OCompositeKey", "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "distributed"], "classPath": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OClusterRepairInfoTaskTest.java", "className": "OClusterRepairInfoTaskTest", "testName": "testSerialization", "testMethod": "@Test\n public void testSerialization ( ) throws IOException {\n     OClusterRepairInfoTask from = new OClusterRepairInfoTask ( 100 ) ; \n     OClusterRepairInfoTask to = new OClusterRepairInfoTask ( ) ; \n     serializeDeserialize ( from , to ) ; \n     Assert.assertEquals(from.getClusterId(),to.getClusterId());\n}", "oracle": "Assert.assertEquals(from.getClusterId(),to.getClusterId());", "focalFile": "distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/task/OClusterRepairInfoTask.java", "focalName": "getClusterId", "focalMethod": " public int getClusterId ( ) { \n return clusterId ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLCreateVertexAndEdgeTest.java", "className": "SQLCreateVertexAndEdgeTest", "testName": "testNewParser", "testMethod": "@Test\n public void testNewParser ( ) {\n     ODocument v1 = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);\n}", "oracle": "Assert.assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "getClassName", "focalMethod": " public String getClassName ( ) { \n if ( _className == null ) fetchClassName ( ) ; \n return _className ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "className": "RemoteQuerySupportTest", "testName": "testQueryEmbeddedMap", "testMethod": "@Test\n public void testQueryEmbeddedMap ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . setProperty ( \"STR\" , \"STR\" ) ; \n     ODocument emb = new ODocument ( ) ; \n     emb . setProperty ( \"STR\" , \"STR\" ) ; \n     Map < String , ODocument > map = new HashMap < > ( ) ; \n     map . put ( \"STR\" , emb ) ; \n     doc . setProperty ( \"STR\" , map , OType . EMBEDDEDMAP ) ; \n     session . save ( doc ) ; \n     OResultSet res = session . query ( \"STR\" ) ; \n     OResult item = res . next ( ) ; \n     assertNotNull(item.getProperty(\"STR\"));\n}", "oracle": "assertNotNull(item.getProperty(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focalName": "getProperty", "focalMethod": " < T > T getProperty ( String name ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "className": "WildcardsTest", "testName": "testMatchesAgainstWildcards", "testMethod": "@Test\n public void testMatchesAgainstWildcards ( ) throws Exception {\n     assertTrue(Wildcards.matches(\"STR\",\"STR\"));\n}", "oracle": "assertTrue(Wildcards.matches(\"STR\",\"STR\"));", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/Wildcards.java", "focalName": "matches", "focalMethod": " public static boolean matches ( final String text , final String wildcard ) { \n String pattern = wildcard . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) ; \n return ( text != null && text . matches ( pattern ) ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/json/JsonWriterTest.java", "className": "JsonWriterTest", "testName": "testSubDirectoryCreation", "testMethod": "@Test\n public void testSubDirectoryCreation ( ) throws Exception {\n     File f = new File ( new File ( folder . getRoot ( ) , \"STR\" ) , \"STR\" ) ; \n     Job job = job ( ) ; \n     assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());\n}", "oracle": "assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/json/JsonWriter.java", "focalName": "getCoverallsFile", "focalMethod": " public final File getCoverallsFile ( ) { \n return coverallsFile ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "className": "TravisTest", "testName": "testGetBranch", "testMethod": "@Test\n public void testGetBranch ( ) {\n     assertEquals(\"STR\",newTravis(env()).getBranch());\n}", "oracle": "assertEquals(\"STR\",newTravis(env()).getBranch());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Travis.java", "focalName": "getBranch", "focalMethod": "@Override\n public String getBranch ( ) { \n return getProperty ( TRAVIS_BRANCH ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "className": "BatchPollProcessorTest", "testName": "testGetSetAttributeInjector", "testMethod": "@Test\n public void testGetSetAttributeInjector ( ) throws Exception {\n     assertNotNull(this.processor.getAttributeInjector());\n}", "oracle": "assertNotNull(this.processor.getAttributeInjector());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/BatchPollProcessor.java", "focalName": "getAttributeInjector", "focalMethod": " public AttributeInjector getAttributeInjector ( ) { \n return attributeInjector ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/ReflectionUtilsTest.java", "className": "ReflectionUtilsTest", "testName": "testSetFieldValue", "testMethod": "@Test\n public void testSetFieldValue ( ) {\n     SetFieldTest setFieldTest = new SetFieldTest ( ) ; \n     assertNull(setFieldTest.injectField);\n}", "oracle": "assertNull(setFieldTest.injectField);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/ReflectionUtils.java", "focalName": "setFieldValue", "focalMethod": " public static void setFieldValue ( Object instance , Field field , Object value ) { \n field . setAccessible ( true ) ; \n setFieldValue0 ( instance , field , value ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/TagUtilsTest.java", "className": "TagUtilsTest", "testName": "parseTags", "testMethod": "@Test\n public void parseTags ( ) {\n     Map < String , String > result = TagUtils . parseTags ( \"STR\" ) ; \n     assertEquals(toMap(\"STR\",\"STR\",\"STR\",\"STR\",\"STR\",\"STR\"),result);\n}", "oracle": "assertEquals(toMap(\"STR\",\"STR\",\"STR\",\"STR\",\"STR\",\"STR\"),result);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/TagUtils.java", "focalName": "parseTags", "focalMethod": " public static Map < String , String > parseTags ( String s ) { \n Map < String , String > result = new HashMap < > ( ) ; \n if ( \"STR\" . equals ( s ) ) { \n return result ; \n } for ( String keyValue : s . split ( \"STR\" ) ) { \n if ( keyValue . contains ( \"STR\" ) ) { \n String [ ] array = keyValue . split ( \"STR\" ) ; \n result . put ( array [ 0 ] , array [ 1 ] ) ; \n } else { \n result . put ( keyValue , \"STR\" ) ; \n } } return result ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "className": "RegistryTest", "testName": "testGetWorkers_getMemberWorkers_notEnoughWorkersFound", "testMethod": "@ Test ( expected = IllegalStateException . class ) public void testGetWorkers_getMemberWorkers_notEnoughWorkersFound ( ) {\n     SimulatorAddress agentAddress = addAgent ( ) ; \n     registry . addWorkers ( newWorkerParametersList ( agentAddress , 2 , \"STR\" ) ) ; \n     registry . addWorkers ( newWorkerParametersList ( agentAddress , 2 , \"STR\" ) ) ; \n     assertEquals(4,registry.workerCount());\n}", "oracle": "assertEquals(4,registry.workerCount());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focalName": "workerCount", "focalMethod": " public int workerCount ( ) { \n return workers . size ( ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "className": "DevUtilTest", "testName": "testCopyFile", "testMethod": "@Test\n public void testCopyFile ( ) throws Exception {\n     File configFile = new File ( srcDir , \"STR\" ) ; \n     Files . write ( configFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     util . copyFile ( configFile , srcDir , targetDir , \"STR\" ) ; \n     File targetFile = new File ( targetDir , \"STR\" ) ; \n     assertTrue(targetFile.exists());\n}", "oracle": "assertTrue(targetFile.exists());", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "copyFile", "focalMethod": " public void copyFile ( File fileChanged , File srcDir , File targetDir , String targetFileName ) throws IOException { \n File targetResource = getTargetFile ( fileChanged , srcDir , targetDir , targetFileName ) ; \n try { \n FileUtils . copyFile ( fileChanged , targetResource ) ; \n info ( \"STR\" + fileChanged . getCanonicalPath ( ) + \"STR\" + targetResource . getCanonicalPath ( ) ) ; \n } catch ( FileNotFoundException ex ) { \n debug ( \"STR\" + fileChanged . getCanonicalPath ( ) ) ; \n } catch ( Exception ex ) { \n debug ( ex ) ; \n } } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "className": "DevUtilPrepareDockerfileTest", "testName": "testDisableOpenJ9SCC_lowercase", "testMethod": "@Test\n public void testDisableOpenJ9SCC_lowercase ( ) throws Exception {\n     List < String > dockerfileLines = new ArrayList < String > ( ) ; \n     List < String > expectedDockerfileLines = new ArrayList < String > ( ) ; \n     dockerfileLines . add ( \"STR\" ) ; \n     dockerfileLines . add ( \"STR\" ) ; \n     util . disableOpenJ9SCC ( dockerfileLines ) ; \n     expectedDockerfileLines . add ( \"STR\" ) ; \n     expectedDockerfileLines . add ( \"STR\" ) ; \n     expectedDockerfileLines . add ( \"STR\" ) ; \n     assertEquals(expectedDockerfileLines,dockerfileLines);\n}", "oracle": "assertEquals(expectedDockerfileLines,dockerfileLines);", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "disableOpenJ9SCC", "focalMethod": " protected void disableOpenJ9SCC ( List < String > dockerfileLines ) { \n final String RUN_CONFIGURE_COMMAND_LOWERCASE = \"STR\" ; \n for ( int i = 0 ; \n i < dockerfileLines . size ( ) ; \n i ++ ) { \n String line = dockerfileLines . get ( i ) ; \n if ( line . toLowerCase ( ) . equals ( RUN_CONFIGURE_COMMAND_LOWERCASE ) ) { \n debug ( \"STR\" ) ; \n dockerfileLines . add ( i , \"STR\" ) ; \n return ; \n } } } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["1337joe", "cubesensors-for-java", ""], "classPath": "src/test/java/com/w3asel/cubesensors/api/v1/format/TestPressure.java", "className": "TestPressure", "testName": "testToInHg", "testMethod": "@Test\n public void testToInHg ( ) {\n     String expected , actual ; \n     expected = \"STR\" ; \n     actual = Pressure . toInHg ( 802 ) ; \n     Assert.assertEquals(expected,actual);\n}", "oracle": "Assert.assertEquals(expected,actual);", "focalFile": "src/main/java/com/w3asel/cubesensors/api/v1/format/Pressure.java", "focalName": "toInHg", "focalMethod": " public static String toInHg ( final int apiValue ) { \n return toInHg ( apiValue , 1 ) ; \n } ", "commitid": "f3ba432d36b744e68b916682d7ef24afaff447f8"}
{"project": ["basis-technology-corp", "tcl-regex-java", ""], "classPath": "src/test/java/com/basistech/tclre/ColorMapTest.java", "className": "ColorMapTest", "testName": "testVerySimple", "testMethod": "@Test\n public void testVerySimple ( ) throws Exception {\n     ColorMap cm = new ColorMap ( compiler ) ; \n     cm . subcolor ( 'a' ) ; \n     cm . okcolors ( nfa ) ; \n     assertEquals(1,cm.subcolor('a'));\n}", "oracle": "assertEquals(1,cm.subcolor('a'));", "focalFile": "src/main/java/com/basistech/tclre/ColorMap.java", "focalName": "subcolor", "focalMethod": " short subcolor ( int c ) throws RegexException { \n return subcolor ( c , 1 ) ; \n } ", "commitid": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "className": "Draft_6455Test", "testName": "createFramesText", "testMethod": "@Test\n public void createFramesText ( ) throws Exception {\n     Draft_6455 draft_6455 = new Draft_6455 ( ) ; \n     TextFrame curframe = new TextFrame ( ) ; \n     curframe . setPayload ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( \"STR\" ) ) ) ; \n     curframe . setTransferemasked ( false ) ; \n     List < Framedata > createdFrame = draft_6455 . createFrames ( \"STR\" , false ) ; \n     assertEquals(1,createdFrame.size());\n}", "oracle": "assertEquals(1,createdFrame.size());", "focalFile": "src/main/java/org/java_websocket/drafts/Draft_6455.java", "focalName": "createFrames", "focalMethod": "@Override\n public List < Framedata > createFrames ( String text , boolean mask ) { \n TextFrame curframe = new TextFrame ( ) ; \n curframe . setPayload ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( text ) ) ) ; \n curframe . setTransferemasked ( mask ) ; \n try { \n curframe . isValid ( ) ; \n } catch ( InvalidDataException e ) { \n throw new NotSendableException ( e ) ; \n } return Collections . singletonList ( ( Framedata ) curframe ) ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "className": "BasicURLNormalizerTest", "testName": "testDontFixMangledQueryString", "testMethod": "@Test\n public void testDontFixMangledQueryString ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( true , false , queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}", "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focalName": "filter", "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["NanoHttpd", "nanohttpd", "websocket"], "classPath": "websocket/src/test/java/org/nanohttpd/junit/protocols/websockets/WebSocketResponseHandlerTest.java", "className": "WebSocketResponseHandlerTest", "testName": "testMissingKeyReturnsErrorResponse", "testMethod": "@Test\n public void testMissingKeyReturnsErrorResponse ( ) {\n     this . headers . remove ( \"STR\" ) ; \n     Response handshakeResponse = this . nanoWebSocketServer . handle ( this . session ) ; \n     assertNotNull(handshakeResponse);\n}", "oracle": "assertNotNull(handshakeResponse);", "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java", "focalName": "getStatus", "focalMethod": " public IStatus getStatus ( ) { \n return this . status ; \n } ", "commitid": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "className": "HostURLFilterTest", "testName": "testWithinDomain", "testMethod": "@Test\n public void testWithinDomain ( ) throws MalformedURLException {\n     HostURLFilter allAllowed = createFilter ( false , true ) ; \n     URL sourceURL = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = allAllowed . filter ( sourceURL , metadata , \"STR\" ) ; \n     Assert.assertEquals(\"STR\",filterResult);\n}", "oracle": "Assert.assertEquals(\"STR\",filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focalName": "filter", "focalMethod": "@Override\n public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) { \n if ( sourceUrl == null || ( ! ignoreOutsideHost && ! ignoreOutsideDomain ) ) { \n return urlToFilter ; \n } URL tURL ; \n try { \n tURL = new URL ( urlToFilter ) ; \n } catch ( MalformedURLException e1 ) { \n return null ; \n } String fromHost ; \n String fromDomain = null ; \n if ( sourceUrl == previousSourceUrl ) { \n fromHost = previousSourceHost ; \n if ( ignoreOutsideDomain ) { \n fromDomain = previousSourceDomain ; \n } } else { \n fromHost = sourceUrl . getHost ( ) ; \n if ( ignoreOutsideDomain ) { \n fromDomain = PaidLevelDomain . getPLD ( fromHost ) ; \n } previousSourceHost = fromHost ; \n previousSourceDomain = fromDomain ; \n previousSourceUrl = sourceUrl ; \n } String toHost = tURL . getHost ( ) ; \n if ( ignoreOutsideHost ) { \n if ( toHost == null || ! toHost . equalsIgnoreCase ( fromHost ) ) { \n return null ; \n } } if ( ignoreOutsideDomain ) { \n String toDomain = PaidLevelDomain . getPLD ( toHost ) ; \n if ( toDomain == null || ! toDomain . equals ( fromDomain ) ) { \n return null ; \n } } return urlToFilter ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/util/SeqTest.java", "className": "SeqTest", "testName": "testJoinListNull", "testMethod": "@Test\n public void testJoinListNull ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(null,\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",Seq.join(null,\"STR\"));", "focalFile": "src/main/java/me/zzp/util/Seq.java", "focalName": "join", "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } ", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/util/SeqTest.java", "className": "SeqTest", "testName": "testAssignAt", "testMethod": "@Test\n public void testAssignAt ( ) {\n     int [ ] a = new int [ 5 ] ; \n     Seq . assignAt ( a , Seq . array ( 0 , 2 , 3 ) , 1 , 3 , 4 ) ; \n     Seq . assignAt ( a , Seq . array ( - 1 , - 4 ) , 5 , 2 ) ; \n     Assert.assertArrayEquals(newint[]{1,2,3,4,5},a);\n}", "oracle": "Assert.assertArrayEquals(newint[]{1,2,3,4,5},a);", "focalFile": "src/main/java/me/zzp/util/Seq.java", "focalName": "assignAt", "focalMethod": " public static int [ ] assignAt ( int [ ] a , Integer [ ] indexes , int ... values ) { \n if ( indexes . length != values . length ) { \n throw new IllegalArgumentException ( String . format ( \"STR\" , indexes . length , values . length ) ) ; \n } for ( int i = 0 ; \n i < indexes . length ; \n i ++ ) { \n int index = indexes [ i ] ; \n if ( 0 <= index && index < a . length ) { \n a [ index ] = values [ i ] ; \n } else if ( - a . length <= index && index < 0 ) { \n a [ a . length + index ] = values [ i ] ; \n } else { \n throw new ArrayIndexOutOfBoundsException ( index ) ; \n } } return a ; \n } ", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["redraiment", "jactiverecord", ""], "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "className": "TSqlBuilderTest", "testName": "testPaging", "testMethod": "@Test\n public void testPaging ( ) {\n     sql . select ( ) . from ( \"STR\" ) . limit ( 10 ) ; \n     assertEquals(\"STR\",sql.toString());\n}", "oracle": "assertEquals(\"STR\",sql.toString());", "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) ; \n", "commitid": "d051709c93204658e7f2cc96c9898201c7337269"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateDictionaryIndexChangesTxTest.java", "className": "DuplicateDictionaryIndexChangesTxTest", "testName": "testDuplicateNullsOnCreate", "testMethod": "@Test\n public void testDuplicateNullsOnCreate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . save ( ) ; \n     person1 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertEquals(person2,index.get(\"STR\"));\n}", "oracle": "Assert.assertEquals(person2,index.get(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focalName": "get", "focalMethod": " T get ( Object iKey ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testMatches", "testMethod": "@Test\n public void testMatches ( ) {\n     List < ? > result = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     assertEquals(result.size(),1);\n}", "oracle": "assertEquals(result.size(),1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focalName": "query", "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testParamWithMatches", "testMethod": "@Test\n public void testParamWithMatches ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql , params ) ; \n     assertEquals(results.size(),1);\n}", "oracle": "assertEquals(results.size(),1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focalName": "query", "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testMatchesWithQuotes3", "testMethod": "@Test\n public void testMatchesWithQuotes3 ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}", "oracle": "assertEquals(results.size(),1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focalName": "query", "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testBooleanParams", "testMethod": "@Test\n public void testBooleanParams ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( \"STR\" , true ) ; \n     assertEquals(qResult.size(),1);\n}", "oracle": "assertEquals(qResult.size(),1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java", "className": "OSimpleKeyIndexDefinitionTest", "testName": "testGetKeyTypes", "testMethod": "@Test\n public void testGetKeyTypes ( ) {\n     Assert.assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});\n}", "oracle": "Assert.assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinition.java", "focalName": "getTypes", "focalMethod": " public OType [ ] getTypes ( ) { \n return Arrays . copyOf ( keyTypes , keyTypes . length ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "className": "ODocumentTest", "testName": "testNoDirtySameBytes", "testMethod": "@Test\n public void testNoDirtySameBytes ( ) {\n     ODocument doc = new ODocument ( ) ; \n     byte [ ] bytes = new byte [ ] { \n 0 , 1 , 2 , 3 , 4 , 5 } ; \n     doc . field ( \"STR\" , bytes ) ; \n     ODocumentInternal . clearTrackData ( doc ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     assertFalse(doc.isDirty());\n}", "oracle": "assertFalse(doc.isDirty());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focalName": "isDirty", "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/command/OSqlScriptExecutorTest.java", "className": "OSqlScriptExecutorTest", "testName": "testMultipleCreateEdgeOnTheSameLet", "testMethod": "@Test\n public void testMultipleCreateEdgeOnTheSameLet ( ) {\n     OrientDB factory = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n     String dbName = getClass ( ) . getSimpleName ( ) + \"STR\" ; \n     factory . create ( dbName , ODatabaseType . MEMORY ) ; \n     ODatabaseDocument db = factory . open ( dbName , \"STR\" , \"STR\" ) ; \n     String script = \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     OResultSet result = db . execute ( \"STR\" , script ) ; \n     result . close ( ) ; \n     result = db . query ( \"STR\" ) ; \n     Assert.assertEquals(2,result.stream().count());\n}", "oracle": "Assert.assertEquals(2,result.stream().count());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "stream", "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "className": "OSQLFunctionAbsoluteValueTest", "testName": "testNegativeDouble", "testMethod": "@Test\n public void testNegativeDouble ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n - 10.5D } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofDouble);\n}", "oracle": "assertTrue(resultinstanceofDouble);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java", "focalName": "getResult", "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OMathExpressionTest.java", "className": "OMathExpressionTest", "testName": "testAnd", "testMethod": "@Test\n public void testAnd ( ) {\n     OMathExpression exp = new OMathExpression ( - 1 ) ; \n     exp . childExpressions . add ( integer ( 5 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . BIT_AND ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     Object result = exp . execute ( ( OResult ) null , null ) ; \n     Assert.assertTrue(resultinstanceofInteger);\n}", "oracle": "Assert.assertTrue(resultinstanceofInteger);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java", "focalName": "execute", "focalMethod": " public Object execute ( OResult iCurrentRecord , OCommandContext ctx ) { \n if ( childExpressions . size ( ) == 0 ) { \n return null ; \n } if ( childExpressions . size ( ) == 1 ) { \n return childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n } if ( childExpressions . size ( ) == 2 ) { \n Object leftValue = childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n Object rightValue = childExpressions . get ( 1 ) . execute ( iCurrentRecord , ctx ) ; \n return operators . get ( 0 ) . apply ( leftValue , rightValue ) ; \n } return calculateWithOpPriority ( iCurrentRecord , ctx ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLEdgeTransformerTest.java", "className": "OETLEdgeTransformerTest", "testName": "testDynamicEdgeClassMultipleValues", "testMethod": "@Test\n public void testDynamicEdgeClassMultipleValues ( ) {\n     configure ( \"STR\" + \"STR\" + \"STR\" + name . getMethodName ( ) + \"STR\" ) ; \n     OETLLoader loader = proc . getLoader ( ) ; \n     ODatabasePool pool = loader . getPool ( ) ; \n     ODatabaseDocument db = pool . acquire ( ) ; \n     createClasses ( db ) ; \n     OVertex vertex = db . newVertex ( \"STR\" ) ; \n     vertex . setProperty ( \"STR\" , \"STR\" ) ; \n     db . save ( vertex ) ; \n     db . commit ( ) ; \n     db . close ( ) ; \n     proc . execute ( ) ; \n     db = pool . acquire ( ) ; \n     assertEquals(1,db.countClass(\"STR\"));\n}", "oracle": "assertEquals(1,db.countClass(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocument.java", "focalName": "countClass", "focalMethod": " long countClass ( String iClassName ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "className": "OSelectStatementExecutionTest", "testName": "testSelectNoTargetSkip", "testMethod": "@Test\n public void testSelectNoTargetSkip ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertFalse(result.hasNext());\n}", "oracle": "Assert.assertFalse(result.hasNext());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "hasNext", "focalMethod": "@Override\n boolean hasNext ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "vajadz\u012bbas_min\u0113\u0161ana", "testMethod": "@Test\n public void vajadz\u012bbas_min\u0113\u0161ana ( ) {\n     loc\u012bt\u0101js . enablePrefixes = true ; \n     Word v\u0101rds = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(v\u0101rds.isRecognized());\n}", "oracle": "assertTrue(v\u0101rds.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetupTest.java", "className": "AbstractServiceSetupTest", "testName": "testGetProperty", "testMethod": "@Test\n public void testGetProperty ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",create(env).getProperty(\"STR\"));\n}", "oracle": "assertEquals(\"STR\",create(env).getProperty(\"STR\"));", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetup.java", "focalName": "getProperty", "focalMethod": " protected final String getProperty ( final String name ) { \n return env . get ( name ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java", "className": "StatementReferenceTest", "testName": "testSetId", "testMethod": "@Test\n public void testSetId ( ) {\n     String expected = UUID . randomUUID ( ) . toString ( ) ; \n     statementRef . setId ( expected ) ; \n     String actual = statementRef . getId ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/StatementReference.java", "focalName": "getId", "focalMethod": " public String getId ( ) { \n return id ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "className": "AnnotatedMethodRetrieverTest", "testName": "testGetAtMostOneVoidMethodWithoutArgs", "testMethod": "@Test\n public void testGetAtMostOneVoidMethodWithoutArgs ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Prepare . class ) . withVoidReturnType ( ) . withoutArgs ( ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}", "oracle": "assertEquals(\"STR\",method.getName());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java", "focalName": "find", "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "className": "RegistryTest", "testName": "testGetAgents_withCount", "testMethod": "@Test\n public void testGetAgents_withCount ( ) {\n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     assertEquals(3,registry.agentCount());\n}", "oracle": "assertEquals(3,registry.agentCount());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focalName": "agentCount", "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "className": "RegistryTest", "testName": "testRemoveWorker_viaSimulatorAddress", "testMethod": "@Test\n public void testRemoveWorker_viaSimulatorAddress ( ) {\n     SimulatorAddress agentAddress = addAgent ( ) ; \n     List < WorkerParameters > parametersList = newWorkerParametersList ( agentAddress , 5 ) ; \n     registry . addWorkers ( parametersList ) ; \n     assertEquals(5,registry.workerCount());\n}", "oracle": "assertEquals(5,registry.workerCount());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focalName": "workerCount", "focalMethod": " public int workerCount ( ) { \n return workers . size ( ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "className": "JMXJvmIdConnectionFactoryTest", "testName": "testGetSetJmxMbeanConnectorFactory", "testMethod": "@Test\n public void testGetSetJmxMbeanConnectorFactory ( ) {\n     assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);\n}", "oracle": "assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);", "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focalName": "getJmxMBeanConnectionFactory", "focalMethod": " public JMXMBeanConnectionFactory getJmxMBeanConnectionFactory ( ) { \n return jmxmBeanConnectionFactory ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "className": "ACollectionHelperTest", "testName": "testGroupByCustomEquality", "testMethod": "@Test\n public void testGroupByCustomEquality ( ) {\n     final AEquality equality = new AEquality ( ) { \n @Override\n public boolean equals ( Object o1 , Object o2 ) { \n return ( ( Integer ) o1 ) % 2 == ( ( Integer ) o2 ) % 2 ; \n } @Override\n public int hashCode ( Object o ) { \n return 0 ; \n } } ; \n     final AFunction1NoThrow < String , Integer > len = new AFunction1NoThrow < String , Integer > ( ) { \n @Override\n public Integer apply ( String param ) { \n return param . length ( ) ; \n } } ; \n     final Map < AEqualsWrapper < Integer > , List < String > > grouped = ACollectionHelper . groupBy ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) , len , equality ) ; \n     assertEquals(2,grouped.size());\n}", "oracle": "assertEquals(2,grouped.size());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focalName": "groupBy", "focalMethod": " public static < T , X , E extends Throwable > Map < AEqualsWrapper < X > , List < T > > groupBy ( List < T > coll , AFunction1 < ? super T , ? extends X , E > f , AEquality keyEquality ) throws E { \n final Map < AEqualsWrapper < X > , List < T > > result = new HashMap < > ( ) ; \n for ( T o : coll ) { \n final AEqualsWrapper < X > key = new AEqualsWrapper < > ( keyEquality , f . apply ( o ) ) ; \n List < T > perKey = result . get ( key ) ; \n if ( perKey == null ) { \n perKey = createEmptyListOfType ( coll , false ) ; \n result . put ( key , perKey ) ; \n } perKey . add ( o ) ; \n } return result ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/framing/ContinuousFrameTest.java", "className": "ContinuousFrameTest", "testName": "testExtends", "testMethod": "@Test\n public void testExtends ( ) {\n     ContinuousFrame frame = new ContinuousFrame ( ) ; \n     assertEquals(\"STR\",true,frameinstanceofDataFrame);\n}", "oracle": "assertEquals(\"STR\",true,frameinstanceofDataFrame);", "focalFile": "src/main/java/org/java_websocket/framing/ContinuousFrame.java", "focalName": "ContinuousFrame", "focalMethod": " public ContinuousFrame ( ) { \n super ( Opcode . CONTINUOUS ) ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "className": "ActivityStateTest", "testName": "testActivityState", "testMethod": "@Test\n public void testActivityState ( ) {\n     ActivityState activityState = new ActivityState ( ) ; \n     assertNotNull(activityState);\n}", "oracle": "assertNotNull(activityState);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focalName": "ActivityState", "focalMethod": " public ActivityState ( ) { \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "className": "ActivityStateTest", "testName": "testGetState", "testMethod": "@Test\n public void testGetState ( ) {\n     JsonObject expected = new JsonObject ( ) ; \n     expected . addProperty ( \"STR\" , \"STR\" ) ; \n     JsonObject actual = activityState . getState ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focalName": "getState", "focalMethod": " public JsonObject getState ( ) { \n return this . state ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "className": "VerbsTest", "testName": "testAttended", "testMethod": "@Test\n public void testAttended ( ) {\n     Verb actual = Verbs . attended ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focalName": "attended", "focalMethod": " public static Verb attended ( ) { \n return createVerb ( \"STR\" ) ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/ThreadSpawnerTest.java", "className": "ThreadSpawnerTest", "testName": "testThreadSpawnerException_reportException", "testMethod": "@Test\n public void testThreadSpawnerException_reportException ( ) {\n     File exceptionFile = new File ( getUserDir ( ) , \"STR\" ) ; \n     ThreadSpawner spawner = new ThreadSpawner ( \"STR\" ) ; \n     spawner . spawn ( new Runnable ( ) { \n @Override\n public void run ( ) { \n throw new CommandLineExitException ( \"STR\" ) ; \n } } ) ; \n     spawner . awaitCompletion ( ) ; \n     assertTrue(exceptionFile.exists());\n}", "oracle": "assertTrue(exceptionFile.exists());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/ThreadSpawner.java", "focalName": "awaitCompletion", "focalMethod": " public void awaitCompletion ( ) { \n for ( Thread thread : threads ) { \n try { \n thread . join ( ) ; \n } catch ( InterruptedException e ) { \n throw rethrow ( e ) ; \n } } if ( caughtException != null ) { \n throw rethrow ( caughtException ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/environment/BambooEnvironmentVariablesTest.java", "className": "BambooEnvironmentVariablesTest", "testName": "duplicates_bamboo_prefixed_env_vars_with_prefixless_copy", "testMethod": "@Test\n public void duplicates_bamboo_prefixed_env_vars_with_prefixless_copy ( ) {\n     HashMap < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Map < String , String > convertedEnv = new BambooEnvironmentVariables ( ) . convert ( env ) ; \n     assertEquals(\"STR\",convertedEnv.get(\"STR\"));\n}", "oracle": "assertEquals(\"STR\",convertedEnv.get(\"STR\"));", "focalFile": "src/main/java/io/cucumber/pro/environment/BambooEnvironmentVariables.java", "focalName": "convert", "focalMethod": " public Map < String , String > convert ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( String key : env . keySet ( ) ) { \n Matcher matcher = BAMBOO_PATTERN . matcher ( key ) ; \n if ( matcher . lookingAt ( ) ) { \n String value = env . get ( key ) ; \n String strippedVar = matcher . group ( 1 ) ; \n result . put ( strippedVar , value ) ; \n } } result . putAll ( env ) ; \n return result ; \n } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "className": "PuzzleTest", "testName": "blank_swap_leaves_original_as_is", "testMethod": "@Test\n public void blank_swap_leaves_original_as_is ( ) {\n     Puzzle p = new Puzzle ( getSolution ( ) ) ; \n     p . swapBlank ( 4 ) ; \n     assertEquals(8,p.getBlankIndex());\n}", "oracle": "assertEquals(8,p.getBlankIndex());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focalName": "getBlankIndex", "focalMethod": " public int getBlankIndex ( ) { \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n if ( cells [ i ] == blank ) { \n return i ; \n } } return - 1 ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "className": "PuzzleStateTest", "testName": "state_can_be_solution", "testMethod": "@Test\n public void state_can_be_solution ( ) {\n     Puzzle p = getSolvedPuzzle ( ) ; \n     PuzzleState s = new PuzzleState ( p ) ; \n     assertTrue(s.isSolution());\n}", "oracle": "assertTrue(s.isSolution());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focalName": "isSolution", "focalMethod": " public boolean isSolution ( ) { \n return puzzle . isSolved ( ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "className": "WildcardsTest", "testName": "testMatchesAgainstText", "testMethod": "@Test\n public void testMatchesAgainstText ( ) throws Exception {\n     assertTrue(Wildcards.matches(\"STR\",\"STR\"));\n}", "oracle": "assertTrue(Wildcards.matches(\"STR\",\"STR\"));", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/Wildcards.java", "focalName": "matches", "focalMethod": " public static boolean matches ( final String text , final String wildcard ) { \n String pattern = wildcard . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) ; \n return ( text != null && text . matches ( pattern ) ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "className": "OCompositeKeyTest", "testName": "testEqualNotSameKeys", "testMethod": "@Test\n public void testEqualNotSameKeys ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey anotherCompositeKey = new OCompositeKey ( ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     assertFalse(compositeKey.equals(anotherCompositeKey));\n}", "oracle": "assertFalse(compositeKey.equals(anotherCompositeKey));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focalName": "equals", "focalMethod": "@Override\n public boolean equals ( final Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n final OCompositeKey that = ( OCompositeKey ) o ; \n return keys . equals ( that . keys ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java", "className": "OCommandExecutorSQLCreatePropertyTest", "testName": "testDefaultAndMinMaxUnsafeProperty", "testMethod": "@Test\n public void testDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}", "oracle": "assertEquals(idProperty.getName(),PROP_ID);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focalName": "getName", "focalMethod": " public String getName ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/CheckClassTypeStepTest.java", "className": "CheckClassTypeStepTest", "testName": "shouldCheckSubclasses", "testMethod": "@Test\n public void shouldCheckSubclasses ( ) {\n     OBasicCommandContext context = new OBasicCommandContext ( ) ; \n     context . setDatabase ( database ) ; \n     OClass parentClass = createClassInstance ( ) ; \n     OClass childClass = createChildClassInstance ( parentClass ) ; \n     CheckClassTypeStep step = new CheckClassTypeStep ( childClass . getName ( ) , parentClass . getName ( ) , context , false ) ; \n     OResultSet result = step . syncPull ( context , 20 ) ; \n     Assert.assertEquals(0,result.stream().count());\n}", "oracle": "Assert.assertEquals(0,result.stream().count());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "stream", "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "client"], "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/ORemoteLiveQueryPushTest.java", "className": "ORemoteLiveQueryPushTest", "testName": "testLiveEvents", "testMethod": "@Test\n public void testLiveEvents ( ) {\n     MockLiveListener mock = new MockLiveListener ( ) ; \n     storage . registerLiveListener ( 10 , new OLiveQueryClientListener ( database , mock ) ) ; \n     List < OLiveQueryResult > events = new ArrayList < > ( ) ; \n     events . add ( new OLiveQueryResult ( OLiveQueryResult . CREATE_EVENT , new OResultInternal ( ) , null ) ) ; \n     events . add ( new OLiveQueryResult ( OLiveQueryResult . UPDATE_EVENT , new OResultInternal ( ) , new OResultInternal ( ) ) ) ; \n     events . add ( new OLiveQueryResult ( OLiveQueryResult . DELETE_EVENT , new OResultInternal ( ) , null ) ) ; \n     OLiveQueryPushRequest request = new OLiveQueryPushRequest ( 10 , OLiveQueryPushRequest . END , events ) ; \n     request . execute ( storage ) ; \n     assertEquals(mock.countCreate,1);\n}", "oracle": "assertEquals(mock.countCreate,1);", "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OLiveQueryPushRequest.java", "focalName": "execute", "focalMethod": "@Override\n public OBinaryPushResponse execute ( ORemotePushHandler remote ) { \n remote . executeLiveQueryPush ( this ) ; \n return null ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java", "className": "ODocumentSchemalessBinarySerializationTest", "testName": "testSimpleEmbeddedDoc", "testMethod": "@Test\n public void testSimpleEmbeddedDoc ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     ODocument embedded = new ODocument ( ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , embedded , OType . EMBEDDED ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(document.fields(),extr.fields());\n}", "oracle": "assertEquals(document.fields(),extr.fields());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "fields", "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "className": "SpringBootUtilTest", "testName": "testPropertiesParsing", "testMethod": "@Test\n public void testPropertiesParsing ( ) {\n     Properties props = SpringBootUtil . getPropertiesResource ( SpringBootUtilTest . class . getResource ( \"STR\" ) ) ; \n     assertNotEquals(0,props.size());\n}", "oracle": "assertNotEquals(0,props.size());", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/SpringBootUtil.java", "focalName": "getPropertiesResource", "focalMethod": " protected static Properties getPropertiesResource ( URL resource ) { \n Properties answer = new Properties ( ) ; \n if ( resource != null ) { \n try ( InputStream stream = resource . openStream ( ) ) { \n answer . load ( stream ) ; \n } catch ( IOException e ) { \n throw new IllegalStateException ( \"STR\" + resource , e ) ; \n } } return answer ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/ConfigsTest.java", "className": "ConfigsTest", "testName": "getPropertyValueTest", "testMethod": "@Test\n public void getPropertyValueTest ( ) {\n     properties . setProperty ( KEY_1 , value ) ; \n     System . setProperty ( KEY_2 , value ) ; \n     assertEquals(\"STR\",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));\n}", "oracle": "assertEquals(\"STR\",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/Configs.java", "focalName": "getSystemPropertyWithMavenPropertyAsFallback", "focalMethod": " public static String getSystemPropertyWithMavenPropertyAsFallback ( Properties properties , String key ) { \n String val = System . getProperty ( key ) ; \n if ( val == null && properties != null ) { \n val = properties . getProperty ( key ) ; \n } return val ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "className": "TokenizeTest", "testName": "singleletters", "testMethod": "@Test\n public void singleletters ( ) {\n     LinkedList < Word > tokens ; \n     tokens = Splitting . tokenize ( loc\u012bt\u0101js , \"STR\" , false ) ; \n     assertEquals(3,tokens.size());\n}", "oracle": "assertEquals(3,tokens.size());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java", "focalName": "tokenize", "focalMethod": " public static LinkedList < Word > tokenize ( Analyzer morphoAnalyzer , String chunk , boolean bruteSplit ) { \n if ( bruteSplit ) { \n LinkedList < Word > tokens = new LinkedList < Word > ( ) ; \n if ( chunk == null ) return tokens ; \n String [ ] parts_of_string = chunk . trim ( ) . split ( \"STR\" ) ; \n for ( String part : parts_of_string ) { \n if ( part . length ( ) > 0 ) tokens . add ( ( morphoAnalyzer == null ) ? new Word ( part ) : morphoAnalyzer . analyze ( part ) ) ; \n } return tokens ; \n } else { \n return tokenize ( morphoAnalyzer , chunk ) ; \n } } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/framing/PongFrameTest.java", "className": "PongFrameTest", "testName": "testExtends", "testMethod": "@Test\n public void testExtends ( ) {\n     PongFrame frame = new PongFrame ( ) ; \n     assertEquals(\"STR\",true,frameinstanceofControlFrame);\n}", "oracle": "assertEquals(\"STR\",true,frameinstanceofControlFrame);", "focalFile": "src/main/java/org/java_websocket/framing/PongFrame.java", "focalName": "PongFrame", "focalMethod": " public PongFrame ( ) { \n super ( Opcode . PONG ) ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "className": "ProtocolTest", "testName": "testCopyInstance", "testMethod": "@Test\n public void testCopyInstance ( ) throws Exception {\n     IProtocol protocol0 = new Protocol ( \"STR\" ) ; \n     IProtocol protoocl1 = protocol0 . copyInstance ( ) ; \n     assertEquals(protocol0,protoocl1);\n}", "oracle": "assertEquals(protocol0,protoocl1);", "focalFile": "src/main/java/org/java_websocket/protocols/IProtocol.java", "focalName": "copyInstance", "focalMethod": " IProtocol copyInstance ( ) ; \n", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "className": "RpcConnectionManagerTest", "testName": "testGet", "testMethod": "@Test\n public void testGet ( ) {\n     Connection pool = cm . get ( poolKey ) ; \n     Assert.assertNull(pool);\n}", "oracle": "Assert.assertNull(pool);", "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focalName": "get", "focalMethod": "@Override\n public Connection get ( String poolKey ) { \n ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n return null == pool ? null : pool . get ( ) ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "className": "CEFParserTest", "testName": "validMessageValidationAllExtenstionsTest", "testMethod": "@Test\n public void validMessageValidationAllExtenstionsTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     Assert.assertNotNull(parser.parse(sample1,true));\n}", "oracle": "Assert.assertNotNull(parser.parse(sample1,true));", "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focalName": "parse", "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/containers/mxf/ULTest.java", "className": "ULTest", "testName": "testULFromString", "testMethod": "@Test\n public void testULFromString ( ) {\n     UL expected = new UL ( new byte [ ] { \n ( byte ) 0xff , 0xb , 1 , 2 , ( byte ) 0xff , 0xb , 1 , 2 } ) ; \n     UL fromString = UL . newUL ( \"STR\" ) ; \n     Assert.assertEquals(expected,fromString);\n}", "oracle": "Assert.assertEquals(expected,fromString);", "focalFile": "src/main/java/org/jcodec/containers/mxf/model/UL.java", "focalName": "newUL", "focalMethod": " public static UL newUL ( String ul ) { \n checkNotNull ( ul ) ; \n String [ ] split = StringUtils . splitS ( ul , \"STR\" ) ; \n byte b [ ] = new byte [ split . length ] ; \n for ( int i = 0 ; \n i < split . length ; \n i ++ ) { \n int parseInt = Integer . parseInt ( split [ i ] , 16 ) ; \n b [ i ] = ( byte ) parseInt ; \n } return new UL ( b ) ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "className": "AListTest", "testName": "testFromJavaUtil", "testMethod": "@Test\n public void testFromJavaUtil ( ) {\n     final AList < String > l = AList . < String > nil ( ) . cons ( \"STR\" ) . cons ( \"STR\" ) . cons ( \"STR\" ) ; \n     final AList < String > l2 = AList . create ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) ) ; \n     final AList < String > l3 = AList . create ( ( Iterable < String > ) Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) ) ; \n     assertEquals(l,l2);\n}", "oracle": "assertEquals(l,l2);", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AList.java", "focalName": "create", "focalMethod": " public static < T > AList < T > create ( Iterable < T > elements ) { \n if ( elements instanceof AList ) { \n return ( AList < T > ) elements ; \n } if ( elements instanceof List ) { \n return create ( ( List < T > ) elements ) ; \n } AList < T > result = nil ( ) ; \n for ( T el : elements ) { \n result = result . cons ( el ) ; \n } return result . reverse ( ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "className": "AListTest", "testName": "testNil", "testMethod": "@Test\n public void testNil ( ) {\n     assertEquals(0,AList.nil().size());\n}", "oracle": "assertEquals(0,AList.nil().size());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AList.java", "focalName": "size", "focalMethod": " public int size ( ) { \n return size ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "className": "AJsonSerHelperTest", "testName": "testDoubleWithFrac1", "testMethod": "@Test\n public void testDoubleWithFrac1 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeNumberLiteral ( 1.23 , 1 ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}", "oracle": "assertEquals(\"STR\",result);", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focalName": "writeNumberLiteral", "focalMethod": " public void writeNumberLiteral ( double value , int numFracDigits ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n out . write ( new DecimalFormat ( PATTERNS [ numFracDigits ] , DECIMAL_FORMAT_SYMBOLS ) . format ( value ) ) ; \n afterValueWritten ( ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "className": "ADiGraphTest", "testName": "testNodesWithoutEdges", "testMethod": "@Test\n public void testNodesWithoutEdges ( ) {\n     final ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) , Arrays . asList ( edge ( \"STR\" , \"STR\" ) ) ) ; \n     assertTrue(eqSet(graph.edges(),edge(\"STR\",\"STR\")));\n}", "oracle": "assertTrue(eqSet(graph.edges(),edge(\"STR\",\"STR\")));", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java", "focalName": "edges", "focalMethod": " public Collection < E > edges ( ) { \n return new ArrayIterable < > ( edges ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "className": "OMatchStatementExecutionTest", "testName": "testFriendsWithName", "testMethod": "@Test\n public void testFriendsWithName ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}", "oracle": "assertEquals(1,qResult.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "className": "OPropertyMapIndexDefinitionTest", "testName": "testCreateValueWrongParameter", "testMethod": "@Test\n public void testCreateValueWrongParameter ( ) {\n     final Object result = propertyIndexByKey . createValue ( Collections . singletonList ( \"STR\" ) ) ; \n     Assert.assertNull(result);\n}", "oracle": "Assert.assertNull(result);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focalName": "createValue", "focalMethod": "@Override\n public Object createValue ( List < ? > params ) { \n if ( ! ( params . get ( 0 ) instanceof Map ) ) return null ; \n final Collection < ? > mapParams = extractMapParams ( ( Map < ? , ? > ) params . get ( 0 ) ) ; \n final List < Object > result = new ArrayList < Object > ( mapParams . size ( ) ) ; \n for ( final Object mapParam : mapParams ) { \n result . add ( createSingleValue ( mapParam ) ) ; \n } return result ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["basis-technology-corp", "tcl-regex-java", ""], "classPath": "src/test/java/apitests/MatcherTest.java", "className": "MatcherTest", "testName": "findPrefix", "testMethod": "@Test\n public void findPrefix ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}", "oracle": "assertTrue(matcher.find());", "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java", "focalName": "find", "focalMethod": " boolean find ( ) ; \n", "commitid": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "className": "CABACTest", "testName": "testMBSkipFlag", "testMethod": "@Test\n public void testMBSkipFlag ( ) {\n     CABAC cabac = new CABAC ( 2 ) ; \n     MockMDecoder m = new MockMDecoder ( new int [ ] { \n 0 } , new int [ ] { \n 11 } ) ; \n     Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));\n}", "oracle": "Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));", "focalFile": "src/main/java/org/jcodec/codecs/h264/io/CABAC.java", "focalName": "readMBSkipFlag", "focalMethod": " public boolean readMBSkipFlag ( MDecoder mDecoder , SliceType slType , boolean leftAvailable , boolean topAvailable , int mbX ) { \n int base = slType == SliceType . P ? 11 : 24 ; \n boolean ret = mDecoder . decodeBin ( base + ( leftAvailable && ! skipFlagLeft ? 1 : 0 ) + ( topAvailable && ! skipFlagsTop [ mbX ] ? 1 : 0 ) ) == 1 ; \n skipFlagLeft = skipFlagsTop [ mbX ] = ret ; \n return ret ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/scale/Yuv420pToRgbTest.java", "className": "Yuv420pToRgbTest", "testName": "testYuv420pToRgbH2H", "testMethod": "@Test\n public void testYuv420pToRgbH2H ( ) {\n     Yuv420pToRgb transform = new Yuv420pToRgb ( ) ; \n     Picture _in = Picture . createPictureHiBD ( 4 , 4 , new byte [ ] [ ] { \n yH , uH , vH } , new byte [ ] [ ] { \n yL , uL , vL } , ColorSpace . YUV420 , 2 ) ; \n     Picture out = Picture . createCroppedHiBD ( 4 , 4 , 2 , ColorSpace . RGB , null ) ; \n     transform . transform ( _in , out ) ; \n     Assert.assertArrayEquals(rgbH,out.getPlaneData(0));\n}", "oracle": "Assert.assertArrayEquals(rgbH,out.getPlaneData(0));", "focalFile": "src/main/java/org/jcodec/common/model/Picture.java", "focalName": "getPlaneData", "focalMethod": " public byte [ ] getPlaneData ( int plane ) { \n return data [ plane ] ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["rhwayfun", "spring-boot-rocketmq-starter", ""], "classPath": "src/test/java/io/github/rhwayfun/springboot/rocketmq/starter/config/RocketMqAutoConfigurationTest.java", "className": "RocketMqAutoConfigurationTest", "testName": "defaultRocketMqProducer", "testMethod": "@Test\n public void defaultRocketMqProducer ( ) {\n     load ( \"STR\" + TEST_NAME_SERVER , \"STR\" + TEST_PRODUCER_GROUP ) ; \n     Assert.assertTrue(this.context.containsBean(\"STR\"));\n}", "oracle": "Assert.assertTrue(this.context.containsBean(\"STR\"));", "focalFile": "src/main/java/io/github/rhwayfun/springboot/rocketmq/starter/common/DefaultRocketMqProducer.java", "focalName": "getProducer", "focalMethod": " public DefaultMQProducer getProducer ( ) { \n return producer ; \n } ", "commitid": "642a6745434e3f7ea2e6bca42d3b8f450590441c"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/parse/TextExtractorTest.java", "className": "TextExtractorTest", "testName": "testExclusionCase", "testMethod": "@Test\n public void testExclusionCase ( ) throws IOException {\n     Config conf = new Config ( ) ; \n     conf . put ( TextExtractor . EXCLUDE_PARAM_NAME , \"STR\" ) ; \n     TextExtractor extractor = new TextExtractor ( conf ) ; \n     String content = \"STR\" ; \n     Document jsoupDoc = Parser . htmlParser ( ) . parseInput ( content , \"STR\" ) ; \n     String text = extractor . text ( jsoupDoc . body ( ) ) ; \n     assertEquals(\"STR\",text);\n}", "oracle": "assertEquals(\"STR\",text);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/parse/TextExtractor.java", "focalName": "text", "focalMethod": " public String text ( Element element ) { \n if ( noText ) return \"STR\" ; \n if ( inclusionPatterns . size ( ) == 0 && excludedTags . size ( ) == 0 ) { \n return _text ( element ) ; \n } Elements matches = new Elements ( ) ; \n for ( String pattern : inclusionPatterns ) { \n matches = element . select ( pattern ) ; \n if ( ! matches . isEmpty ( ) ) break ; \n } if ( matches . isEmpty ( ) ) { \n matches . add ( element ) ; \n } final StringBuilder accum = new StringBuilder ( ) ; \n for ( Element node : matches ) { \n accum . append ( _text ( node ) ) . append ( \"STR\" ) ; \n } return accum . toString ( ) . trim ( ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MetadataFilterTest.java", "className": "MetadataFilterTest", "testName": "testFilterNoMD", "testMethod": "@Test\n public void testFilterNoMD ( ) throws MalformedURLException {\n     URLFilter filter = createFilter ( \"STR\" , \"STR\" ) ; \n     URL url = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ; \n     Assert.assertEquals(url.toExternalForm(),filterResult);\n}", "oracle": "Assert.assertEquals(url.toExternalForm(),filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focalName": "filter", "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "className": "BasicIndexingTest", "testName": "testOtherHostCanonicalURL", "testMethod": "@Test\n public void testOtherHostCanonicalURL ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     config . put ( AbstractIndexerBolt . canonicalMetadataParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focalName": "setValue", "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["javadev", "moneytostr-russian", ""], "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "className": "MoneyToStrTest", "testName": "checkEURRUSCustom", "testMethod": "@Test\n public void checkEURRUSCustom ( ) {\n     assertEquals(\"STR\",moneyToStrCustom.convert(V_300D));\n}", "oracle": "assertEquals(\"STR\",moneyToStrCustom.convert(V_300D));", "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focalName": "convert", "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } ", "commitid": "d39c8729e15292d4f3d38ddbae68977f170f482b"}
{"project": ["javadev", "moneytostr-russian", ""], "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "className": "MoneyToStrTest", "testName": "checkEURRUS", "testMethod": "@Test\n public void checkEURRUS ( ) {\n     assertEquals(\"STR\",moneyToStrEURRUS.convert(V_300D));\n}", "oracle": "assertEquals(\"STR\",moneyToStrEURRUS.convert(V_300D));", "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focalName": "convert", "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } ", "commitid": "d39c8729e15292d4f3d38ddbae68977f170f482b"}
{"project": ["javadev", "moneytostr-russian", ""], "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "className": "MoneyToStrTest", "testName": "checkRURUKR", "testMethod": "@Test\n public void checkRURUKR ( ) {\n     assertEquals(\"STR\",moneyToStrRUR.convert(V_300D));\n}", "oracle": "assertEquals(\"STR\",moneyToStrRUR.convert(V_300D));", "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focalName": "convert", "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } ", "commitid": "d39c8729e15292d4f3d38ddbae68977f170f482b"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "className": "PuzzleTest", "testName": "puzzle_can_swap_blank", "testMethod": "@Test\n public void puzzle_can_swap_blank ( ) {\n     Puzzle p = new Puzzle ( getSolution ( ) ) ; \n     Puzzle c = p . swapBlank ( 4 ) ; \n     assertEquals(4,c.getBlankIndex());\n}", "oracle": "assertEquals(4,c.getBlankIndex());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focalName": "getBlankIndex", "focalMethod": " public int getBlankIndex ( ) { \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n if ( cells [ i ] == blank ) { \n return i ; \n } } return - 1 ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["myabc", "markdownj", "core"], "classPath": "core/src/test/java/org/markdownj/test/EdgeCases.java", "className": "EdgeCases", "testName": "testSpaces", "testMethod": "@Test\n public void testSpaces ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\"));\n}", "oracle": "assertEquals(\"STR\",m.markdown(\"STR\"));", "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focalName": "markdown", "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } ", "commitid": "f8ed00caeb69fc602aa2209812d953c26c2a4263"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/GeneralTest.java", "className": "GeneralTest", "testName": "testGetName", "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newGeneral(env()).getName());\n}", "oracle": "assertEquals(\"STR\",newGeneral(env()).getName());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/General.java", "focalName": "getName", "focalMethod": "@Override\n public String getName ( ) { \n return getProperty ( CI_NAME ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "className": "TravisTest", "testName": "testGetPullRequest", "testMethod": "@Test\n public void testGetPullRequest ( ) {\n     assertEquals(\"STR\",newTravis(env()).getPullRequest());\n}", "oracle": "assertEquals(\"STR\",newTravis(env()).getPullRequest());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Travis.java", "focalName": "getPullRequest", "focalMethod": "@Override\n public String getPullRequest ( ) { \n return getProperty ( TRAVIS_PULL_REQUEST ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "className": "PerMessageDeflateExtensionTest", "testName": "testGetInflater", "testMethod": "@Test\n public void testGetInflater ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());\n}", "oracle": "assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());", "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java", "focalName": "getInflater", "focalMethod": " public Inflater getInflater ( ) { \n return inflater ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "ts", "testMethod": "@Test\n public void ts ( ) {\n     Word nop\u016bsts = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(nop\u016bsts.isRecognized());\n}", "oracle": "assertTrue(nop\u016bsts.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "className": "JMXRemoteUrlConnectionFactoryTest", "testName": "testGetSetLog", "testMethod": "@Test\n public void testGetSetLog ( ) throws Exception {\n     assertNotNull(this.factory.getLog());\n}", "oracle": "assertNotNull(this.factory.getLog());", "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactory.java", "focalName": "getLog", "focalMethod": " public Logger getLog ( ) { \n return log ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/InstallFeatureUtilTest.java", "className": "InstallFeatureUtilTest", "testName": "testCombineToSet", "testMethod": "@Test\n public void testCombineToSet ( ) throws Exception {\n     Set < String > a = new HashSet < String > ( ) ; \n     a . add ( \"STR\" ) ; \n     a . add ( \"STR\" ) ; \n     List < String > b = new ArrayList < String > ( ) ; \n     b . add ( \"STR\" ) ; \n     b . add ( \"STR\" ) ; \n     List < String > c = new ArrayList < String > ( ) ; \n     c . add ( \"STR\" ) ; \n     c . add ( \"STR\" ) ; \n     Set < String > result = InstallFeatureUtil . combineToSet ( a , b , c ) ; \n     assertEquals(5,result.size());\n}", "oracle": "assertEquals(5,result.size());", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/InstallFeatureUtil.java", "focalName": "combineToSet", "focalMethod": "@SafeVarargs\n public static Set < String > combineToSet ( Collection < String > ... collections ) { \n Set < String > result = new HashSet < String > ( ) ; \n Set < String > lowercaseSet = new HashSet < String > ( ) ; \n for ( Collection < String > collection : collections ) { \n if ( collection != null ) { \n for ( String value : collection ) { \n if ( ! lowercaseSet . contains ( value . toLowerCase ( ) ) ) { \n lowercaseSet . add ( value . toLowerCase ( ) ) ; \n result . add ( value ) ; \n } } } } return result ; \n } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/rpc/serializer/ClassCustomSerializerTest.java", "className": "ClassCustomSerializerTest", "testName": "testNormalCustomSerializer", "testMethod": "@Test\n public void testNormalCustomSerializer ( ) throws Exception {\n     NormalRequestBodyCustomSerializer s1 = new NormalRequestBodyCustomSerializer ( ) ; \n     NormalStringCustomSerializer s2 = new NormalStringCustomSerializer ( ) ; \n     CustomSerializerManager . registerCustomSerializer ( RequestBody . class . getName ( ) , s1 ) ; \n     CustomSerializerManager . registerCustomSerializer ( String . class . getName ( ) , s2 ) ; \n     RequestBody body = new RequestBody ( 1 , \"STR\" ) ; \n     String ret = ( String ) client . invokeSync ( addr , body , 1000 ) ; \n     Assert.assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+\"STR\",ret);\n}", "oracle": "Assert.assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+\"STR\",ret);", "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focalName": "invokeSync", "focalMethod": "@Override\n public Object invokeSync ( final String address , final Object request , final int timeoutMillis ) throws RemotingException , InterruptedException { \n ensureStarted ( ) ; \n return this . rpcRemoting . invokeSync ( address , request , null , timeoutMillis ) ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/rpc/RpcConfigManagerTest.java", "className": "RpcConfigManagerTest", "testName": "testSystemSettings", "testMethod": "@Test\n public void testSystemSettings ( ) {\n     Assert.assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());\n}", "oracle": "Assert.assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());", "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcConfigManager.java", "focalName": "dispatch_msg_list_in_default_executor", "focalMethod": " public static boolean dispatch_msg_list_in_default_executor ( ) { \n return ConfigManager . getBool ( RpcConfigs . DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR , RpcConfigs . DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR_DEFAULT ) ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLJsonExtractorTest.java", "className": "OETLJsonExtractorTest", "testName": "testEmptyCollection", "testMethod": "@Test\n public void testEmptyCollection ( ) {\n     configure ( \"STR\" ) ; \n     proc . execute ( ) ; \n     assertEquals(0,getResult().size());\n}", "oracle": "assertEquals(0,getResult().size());", "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focalName": "execute", "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "className": "OMatchStatementExecutionTest", "testName": "testOptional3", "testMethod": "@Test\n public void testOptional3 ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}", "oracle": "assertEquals(1,qResult.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "className": "ODirtyManagerTest", "testName": "testLink", "testMethod": "@Test\n public void testLink ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     doc . field ( \"STR\" , doc2 ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(2,manager.getNewRecords().size());\n}", "oracle": "assertEquals(2,manager.getNewRecords().size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java", "focalName": "getNewRecords", "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java", "className": "FloatSerializerTest", "testName": "testFieldSize", "testMethod": "@Test\n public void testFieldSize ( ) {\n     Assert.assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);\n}", "oracle": "Assert.assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);", "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java", "focalName": "getObjectSize", "focalMethod": " public int getObjectSize ( Float object , Object ... hints ) { \n return FLOAT_SIZE ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeysTest.java", "className": "OSQLMethodKeysTest", "testName": "testWithOResult", "testMethod": "@Test\n public void testWithOResult ( ) {\n     OResultInternal resultInternal = new OResultInternal ( ) ; \n     resultInternal . setProperty ( \"STR\" , \"STR\" ) ; \n     resultInternal . setProperty ( \"STR\" , \"STR\" ) ; \n     Object result = function . execute ( null , null , null , resultInternal , null ) ; \n     assertEquals(newLinkedHashSet(Arrays.asList(\"STR\",\"STR\")),result);\n}", "oracle": "assertEquals(newLinkedHashSet(Arrays.asList(\"STR\",\"STR\")),result);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeys.java", "focalName": "execute", "focalMethod": "@Override\n public Object execute ( Object iThis , OIdentifiable iCurrentRecord , OCommandContext iContext , Object ioResult , Object [ ] iParams ) { \n if ( ioResult instanceof Map ) { \n return ( ( Map < ? , ? > ) ioResult ) . keySet ( ) ; \n } if ( ioResult instanceof ODocument ) { \n return Arrays . asList ( ( ( ODocument ) ioResult ) . fieldNames ( ) ) ; \n } if ( ioResult instanceof OResult ) { \n OResult res = ( OResult ) ioResult ; \n return res . getPropertyNames ( ) ; \n } if ( ioResult instanceof Collection ) { \n List result = new ArrayList ( ) ; \n for ( Object o : ( Collection ) ioResult ) { \n result . addAll ( ( Collection ) execute ( iThis , iCurrentRecord , iContext , o , iParams ) ) ; \n } return result ; \n } return null ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "className": "OETLCSVExtractorTest", "testName": "testNullValueInCellEmptyString", "testMethod": "@Test\n public void testNullValueInCellEmptyString ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}", "oracle": "assertFalse(res.isEmpty());", "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focalName": "execute", "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "className": "ObjectQueryPreparerTest", "testName": "testPrepareObjectNoSetters", "testMethod": "@Test\n public void testPrepareObjectNoSetters ( ) throws Exception {\n     this . initPreparer ( ) ; \n     ObjectQueryInfo result = this . preparer . prepareObjectQuery ( this . testTarget003 ) ; \n     assertNull(result);\n}", "oracle": "assertNull(result);", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryPreparer.java", "focalName": "prepareObjectQuery", "focalMethod": " public ObjectQueryInfo prepareObjectQuery ( Object obj ) throws MalformedObjectNameException { \n ObjectQueryInfo result ; \n String onamePattern = MBeanAnnotationUtil . getLocationONamePattern ( obj ) ; \n if ( onamePattern != null ) { \n Map < String , Method > attributeSetters = MBeanAnnotationUtil . getAttributes ( obj ) ; \n if ( attributeSetters . size ( ) > 0 ) { \n String onameString ; \n if ( obj instanceof MBeanLocationParameterSource ) { \n onameString = this . parameterReplacer . replaceObjectNameParameters ( onamePattern , ( MBeanLocationParameterSource ) obj ) ; \n } else { \n onameString = onamePattern ; \n } ObjectName oname = new ObjectName ( onameString ) ; \n result = new ObjectQueryInfo ( obj , oname , attributeSetters ) ; \n } else { \n this . logNoAttributeThrottle . warn ( log , \"STR\" , onamePattern ) ; \n result = null ; \n } } else { \n log . warn ( \"STR\" ) ; \n result = null ; \n } return result ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["nidi3", "graphviz-java", "graphviz-java"], "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "className": "LabelTest", "testName": "external", "testMethod": "@Test\n void external ( ) {\n     assertEquals(attrs(attr(\"STR\",label.external())),attrs(label.external()));\n}", "oracle": "assertEquals(attrs(attr(\"STR\",label.external())),attrs(label.external()));", "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java", "focalName": "attrs", "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } ", "commitid": "dcbd021a903a4114dd087ef9acec5650b92c89b2"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_nestedPropertiesTest.java", "className": "PropertyBindingSupport_nestedPropertiesTest", "testName": "testReconstructObjectGraph", "testMethod": "@Test\n public void testReconstructObjectGraph ( ) {\n     TestCase testCase = new TestCase ( \"STR\" ) . setProperty ( \"STR\" , 10 ) ; \n     Person person = new Person ( ) ; \n     Set < String > usedProperties = bindAll ( person , testCase ) ; \n     assertNotNull(person.nullArm);\n}", "oracle": "assertNotNull(person.nullArm);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focalName": "bindAll", "focalMethod": " public static Set < String > bindAll ( Object instance , TestCase testCase ) { \n Set < String > usedProperties = new HashSet < > ( ) ; \n for ( Map . Entry < String , String > entry : testCase . getProperties ( ) . entrySet ( ) ) { \n String fullPropertyPath = entry . getKey ( ) . trim ( ) ; \n String value = entry . getValue ( ) . trim ( ) ; \n if ( bind0 ( instance , fullPropertyPath , value ) ) { \n usedProperties . add ( fullPropertyPath ) ; \n } } return usedProperties ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "className": "WorkerQueryTest", "testName": "targetType_whenMember", "testMethod": "@Test\n public void targetType_whenMember ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     List < WorkerData > result = new WorkerQuery ( ) . setTargetType ( TargetType . MEMBER ) . execute ( list ) ; \n     assertEquals(asList(list.get(1),list.get(3)),result);\n}", "oracle": "assertEquals(asList(list.get(1),list.get(3)),result);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java", "focalName": "execute", "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/MergeResourceTest.java", "className": "MergeResourceTest", "testName": "testMergeDeploymentMetadataWithNoSpec", "testMethod": "@Test\n public void testMergeDeploymentMetadataWithNoSpec ( ) throws Exception {\n     Deployment resource = new DeploymentBuilder ( ) . withNewMetadata ( ) . withName ( \"STR\" ) . addToAnnotations ( \"STR\" , \"STR\" ) . addToAnnotations ( \"STR\" , \"STR\" ) . addToAnnotations ( \"STR\" , \"STR\" ) . addToAnnotations ( \"STR\" , \"STR\" ) . endMetadata ( ) . withNewSpec ( ) . withNewTemplate ( ) . withNewSpec ( ) . addNewContainer ( ) . withImage ( \"STR\" ) . endContainer ( ) . endSpec ( ) . endTemplate ( ) . endSpec ( ) . build ( ) ; \n     Deployment override = new DeploymentBuilder ( ) . withNewMetadata ( ) . withName ( \"STR\" ) . addToAnnotations ( \"STR\" , \"STR\" ) . addToAnnotations ( \"STR\" , \"STR\" ) . endMetadata ( ) . build ( ) ; \n     HasMetadata answer = KubernetesResourceUtil . mergeResources ( resource , override , log , false ) ; \n     assertNotNull(answer);\n}", "oracle": "assertNotNull(answer);", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/kubernetes/KubernetesResourceUtil.java", "focalName": "mergeResources", "focalMethod": " public static HasMetadata mergeResources ( HasMetadata item1 , HasMetadata item2 , Logger log , boolean switchOnLocalCustomisation ) { \n if ( item1 instanceof Deployment && item2 instanceof Deployment ) { \n return mergeDeployments ( ( Deployment ) item1 , ( Deployment ) item2 , log , switchOnLocalCustomisation ) ; \n } if ( item1 instanceof ConfigMap && item2 instanceof ConfigMap ) { \n ConfigMap cm1 = ( ConfigMap ) item1 ; \n ConfigMap cm2 = ( ConfigMap ) item2 ; \n return mergeConfigMaps ( cm1 , cm2 , log , switchOnLocalCustomisation ) ; \n } mergeMetadata ( item1 , item2 ) ; \n return item1 ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "className": "DevUtilTest", "testName": "testReadFileToString", "testMethod": "@Test\n public void testReadFileToString ( ) throws Exception {\n     File tempFile = new File ( serverDirectory , \"STR\" ) ; \n     Files . write ( tempFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     String fileString = util . readFile ( tempFile ) ; \n     assertTrue(fileString.equals(\"STR\"));\n}", "oracle": "assertTrue(fileString.equals(\"STR\"));", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "readFile", "focalMethod": " public String readFile ( File file ) throws IOException { \n return FileUtils . readFileToString ( file , StandardCharsets . UTF_8 ) ; \n } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "className": "DevUtilTest", "testName": "testDeleteFile", "testMethod": "@Test\n public void testDeleteFile ( ) throws Exception {\n     File tempSrcFile = new File ( srcDir , \"STR\" ) ; \n     Files . write ( tempSrcFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     File tempTargetFile = new File ( targetDir , \"STR\" ) ; \n     Files . write ( tempTargetFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     assertTrue(tempSrcFile.exists());\n}", "oracle": "assertTrue(tempSrcFile.exists());", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "deleteFile", "focalMethod": " protected void deleteFile ( File deletedFile , File dir , File targetDir , String targetFileName ) throws IOException { \n File targetFile = getTargetFile ( deletedFile , dir , targetDir , targetFileName ) ; \n if ( targetFile . exists ( ) ) { \n if ( targetFile . isDirectory ( ) ) { \n try { \n FileUtils . deleteDirectory ( targetFile ) ; \n info ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" ) ; \n } catch ( IllegalArgumentException e ) { \n debug ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" + e . getMessage ( ) ) ; \n } catch ( IOException e ) { \n error ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" + e . getMessage ( ) ) ; \n } } else { \n if ( targetFile . delete ( ) ) { \n info ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" ) ; \n } else { \n error ( \"STR\" + targetFile . getCanonicalPath ( ) + \"STR\" ) ; \n } } } } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "ticket37", "testMethod": "@Test\n public void ticket37 ( ) {\n     loc\u012bt\u0101js . enablePrefixes = true ; \n     Word panest = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(panest.isRecognized());\n}", "oracle": "assertTrue(panest.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "apvidv\u0101rdi", "testMethod": "@Test\n public void apvidv\u0101rdi ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertFalse(w.isRecognized());\n}", "oracle": "assertFalse(w.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "className": "TokenizeTest", "testName": "p\u0113di\u0146as", "testMethod": "@Test\n public void p\u0113di\u0146as ( ) {\n     LinkedList < LinkedList < Word > > sentences ; \n     sentences = Splitting . tokenizeSentences ( loc\u012bt\u0101js , \"STR\" ) ; \n     assertEquals(1,sentences.size());\n}", "oracle": "assertEquals(1,sentences.size());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java", "focalName": "tokenizeSentences", "focalMethod": " public static LinkedList < LinkedList < Word > > tokenizeSentences ( Analyzer morphoAnalyzer , String paragraph ) { \n return tokenizeSentences ( morphoAnalyzer , paragraph , DEFAULT_SENTENCE_LENGTH_CAP ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["open-korean-text", "open-korean-text", ""], "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "className": "OpenKoreanProcessorJavaTest", "testName": "testAddWordsToDictionary", "testMethod": "@Test\n public void testAddWordsToDictionary ( ) {\n     String text = \"STR\" ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n}", "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());", "focalFile": "src/main/java/org/openkoreantext/processor/KoreanTokenJava.java", "focalName": "getPos", "focalMethod": " public KoreanPosJava getPos ( ) { \n return pos ; \n } ", "commitid": "95bf003beb3b357fcb16f94d4f595613cf7c5276"}
{"project": ["Yubico", "yubico-java-client", "v2client"], "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "className": "YubicoClientTest", "testName": "testLongOTP", "testMethod": "@Test\n public void testLongOTP ( ) {\n     String otp = \"STR\" ; \n     assertFalse(YubicoClient.isValidOTPFormat(otp));\n}", "oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));", "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focalName": "isValidOTPFormat", "focalMethod": " public static boolean isValidOTPFormat ( String otp ) { \n if ( otp == null ) { \n return false ; \n } int len = otp . length ( ) ; \n for ( char c : otp . toCharArray ( ) ) { \n if ( c < 0x20 || c > 0x7E ) { \n return false ; \n } } return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN ; \n } ", "commitid": "e21fb672e290a118f7420daaf81ccb96d319d52c"}
{"project": ["tradier", "dropwizard-raven", ""], "classPath": "src/test/java/com/tradier/raven/filters/DroppingRavenLoggingFilterTest.java", "className": "DroppingRavenLoggingFilterTest", "testName": "verifyFilterAllowsNonSentryLoggers", "testMethod": "@Test\n public void verifyFilterAllowsNonSentryLoggers ( ) {\n     final DroppingRavenLoggingFilter filter = new DroppingRavenLoggingFilter ( ) ; \n     filter . start ( ) ; \n     final LoggingEvent evt = new LoggingEvent ( ) ; \n     evt . setLoggerName ( \"STR\" ) ; \n     assertEquals(FilterReply.NEUTRAL,filter.decide(evt));\n}", "oracle": "assertEquals(FilterReply.NEUTRAL,filter.decide(evt));", "focalFile": "src/main/java/com/tradier/raven/filters/DroppingRavenLoggingFilter.java", "focalName": "decide", "focalMethod": "@Override\n public FilterReply decide ( ILoggingEvent event ) { \n if ( event . getLoggerName ( ) . startsWith ( \"STR\" ) ) { \n return FilterReply . DENY ; \n } else { \n return FilterReply . NEUTRAL ; \n } } ", "commitid": "117c78b4879ba930d0187ae2874773646213d3d2"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "className": "StringUtilsTest", "testName": "testIsEmpty", "testMethod": "@Test\n public void testIsEmpty ( ) throws Exception {\n     assertFalse(StringUtils.isEmpty(\"STR\"));\n}", "oracle": "assertFalse(StringUtils.isEmpty(\"STR\"));", "focalFile": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focalName": "isEmpty", "focalMethod": " public static boolean isEmpty ( String string ) { \n return ! isNonZero ( string ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "className": "PropertyBindingSupport_bind0_NumericalTest", "testName": "bind_short_whitespace", "testMethod": "@Test\n public void bind_short_whitespace ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}", "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focalName": "bind0", "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java", "className": "TestContainer_BasicTest", "testName": "testConstructor_withTestClassInstance", "testMethod": "@Test\n public void testConstructor_withTestClassInstance ( ) {\n     SuccessTest test = new SuccessTest ( ) ; \n     testContainer = new TestContainer ( testContext , test , new TestCase ( \"STR\" ) ) ; \n     assertEquals(test,testContainer.getTestInstance());\n}", "oracle": "assertEquals(test,testContainer.getTestInstance());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java", "focalName": "getTestInstance", "focalMethod": " public Object getTestInstance ( ) { \n return testInstance ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/graph/OSQLFunctionAstarTest.java", "className": "OSQLFunctionAstarTest", "testName": "test6Execute", "testMethod": "@Test\n public void test6Execute ( ) throws Exception {\n     Map < String , Object > options = new HashMap < String , Object > ( ) ; \n     options . put ( OSQLFunctionAstar . PARAM_DIRECTION , \"STR\" ) ; \n     options . put ( OSQLFunctionAstar . PARAM_PARALLEL , true ) ; \n     options . put ( OSQLFunctionAstar . PARAM_EDGE_TYPE_NAMES , new String [ ] { \n \"STR\" } ) ; \n     options . put ( OSQLFunctionAstar . PARAM_VERTEX_AXIS_NAMES , new String [ ] { \n \"STR\" , \"STR\" } ) ; \n     final List < OrientVertex > result = functionAstar . execute ( null , null , null , new Object [ ] { \n v6 , v1 , \"STR\" , options } , new OBasicCommandContext ( ) ) ; \n     assertEquals(16,graph.countEdges(\"STR\"));\n}", "oracle": "assertEquals(16,graph.countEdges(\"STR\"));", "focalFile": "graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientBaseGraph.java", "focalName": "countEdges", "focalMethod": " public long countEdges ( final String iClassName ) { \n makeActive ( ) ; \n if ( isUseLightweightEdges ( ) ) throw new UnsupportedOperationException ( \"STR\" ) ; \n return getRawGraph ( ) . countClass ( iClassName ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "server"], "classPath": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "className": "RemoteTransactionSupportTest", "testName": "testQueryUpdateCreatedInTxTransaction", "testMethod": "@Test\n public void testQueryUpdateCreatedInTxTransaction ( ) throws InterruptedException {\n     database . begin ( ) ; \n     ODocument doc1 = new ODocument ( \"STR\" ) ; \n     doc1 . setProperty ( \"STR\" , \"STR\" ) ; \n     OIdentifiable id = database . save ( doc1 ) ; \n     ODocument docx = new ODocument ( \"STR\" ) ; \n     docx . setProperty ( \"STR\" , \"STR\" ) ; \n     database . save ( docx ) ; \n     OResultSet result = database . command ( \"STR\" ) ; \n     assertTrue(result.hasNext());\n}", "oracle": "assertTrue(result.hasNext());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "hasNext", "focalMethod": "@Override\n boolean hasNext ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "className": "OScriptExecutionTest", "testName": "testReturnInIf2", "testMethod": "@Test\n public void testReturnInIf2 ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     OResultSet result = db . execute ( \"STR\" , script ) ; \n     OResult item = result . next ( ) ; \n     Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));\n}", "oracle": "Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focalName": "getProperty", "focalMethod": " < T > T getProperty ( String name ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/ODocumentTrackingNestedCollectionsTest.java", "className": "ODocumentTrackingNestedCollectionsTest", "testName": "testChangesValuesNestedTrackingSet", "testMethod": "@Test\n public void testChangesValuesNestedTrackingSet ( ) {\n     ODocument document = new ODocument ( ) ; \n     Set objects = new HashSet ( ) ; \n     document . field ( \"STR\" , objects ) ; \n     Set subObjects = new HashSet ( ) ; \n     objects . add ( subObjects ) ; \n     ODocument nestedDoc = new ODocument ( ) ; \n     subObjects . add ( nestedDoc ) ; \n     document . save ( db . getClusterNameById ( db . getDefaultClusterId ( ) ) ) ; \n     objects = document . field ( \"STR\" ) ; \n     subObjects = ( Set ) objects . iterator ( ) . next ( ) ; \n     subObjects . add ( \"STR\" ) ; \n     OMultiValueChangeTimeLine < Object , Object > timeLine = document . getCollectionTimeLine ( \"STR\" ) ; \n     assertEquals(1,timeLine.getMultiValueChangeEvents().size());\n}", "oracle": "assertEquals(1,timeLine.getMultiValueChangeEvents().size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/record/OMultiValueChangeTimeLine.java", "focalName": "getMultiValueChangeEvents", "focalMethod": " public List < OMultiValueChangeEvent < K , V > > getMultiValueChangeEvents ( ) { \n return Collections . unmodifiableList ( multiValueChangeEvents ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "className": "OMatchStatementExecutionTest", "testName": "testFriendsWithNameArrows", "testMethod": "@Test\n public void testFriendsWithNameArrows ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}", "oracle": "assertEquals(1,qResult.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focalName": "execute", "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/common/model/PictureTest.java", "className": "PictureTest", "testName": "testToAndFrom", "testMethod": "@Test\n public void testToAndFrom ( ) throws Exception {\n     int [ ] Y = randomIntArray ( 4096 , 4 , 1019 ) ; \n     int [ ] U = randomIntArray ( 2048 , 4 , 1019 ) ; \n     int [ ] V = randomIntArray ( 2048 , 4 , 1019 ) ; \n     PictureHiBD pictureHbd = PictureHiBD . createPictureWithDepth ( 64 , 64 , new int [ ] [ ] { \n Y , U , V } , ColorSpace . YUV422 , 10 ) ; \n     Picture picture = Picture . fromPictureHiBD ( pictureHbd ) ; \n     PictureHiBD resultHbd = picture . toPictureHiBD ( ) ; \n     Assert.assertArrayEquals(Y,resultHbd.getPlaneData(0));\n}", "oracle": "Assert.assertArrayEquals(Y,resultHbd.getPlaneData(0));", "focalFile": "src/main/java/org/jcodec/common/model/PictureHiBD.java", "focalName": "getPlaneData", "focalMethod": " public int [ ] getPlaneData ( int plane ) { \n return data [ plane ] ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "className": "AJsonSerHelperTest", "testName": "testDoubleWithFrac0", "testMethod": "@Test\n public void testDoubleWithFrac0 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeNumberLiteral ( 1.23 , 0 ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}", "oracle": "assertEquals(\"STR\",result);", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focalName": "writeNumberLiteral", "focalMethod": " public void writeNumberLiteral ( double value , int numFracDigits ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n out . write ( new DecimalFormat ( PATTERNS [ numFracDigits ] , DECIMAL_FORMAT_SYMBOLS ) . format ( value ) ) ; \n afterValueWritten ( ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["ExpediaGroup", "beeju", ""], "classPath": "src/test/java/com/hotels/beeju/core/BeejuCoreTest.java", "className": "BeejuCoreTest", "testName": "deleteDirectory", "testMethod": "@Test\n public void deleteDirectory ( ) throws IOException {\n     BeejuCore testCore = new BeejuCore ( ) ; \n     testCore . cleanUp ( ) ; \n     assertFalse(Files.exists(testCore.warehouseDir()));\n}", "oracle": "assertFalse(Files.exists(testCore.warehouseDir()));", "focalFile": "src/main/java/com/hotels/beeju/core/BeejuCore.java", "focalName": "warehouseDir", "focalMethod": " public Path warehouseDir ( ) { \n return warehouseDir ; \n } ", "commitid": "2263c4aac9a96e93328cdff7b5d31e1a795d885e"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "className": "MaxDepthFilterTest", "testName": "testCustomDepthZero", "testMethod": "@Test\n public void testCustomDepthZero ( ) throws MalformedURLException {\n     URLFilter filter = createFilter ( \"STR\" , 3 ) ; \n     URL url = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( MetadataTransfer . maxDepthKeyName , \"STR\" ) ; \n     String filterResult = filter . filter ( url , metadata , url . toExternalForm ( ) ) ; \n     Assert.assertEquals(null,filterResult);\n}", "oracle": "Assert.assertEquals(null,filterResult);", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focalName": "filter", "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["DigitalPebble", "storm-crawler", "core"], "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/parse/StackOverflowTest.java", "className": "StackOverflowTest", "testName": "testNamespaceExtraction", "testMethod": "@Test\n public void testNamespaceExtraction ( ) throws IOException {\n     prepareParserBolt ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     parse ( \"STR\" , \"STR\" , metadata ) ; \n     Assert.assertEquals(1,output.getEmitted().size());\n}", "oracle": "Assert.assertEquals(1,output.getEmitted().size());", "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focalName": "Metadata", "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } ", "commitid": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "vair\u0101ki", "testMethod": "@Test\n public void vair\u0101ki ( ) {\n     Word vair\u0101ki = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(vair\u0101ki.isRecognized());\n}", "oracle": "assertTrue(vair\u0101ki.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "nop\u016bzdam\u0101s", "testMethod": "@Test\n public void nop\u016bzdam\u0101s ( ) {\n     Word nop\u016bzdam\u0101s = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(nop\u016bzdam\u0101s.isRecognized());\n}", "oracle": "assertTrue(nop\u016bzdam\u0101s.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "riebties", "testMethod": "@Test\n public void riebties ( ) {\n     loc\u012bt\u0101js . enableGuessing = true ; \n     Word riebties = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(riebties.isRecognized());\n}", "oracle": "assertTrue(riebties.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "className": "StatementResultTest", "testName": "testGetMore", "testMethod": "@Test\n public void testGetMore ( ) {\n     String expected = MORE ; \n     String actual = statementResult . getMore ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/StatementResult.java", "focalName": "getMore", "focalMethod": " public String getMore ( ) { \n return more ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "className": "VerbsTest", "testName": "testMastered", "testMethod": "@Test\n public void testMastered ( ) {\n     Verb actual = Verbs . mastered ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focalName": "mastered", "focalMethod": " public static Verb mastered ( ) { \n return createVerb ( \"STR\" ) ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActorTest.java", "className": "ActorTest", "testName": "testGetMbox", "testMethod": "@Test\n public void testGetMbox ( ) {\n     String expected = MBOX ; \n     String actual = agent . getMbox ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Actor.java", "focalName": "getMbox", "focalMethod": " public String getMbox ( ) { \n return mbox ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/AppveyorTest.java", "className": "AppveyorTest", "testName": "testGetBuildUrl", "testMethod": "@Test\n public void testGetBuildUrl ( ) {\n     assertEquals(\"STR\",newAppveyor(env()).getBuildUrl());\n}", "oracle": "assertEquals(\"STR\",newAppveyor(env()).getBuildUrl());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Appveyor.java", "focalName": "getBuildUrl", "focalMethod": "@Override\n public String getBuildUrl ( ) { \n return \"STR\" + getProperty ( APPVEYOR_REPO_NAME ) + \"STR\" + getProperty ( APPVEYOR_BUILD_NUMBER ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "className": "StringUtilsTest", "testName": "testEmptyIsEmpty", "testMethod": "@Test\n public void testEmptyIsEmpty ( ) throws Exception {\n     assertTrue(StringUtils.isEmpty(\"STR\"));\n}", "oracle": "assertTrue(StringUtils.isEmpty(\"STR\"));", "focalFile": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focalName": "isEmpty", "focalMethod": " public static boolean isEmpty ( String string ) { \n return ! isNonZero ( string ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "className": "PerMessageDeflateExtensionTest", "testName": "testGetDeflater", "testMethod": "@Test\n public void testGetDeflater ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());\n}", "oracle": "assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());", "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java", "focalName": "getDeflater", "focalMethod": " public Deflater getDeflater ( ) { \n return deflater ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["sofastack", "sofa-bolt", ""], "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "className": "RpcConnectionManagerTest", "testName": "testGetAllWithPoolKey", "testMethod": "@Test\n public void testGetAllWithPoolKey ( ) {\n     cm . add ( getAConn ( ) ) ; \n     cm . add ( getAConn ( ) ) ; \n     cm . add ( getAConn ( ) ) ; \n     Assert.assertEquals(3,cm.getAll(poolKey).size());\n}", "oracle": "Assert.assertEquals(3,cm.getAll(poolKey).size());", "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focalName": "getAll", "focalMethod": "@Override\n public List < Connection > getAll ( String poolKey ) { \n ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n return null == pool ? new ArrayList < Connection > ( ) : pool . getAll ( ) ; \n } ", "commitid": "42e4e3d756b7655c0d4a058989c66d9eb09591fa"}
{"project": ["retog", "wymiwyg-commons-core", ""], "classPath": "src/test/java/org/wymiwyg/commons/util/dirbrowser/test/MultiPathNodeTest.java", "className": "MultiPathNodeTest", "testName": "commonPath", "testMethod": "@Test\n public void commonPath ( ) {\n     MultiPathNode node = new MultiPathNode ( nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) ) ; \n     Assert.assertEquals(\"STR\",node.getPath());\n}", "oracle": "Assert.assertEquals(\"STR\",node.getPath());", "focalFile": "src/main/java/org/wymiwyg/commons/util/dirbrowser/MultiPathNode.java", "focalName": "getPath", "focalMethod": " public String getPath ( ) { \n String currentLongest = nodes [ 0 ] . getPath ( ) ; \n for ( int i = 1 ; \n i < nodes . length ; \n i ++ ) { \n currentLongest = getLongestCommonSuffix ( currentLongest , nodes [ i ] . getPath ( ) ) ; \n } return currentLongest ; \n } ", "commitid": "5b5ba4fef4e810b8cea0ac08ce105fa402eaee3c"}
{"project": ["Yubico", "yubico-java-client", "v2client"], "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "className": "YubicoClientTest", "testName": "testValidOTPPublicId", "testMethod": "@Test\n public void testValidOTPPublicId ( ) {\n     String testOtp = \"STR\" ; \n     String testPublicId = \"STR\" ; \n     String resultPublicId = YubicoClient . getPublicId ( testOtp ) ; \n     assertEquals(testPublicId,resultPublicId);\n}", "oracle": "assertEquals(testPublicId,resultPublicId);", "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focalName": "getPublicId", "focalMethod": " public static String getPublicId ( String otp ) { \n if ( ( otp == null ) || ( otp . length ( ) < OTP_MIN_LEN ) ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Integer len = otp . length ( ) ; \n return otp . substring ( 0 , len - 32 ) . toLowerCase ( ) ; \n } ", "commitid": "e21fb672e290a118f7420daaf81ccb96d319d52c"}
{"project": ["OpenLiberty", "ci.common", ""], "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "className": "DevUtilTest", "testName": "testGetFileFromConfigDirectory", "testMethod": "@Test\n public void testGetFileFromConfigDirectory ( ) throws Exception {\n     DevUtil util = new DevTestUtil ( null , null , null , this . configDirectory , null , false , false ) ; \n     File tempTextFile = new File ( configDirectory , \"STR\" ) ; \n     Files . write ( tempTextFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     File configFile = util . getFileFromConfigDirectory ( \"STR\" ) ; \n     assertTrue(configFile.exists());\n}", "oracle": "assertTrue(configFile.exists());", "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focalName": "getFileFromConfigDirectory", "focalMethod": " protected File getFileFromConfigDirectory ( String file ) { \n File f = new File ( configDirectory , file ) ; \n if ( configDirectory != null && f . exists ( ) ) { \n return f ; \n } return null ; \n } ", "commitid": "c41190e3047e920f39c3bb91a3e4045d65f36155"}
{"project": ["fluenda", "ParCEFone", ""], "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "className": "MacAddressTest", "testName": "testAddressHashCode", "testMethod": "@Test\n public void testAddressHashCode ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     assertNotEquals(0,macAddress.hashCode());\n}", "oracle": "assertNotEquals(0,macAddress.hashCode());", "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focalName": "hashCode", "focalMethod": "@Override\n public int hashCode ( ) { \n return Arrays . hashCode ( address ) ; \n } ", "commitid": "5067b3315c1957f930f19549ec4b354e7b8c336d"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "className": "OMultiKeyTest", "testName": "testEqualsDifferentClass", "testMethod": "@Test\n public void testEqualsDifferentClass ( ) {\n     final OMultiKey multiKey = new OMultiKey ( Collections . singletonList ( \"STR\" ) ) ; \n     assertFalse(multiKey.equals(\"STR\"));\n}", "oracle": "assertFalse(multiKey.equals(\"STR\"));", "focalFile": "core/src/main/java/com/orientechnologies/common/util/OMultiKey.java", "focalName": "equals", "focalMethod": "@Override\n public boolean equals ( final Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n final OMultiKey oMultiKey = ( OMultiKey ) o ; \n if ( keys . size ( ) != oMultiKey . keys . size ( ) ) return false ; \n for ( final Object inKey : keys ) { \n if ( ! oMultiKey . keys . contains ( inKey ) ) return false ; \n } return true ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BytesContainerTest.java", "className": "BytesContainerTest", "testName": "testSimple", "testMethod": "@Test\n public void testSimple ( ) {\n     BytesContainer bytesContainer = new BytesContainer ( ) ; \n     assertNotNull(bytesContainer.bytes);\n}", "oracle": "assertNotNull(bytesContainer.bytes);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/BytesContainer.java", "focalName": "BytesContainer", "focalMethod": " public BytesContainer ( ) { \n bytes = new byte [ 64 ] ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "className": "OCommandExecutorSQLSelectTest", "testName": "testSkipOrdered", "testMethod": "@Test\n public void testSkipOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(19,results.size());\n}", "oracle": "assertEquals(19,results.size());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focalName": "query", "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "className": "OMatchStatementExecutionNewTest", "testName": "testFriendsOfFriendsArrows", "testMethod": "@Test\n public void testFriendsOfFriendsArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}", "oracle": "Assert.assertTrue(qResult.hasNext());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "hasNext", "focalMethod": "@Override\n boolean hasNext ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialWithinTest.java", "className": "LuceneSpatialWithinTest", "testName": "testWithinNoIndex", "testMethod": "@Test\n public void testWithinNoIndex ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" + \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     Assert.assertEquals(next.field(\"STR\"),true);\n}", "oracle": "Assert.assertEquals(next.field(\"STR\"),true);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "field", "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "className": "JMXJvmIdConnectionFactoryTest", "testName": "testCreateConnectionUsingSystemProperties", "testMethod": "@Test\n public void testCreateConnectionUsingSystemProperties ( ) throws Exception {\n     this . initFactory ( ) ; \n     Mockito . when ( this . mockAttacher . attach ( \"STR\" ) ) . thenReturn ( this . mockVirtualMachine ) ; \n     Mockito . when ( this . mockVirtualMachine . getAgentProperties ( ) ) . thenReturn ( this . mockAgentProperties ) ; \n     Mockito . when ( this . mockVirtualMachine . getSystemProperties ( ) ) . thenReturn ( this . mockSystemProperties ) ; \n     Mockito . when ( this . mockAgentProperties . getProperty ( JMXJvmIdConnectionFactory . COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ) . thenReturn ( null ) . thenReturn ( \"STR\" ) ; \n     Mockito . when ( this . mockSystemProperties . getProperty ( \"STR\" ) ) . thenReturn ( \"STR\" ) ; \n     MBeanAccessConnection result = this . factory . createConnection ( ) ; \n     assertSame(result,this.mockJmxMbeanConnection);\n}", "oracle": "assertSame(result,this.mockJmxMbeanConnection);", "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focalName": "createConnection", "focalMethod": "@Override\n public MBeanAccessConnection createConnection ( ) throws IOException { \n JMXMBeanConnection result = null ; \n try { \n VirtualMachine vm = this . attacher . attach ( jvmId ) ; \n String url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n if ( url == null ) { \n String javaHome = vm . getSystemProperties ( ) . getProperty ( \"STR\" ) ; \n String agent = javaHome + File . separator + \"STR\" + File . separator + \"STR\" ; \n vm . loadAgent ( agent ) ; \n url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n } if ( url != null ) { \n JMXServiceURL jmxUrl = this . jmxServiceUrlFactory . createJMXServiceUrl ( url ) ; \n JMXConnector connector = this . jmxConnectorFactoryDelegate . connect ( jmxUrl ) ; \n result = this . jmxmBeanConnectionFactory . create ( connector ) ; \n } else { \n log . warn ( \"STR\" , this . jvmId ) ; \n } } catch ( AgentInitializationException | AgentLoadException | AttachNotSupportedException exc ) { \n log . warn ( \"STR\" , this . jvmId , exc ) ; \n } return result ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "className": "JMXJvmIdConnectionFactoryTest", "testName": "testGetSetJmxServiceFactory", "testMethod": "@Test\n public void testGetSetJmxServiceFactory ( ) {\n     assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);\n}", "oracle": "assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);", "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focalName": "getJmxServiceUrlFactory", "focalMethod": " public JMXServiceUrlFactory getJmxServiceUrlFactory ( ) { \n return jmxServiceUrlFactory ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/ParameterReplacerTest.java", "className": "ParameterReplacerTest", "testName": "testReplaceObjectNameParameters", "testMethod": "@Test\n public void testReplaceObjectNameParameters ( ) throws Exception {\n     Mockito . when ( this . mockSource . getParameter ( \"STR\" ) ) . thenReturn ( \"STR\" ) ; \n     Mockito . when ( this . mockSource . getParameter ( \"STR\" ) ) . thenReturn ( \"STR\" ) ; \n     Mockito . when ( this . mockSource . getParameter ( \"STR\" ) ) . thenReturn ( \"STR\" ) ; \n     String result ; \n     result = this . replacer . replaceObjectNameParameters ( \"STR\" , mockSource ) ; \n     assertEquals(\"STR\",result);\n}", "oracle": "assertEquals(\"STR\",result);", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ParameterReplacer.java", "focalName": "replaceObjectNameParameters", "focalMethod": " public String replaceObjectNameParameters ( String pattern , MBeanLocationParameterSource parameterSource ) { \n Matcher matcher = replaceParamPattern . matcher ( pattern ) ; \n StringBuffer result = new StringBuffer ( ) ; \n while ( matcher . find ( ) ) { \n String name = matcher . group ( \"STR\" ) ; \n String value = parameterSource . getParameter ( name ) ; \n if ( value != null ) { \n matcher . appendReplacement ( result , value ) ; \n } else { \n matcher . appendReplacement ( result , Matcher . quoteReplacement ( matcher . group ( ) ) ) ; \n } } matcher . appendTail ( result ) ; \n return result . toString ( ) ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryInfoTest.java", "className": "ObjectQueryInfoTest", "testName": "testImmutableQueryInfo", "testMethod": "@Test\n public void testImmutableQueryInfo ( ) throws Exception {\n     Map < String , Method > setters = new HashMap < > ( ) ; \n     setters . put ( \"STR\" , null ) ; \n     setters . put ( \"STR\" , null ) ; \n     Object target = new Object ( ) ; \n     ObjectName oname = new ObjectName ( \"STR\" ) ; \n     ObjectQueryInfo objectQueryInfo = new ObjectQueryInfo ( target , oname , setters ) ; \n     assertSame(target,objectQueryInfo.getTarget());\n}", "oracle": "assertSame(target,objectQueryInfo.getTarget());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryInfo.java", "focalName": "getTarget", "focalMethod": " public Object getTarget ( ) { \n return target ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "className": "AttributeInjectorTest", "testName": "testCopyOutWithLongForIntFields", "testMethod": "@Test\n public void testCopyOutWithLongForIntFields ( ) throws Exception {\n     this . attributeList . clear ( ) ; \n     this . attributeList . add ( new Attribute ( \"STR\" , 17L ) ) ; \n     this . attributeList . add ( new Attribute ( \"STR\" , 22L ) ) ; \n     this . injector . copyOutAttributes ( this . target , this . attributeList , this . attributeSetters , this . objectName ) ; \n     assertEquals(17,this.target.intValue);\n}", "oracle": "assertEquals(17,this.target.intValue);", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/AttributeInjector.java", "focalName": "copyOutAttributes", "focalMethod": " public void copyOutAttributes ( Object target , List < Attribute > jmxAttributeValues , Map < String , Method > attributeSetters , ObjectName objectName ) { \n this . copyOutAttributes ( target , jmxAttributeValues , attributeSetters , \"STR\" , objectName ) ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["amlinv", "stat-collection-utils", ""], "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "className": "JmxAttributePollerTest", "testName": "testGetSetLog", "testMethod": "@Test\n public void testGetSetLog ( ) throws Exception {\n     assertNotNull(this.poller.getLog());\n}", "oracle": "assertNotNull(this.poller.getLog());", "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focalName": "getLog", "focalMethod": " public Logger getLog ( ) { \n return log ; \n } ", "commitid": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/ResourceUtilTest.java", "className": "ResourceUtilTest", "testName": "simple", "testMethod": "@Test\n public void simple ( ) {\n     JsonParser parser = new JsonParser ( ) ; \n     JsonObject first = parser . parse ( \"STR\" ) . getAsJsonObject ( ) ; \n     JsonObject same = parser . parse ( \"STR\" ) . getAsJsonObject ( ) ; \n     JsonObject different = parser . parse ( \"STR\" ) . getAsJsonObject ( ) ; \n     assertTrue(ResourceUtil.jsonEquals(first,same));\n}", "oracle": "assertTrue(ResourceUtil.jsonEquals(first,same));", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/ResourceUtil.java", "focalName": "jsonEquals", "focalMethod": " public static boolean jsonEquals ( JsonObject first , JsonObject second ) { \n final ObjectMapper mapper = new ObjectMapper ( ) ; \n try { \n final JsonNode tree1 = mapper . readTree ( first . toString ( ) ) ; \n final JsonNode tree2 = mapper . readTree ( second . toString ( ) ) ; \n return tree1 . equals ( tree2 ) ; \n } catch ( IOException e ) { \n return false ; \n } } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "className": "ADiGraphTest", "testName": "testEmpty", "testMethod": "@Test\n public void testEmpty ( ) {\n     final ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Collections . < ASimpleEdge < String > > emptyList ( ) ) ; \n     assertTrue(graph.edges().isEmpty());\n}", "oracle": "assertTrue(graph.edges().isEmpty());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java", "focalName": "edges", "focalMethod": " public Collection < E > edges ( ) { \n return new ArrayIterable < > ( edges ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["arnohaase", "a-foundation", "a-foundation"], "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "className": "ADiGraphTest", "testName": "testTree", "testMethod": "@Test\n public void testTree ( ) {\n     final ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Arrays . asList ( edge ( \"STR\" , \"STR\" ) , edge ( \"STR\" , \"STR\" ) ) ) ; \n     assertFalse(graph.hasCycles());\n}", "oracle": "assertFalse(graph.hasCycles());", "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java", "focalName": "hasCycles", "focalMethod": " public boolean hasCycles ( ) { \n return ! minimalCycles ( ) . isEmpty ( ) ; \n } ", "commitid": "f3eef2ca89d67775f202a4c28140230a6229291e"}
{"project": ["hazelcast", "hazelcast-simulator", "drivers/driver-hazelcast4plus"], "classPath": "drivers/driver-hazelcast4plus/src/test/java/com/hazelcast/simulator/utils/BuildInfoUtilsTest.java", "className": "BuildInfoUtilsTest", "testName": "testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse", "testMethod": "@Test\n public void testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse ( ) {\n     assertFalse(isMinVersion(\"STR\",null));\n}", "oracle": "assertFalse(isMinVersion(\"STR\",null));", "focalFile": "drivers/driver-hazelcast4plus/src/main/java/com/hazelcast/simulator/utils/BuildInfoUtils.java", "focalName": "isMinVersion", "focalMethod": " static boolean isMinVersion ( String minVersion , String version ) { \n if ( version == null ) { \n return false ; \n } return VersionUtils . isMinVersion ( minVersion , getVersion ( ) ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "className": "WildcardsTest", "testName": "testMatchesAgainstNull", "testMethod": "@Test\n public void testMatchesAgainstNull ( ) throws Exception {\n     assertFalse(Wildcards.matches(null,\"STR\"));\n}", "oracle": "assertFalse(Wildcards.matches(null,\"STR\"));", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/Wildcards.java", "focalName": "matches", "focalMethod": " public static boolean matches ( final String text , final String wildcard ) { \n String pattern = wildcard . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) ; \n return ( text != null && text . matches ( pattern ) ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "className": "Draft_6455Test", "testName": "testToString", "testMethod": "@Test\n public void testToString ( ) throws Exception {\n     Draft_6455 draft_6455 = new Draft_6455 ( ) ; \n     assertEquals(\"STR\",draft_6455.toString());\n}", "oracle": "assertEquals(\"STR\",draft_6455.toString());", "focalFile": "src/main/java/org/java_websocket/drafts/Draft_6455.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) { \n String result = super . toString ( ) ; \n if ( getExtension ( ) != null ) { \n result += \"STR\" + getExtension ( ) . toString ( ) ; \n } if ( getProtocol ( ) != null ) { \n result += \"STR\" + getProtocol ( ) . toString ( ) ; \n } result += \"STR\" + this . maxFrameSize ; \n return result ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["rockagen", "commons-lib", ""], "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "className": "CommUtilTest", "testName": "testBitValue", "testMethod": "@Test\n public void testBitValue ( ) {\n     String bs = \"STR\" ; \n     BitSet b = CommUtil . bitSet ( bs . getBytes ( ) ) ; \n     Assert.assertEquals(\"STR\",CommUtil.hexdump(CommUtil.bitValue(b)));\n}", "oracle": "Assert.assertEquals(\"STR\",CommUtil.hexdump(CommUtil.bitValue(b)));", "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java", "focalName": "hexdump", "focalMethod": " public static String hexdump ( final byte [ ] bytes ) { \n if ( bytes == null || bytes . length < 1 ) return \"STR\" ; \n int length = bytes . length ; \n int temp ; \n char [ ] hex = new char [ length * 2 ] ; \n for ( int i = 0 ; \n i < length ; \n i ++ ) { \n temp = bytes [ i ] & 0xFF ; \n hex [ i * 2 ] = HEXARRAY [ temp > > > 4 ] ; \n hex [ i * 2 + 1 ] = HEXARRAY [ temp & 0x0F ] ; \n } return new String ( hex ) ; \n } ", "commitid": "f37141cf40be79d130db804c39ce61690541d5f1"}
{"project": ["nidi3", "graphviz-java", "graphviz-java"], "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "className": "LabelTest", "testName": "markdown", "testMethod": "@Test\n void markdown ( ) {\n     assertEquals(\"STR\",Label.markdown(\"STR\").value);\n}", "oracle": "assertEquals(\"STR\",Label.markdown(\"STR\").value);", "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Label.java", "focalName": "markdown", "focalMethod": " public static Label markdown ( String value ) { \n return html ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( value . replace ( \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) . replaceAll ( \"STR\" , \"STR\" ) ) ; \n } ", "commitid": "dcbd021a903a4114dd087ef9acec5650b92c89b2"}
{"project": ["jcodec", "jcodec", ""], "classPath": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "className": "MkvBlockTest", "testName": "testReadingXiphV2", "testMethod": "@Test\n public void testReadingXiphV2 ( ) throws Exception {\n     ByteBuffer bb = ByteBuffer . wrap ( new byte [ ] { \n ( byte ) 0x82 , 0x00 , ( byte ) 0xAE , 0x02 , 0x04 , ( byte ) 187 , ( byte ) 255 , ( byte ) 255 , 120 , ( byte ) 255 , 0 , 60 } ) ; \n     int startPosition = 5 ; \n     bb . position ( startPosition ) ; \n     MkvBlock be = new MkvBlock ( Block . id ) ; \n     be . offset = 0x149B0 ; \n     be . dataOffset = 0x149B3 ; \n     be . dataLen = 0x353 ; \n     int [ ] sizes = new int [ bb . get ( 4 ) + 1 ] ; \n     be . headerSize = MkvBlock . readXiphLaceSizes ( bb , sizes , ( int ) be . dataLen , startPosition ) ; \n     Assert.assertEquals(12,be.headerSize);\n}", "oracle": "Assert.assertEquals(12,be.headerSize);", "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java", "focalName": "readXiphLaceSizes", "focalMethod": " public static int readXiphLaceSizes ( ByteBuffer bb , int [ ] sizes , int size , int preLacingHeaderSize ) { \n int startPos = bb . position ( ) ; \n int lastIndex = sizes . length - 1 ; \n sizes [ lastIndex ] = size ; \n for ( int l = 0 ; \n l < lastIndex ; \n l ++ ) { \n int laceSize = 255 ; \n while ( laceSize == 255 ) { \n laceSize = bb . get ( ) & 0xFF ; \n sizes [ l ] += laceSize ; \n } sizes [ lastIndex ] -= sizes [ l ] ; \n } int headerSize = ( bb . position ( ) - startPos ) + preLacingHeaderSize ; \n sizes [ lastIndex ] -= headerSize ; \n return headerSize ; \n } ", "commitid": "6ad0b21222becf19b9465346423eb435dfc32f31"}
{"project": ["PeterisP", "morphology", ""], "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "className": "MorphologyTest", "testName": "rakiens", "testMethod": "@Test\n public void rakiens ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}", "oracle": "assertTrue(w.isRecognized());", "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focalName": "isRecognized", "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } ", "commitid": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe"}
{"project": ["basis-technology-corp", "tcl-regex-java", ""], "classPath": "src/test/java/com/basistech/tclre/SmpTest.java", "className": "SmpTest", "testName": "find", "testMethod": "@Test\n public void find ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}", "oracle": "assertTrue(matcher.find());", "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java", "focalName": "find", "focalMethod": " boolean find ( ) ; \n", "commitid": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62"}
{"project": ["javadev", "moneytostr-russian", ""], "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "className": "MoneyToStrTest", "testName": "checkPER1000", "testMethod": "@Test\n public void checkPER1000 ( ) {\n     assertEquals(\"STR\",moneyToStrPER1000.convert(12.346));\n}", "oracle": "assertEquals(\"STR\",moneyToStrPER1000.convert(12.346));", "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focalName": "convert", "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } ", "commitid": "d39c8729e15292d4f3d38ddbae68977f170f482b"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "className": "OSelectStatementExecutionTest", "testName": "testFetchFromSingleRid", "testMethod": "@Test\n public void testFetchFromSingleRid ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}", "oracle": "Assert.assertTrue(result.hasNext());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focalName": "hasNext", "focalMethod": "@Override\n boolean hasNext ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessSerializationTest.java", "className": "ODocumentSchemalessSerializationTest", "testName": "testSimpleEmbeddedDoc", "testMethod": "@Test\n public void testSimpleEmbeddedDoc ( ) {\n     ODocument document = new ODocument ( ) ; \n     ODocument embedded = new ODocument ( ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , embedded ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(document.fields(),extr.fields());\n}", "oracle": "assertEquals(document.fields(),extr.fields());", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focalName": "fields", "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "graphdb"], "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "className": "OMatchStatementExecutionNewTest", "testName": "testWhileArrows", "testMethod": "@Test\n public void testWhileArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertEquals(3,size(qResult));\n}", "oracle": "Assert.assertEquals(3,size(qResult));", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focalName": "query", "focalMethod": "@Override\n public OResultSet query ( String query , Object ... args ) { \n checkOpenness ( ) ; \n return internal . query ( query , args ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneNullTest.java", "className": "LuceneNullTest", "testName": "testNotNullChangeToNullWithLists", "testMethod": "@Test\n public void testNotNullChangeToNullWithLists ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     db . begin ( ) ; \n     doc . field ( \"STR\" , new String [ ] { \n \"STR\" } ) ; \n     db . save ( doc ) ; \n     db . commit ( ) ; \n     db . begin ( ) ; \n     doc . removeField ( \"STR\" ) ; \n     db . save ( doc ) ; \n     db . commit ( ) ; \n     OIndex < ? > index = db . getMetadata ( ) . getIndexManager ( ) . getIndex ( \"STR\" ) ; \n     Assert.assertEquals(index.getSize(),1);\n}", "oracle": "Assert.assertEquals(index.getSize(),1);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focalName": "getSize", "focalMethod": " long getSize ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "lucene"], "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneManualIndexTest.java", "className": "LuceneManualIndexTest", "testName": "testManualIndex", "testMethod": "@Test\n public void testManualIndex ( ) {\n     OIndex < ? > manual = db . getMetadata ( ) . getIndexManager ( ) . getIndex ( \"STR\" ) ; \n     Assert.assertEquals(manual.getSize(),4);\n}", "oracle": "Assert.assertEquals(manual.getSize(),4);", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focalName": "getSize", "focalMethod": " long getSize ( ) ; \n", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "core"], "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/filter/OFilterOptimizerTest.java", "className": "OFilterOptimizerTest", "testName": "testOptimizePartialOptimizationMethod", "testMethod": "@Test\n public void testOptimizePartialOptimizationMethod ( ) throws Exception {\n     final OSQLFilter filter = OSQLEngine . getInstance ( ) . parseCondition ( \"STR\" , null , \"STR\" ) ; \n     final OSQLFilterCondition condition = filter . getRootCondition ( ) ; \n     final OIndexSearchResult searchResult = new OIndexSearchResult ( ( ( OSQLFilterCondition ) condition . getLeft ( ) ) . getOperator ( ) , ( ( OSQLFilterItemField ) ( ( OSQLFilterCondition ) condition . getLeft ( ) ) . getLeft ( ) ) . getFieldChain ( ) , 3 ) ; \n     optimizer . optimize ( filter , searchResult ) ; \n     Assert.assertEquals(filter.getRootCondition().toString(),\"STR\");\n}", "oracle": "Assert.assertEquals(filter.getRootCondition().toString(),\"STR\");", "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/filter/OSQLFilterCondition.java", "focalName": "toString", "focalMethod": "@Override\n public String toString ( ) { \n StringBuilder buffer = new StringBuilder ( 128 ) ; \n buffer . append ( '(' ) ; \n buffer . append ( left ) ; \n if ( operator != null ) { \n buffer . append ( ' ' ) ; \n buffer . append ( operator ) ; \n buffer . append ( ' ' ) ; \n if ( right instanceof String ) { \n buffer . append ( '\\'' ) ; \n } buffer . append ( right ) ; \n if ( right instanceof String ) { \n buffer . append ( '\\'' ) ; \n } buffer . append ( ')' ) ; \n } return buffer . toString ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["orientechnologies", "orientdb", "etl"], "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "className": "OETLCSVExtractorTest", "testName": "testQuotedEmptyString", "testMethod": "@Test\n public void testQuotedEmptyString ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}", "oracle": "assertFalse(res.isEmpty());", "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focalName": "execute", "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } ", "commitid": "2cabb46c9581572b7f46724864f02d9c688070c5"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/performance/PerformanceStatsTest.java", "className": "PerformanceStatsTest", "testName": "testAdd_withoutAddOperationCountAndThroughput_toEmptyState", "testMethod": "@Test\n public void testAdd_withoutAddOperationCountAndThroughput_toEmptyState ( ) {\n     PerformanceStats addState = new PerformanceStats ( ) ; \n     addState . add ( new PerformanceStats ( 100 , 5.0 , 10.0 , 450.0d , 400 , 500 ) , false ) ; \n     assertEquals(100,addState.getOperationCount());\n}", "oracle": "assertEquals(100,addState.getOperationCount());", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/performance/PerformanceStats.java", "focalName": "getOperationCount", "focalMethod": " public long getOperationCount ( ) { \n return operationCount ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/ScriptExecutorTest.java", "className": "ScriptExecutorTest", "testName": "javascript", "testMethod": "@Test\n public void javascript ( ) {\n     ExecuteScriptOperation scriptOperation = new ExecuteScriptOperation ( \"STR\" , false ) ; \n     StubPromise promise = new StubPromise ( ) ; \n     scriptExecutor . execute ( scriptOperation , promise ) ; \n     promise . assertCompletesEventually ( ) ; \n     assertTrue(promise.getAnswer()instanceofString);\n}", "oracle": "assertTrue(promise.getAnswer()instanceofString);", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/ScriptExecutor.java", "focalName": "execute", "focalMethod": " public void execute ( final ExecuteScriptOperation operation , final Promise promise ) { \n if ( operation . isFireAndForget ( ) ) { \n promise . answer ( \"STR\" ) ; \n } String fullCommand = operation . getCommand ( ) ; \n int indexColon = fullCommand . indexOf ( \"STR\" ) ; \n String extension = fullCommand . substring ( 0 , indexColon ) ; \n final String command = fullCommand . substring ( indexColon + 1 ) ; \n final Callable < String > task ; \n if ( extension . equals ( \"STR\" ) ) { \n task = newBashScriptCallable ( command ) ; \n } else { \n task = newGenericScriptCallable ( extension , command ) ; \n } new Thread ( ( ) -> { \n try { \n String result = task . call ( ) ; \n promise . answer ( result ) ; \n } catch ( Exception e ) { \n LOGGER . warn ( \"STR\" + command , e ) ; \n promise . answer ( e ) ; \n } } ) . start ( ) ; \n } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["hazelcast", "hazelcast-simulator", "simulator"], "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "className": "PropertyBindingSupport_bind0_NumericalTest", "testName": "bind_Integer", "testMethod": "@Test\n public void bind_Integer ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"));\n}", "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"));", "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focalName": "bind0", "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } ", "commitid": "7f0c13f66a81ce27911109e4118f7405483931dc"}
{"project": ["cucumber-ltd", "cucumber-pro-plugin-jvm", ""], "classPath": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "className": "YamlConfigLoaderTest", "testName": "removes_underscores_from_keys", "testMethod": "@Test\n public void removes_underscores_from_keys ( ) {\n     Config config = new Config ( ) ; \n     ConfigLoader configLoader = new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) ; \n     configLoader . load ( config ) ; \n     assertEquals(\"STR\",config.getString(\"STR\"));\n}", "oracle": "assertEquals(\"STR\",config.getString(\"STR\"));", "focalFile": "src/main/java/io/cucumber/pro/config/Config.java", "focalName": "getString", "focalMethod": " public String getString ( String key ) { \n return getIn ( normalize ( key ) , false ) . getString ( ) ; \n } ", "commitid": "a09ee0b1682d3cd8b68c240820e647d4515e931f"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "className": "ContentActivitiesTest", "testName": "testSetOther", "testMethod": "@Test\n public void testSetOther ( ) {\n     String newID = \"STR\" + ID ; \n     ArrayList < Activity > expected = other ; \n     expected . add ( new Activity ( newID ) ) ; \n     contextActivities . setOther ( expected ) ; \n     ArrayList < Activity > actual = contextActivities . getOther ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ContextActivities.java", "focalName": "getOther", "focalMethod": " public ArrayList < Activity > getOther ( ) { \n return other ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java", "className": "StatementTest", "testName": "testSetVerb", "testMethod": "@Test\n public void testSetVerb ( ) {\n     Verb expected = new Verb ( \"STR\" ) ; \n     statement . setVerb ( expected ) ; \n     Verb actual = statement . getVerb ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java", "focalName": "getVerb", "focalMethod": " public Verb getVerb ( ) { \n return verb ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ResultTest.java", "className": "ResultTest", "testName": "testSetScore", "testMethod": "@Test\n public void testSetScore ( ) {\n     Score score = new Score ( ) ; \n     result . setScore ( score ) ; \n     Score actual = result . getScore ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Result.java", "focalName": "getScore", "focalMethod": " public Score getScore ( ) { \n return score ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "className": "ActivityStateTest", "testName": "testSetState", "testMethod": "@Test\n public void testSetState ( ) {\n     JsonObject expected = new JsonObject ( ) ; \n     expected . addProperty ( \"STR\" , \"STR\" ) ; \n     activityState . setState ( expected ) ; \n     JsonObject actual = activityState . getState ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focalName": "getState", "focalMethod": " public JsonObject getState ( ) { \n return this . state ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "className": "AttachmentResultTest", "testName": "testSetXapiStatements", "testMethod": "@Test\n public void testSetXapiStatements ( ) {\n     AttachmentResult a = new AttachmentResult ( RESPONSE_MESSAGE , statements , attachments ) ; \n     assertNotNull(a);\n}", "oracle": "assertNotNull(a);", "focalFile": "src/main/java/gov/adlnet/xapi/util/AttachmentResult.java", "focalName": "AttachmentResult", "focalMethod": " public AttachmentResult ( String inputMessage , StatementResult inputStatements , Map < String , AttachmentAndType > inputAttachments ) { \n responseMessage = inputMessage ; \n statements = inputStatements ; \n attachments = inputAttachments ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["adlnet", "jxapi", ""], "classPath": "src/test/java/gov/adlnet/xapi/GroupTest.java", "className": "GroupTest", "testName": "testGetObjectType", "testMethod": "@Test\n public void testGetObjectType ( ) {\n     String expected = \"STR\" ; \n     String actual = group . getObjectType ( ) ; \n     assertNotNull(actual);\n}", "oracle": "assertNotNull(actual);", "focalFile": "src/main/java/gov/adlnet/xapi/model/Group.java", "focalName": "getObjectType", "focalMethod": "@Override\n public String getObjectType ( ) { \n return GROUP ; \n } ", "commitid": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "className": "PuzzleTest", "testName": "puzzle_not_solved", "testMethod": "@Test\n public void puzzle_not_solved ( ) {\n     int [ ] cells = getSolution ( ) ; \n     cells = swap ( cells , 3 , 4 ) ; \n     Puzzle p = new Puzzle ( cells ) ; \n     assertFalse(p.isSolved());\n}", "oracle": "assertFalse(p.isSolved());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focalName": "isSolved", "focalMethod": " public boolean isSolved ( ) { \n return getDistanceToGoal ( ) == 0 ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["TeachingKidsProgramming", "TeachingKidsProgramming.Source.Java", ""], "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "className": "PuzzleStateTest", "testName": "actual_cost", "testMethod": "@Test\n public void actual_cost ( ) {\n     PuzzleState s = new PuzzleState ( getSolvedPuzzle ( ) ) ; \n     assertEquals(0,s.getActualCost());\n}", "oracle": "assertEquals(0,s.getActualCost());", "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focalName": "getActualCost", "focalMethod": " public int getActualCost ( ) { \n return this . history . size ( ) ; \n } ", "commitid": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24"}
{"project": ["TooTallNate", "Java-WebSocket", ""], "classPath": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "className": "PerMessageDeflateExtensionTest", "testName": "testDecodeFrame", "testMethod": "@Test\n public void testDecodeFrame ( ) throws InvalidDataException {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     String str = \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     byte [ ] message = str . getBytes ( ) ; \n     TextFrame frame = new TextFrame ( ) ; \n     frame . setPayload ( ByteBuffer . wrap ( message ) ) ; \n     deflateExtension . encodeFrame ( frame ) ; \n     deflateExtension . decodeFrame ( frame ) ; \n     assertArrayEquals(message,frame.getPayloadData().array());\n}", "oracle": "assertArrayEquals(message,frame.getPayloadData().array());", "focalFile": "src/main/java/org/java_websocket/framing/FramedataImpl1.java", "focalName": "getPayloadData", "focalMethod": "@Override\n public ByteBuffer getPayloadData ( ) { \n return unmaskedpayload ; \n } ", "commitid": "e630e60168f8a857549731cd500e9312dfccbc46"}
{"project": ["rockagen", "commons-lib", ""], "classPath": "src/test/java/com/rockagen/commons/annotation/OPLogTest.java", "className": "OPLogTest", "testName": "testDescription", "testMethod": "@Test\n public void testDescription ( ) throws SecurityException , NoSuchMethodException {\n     Plog annotation = ( Plog ) ClassUtil . getDeclaredMethod ( getClass ( ) , false , \"STR\" ) . getAnnotation ( Plog . class ) ; \n     String value = annotation . value ( ) ; \n     Assert.assertEquals(\"STR\",value);\n}", "oracle": "Assert.assertEquals(\"STR\",value);", "focalFile": "src/main/java/com/rockagen/commons/util/ClassUtil.java", "focalName": "getDeclaredMethod", "focalMethod": " public static Method getDeclaredMethod ( Class < ? > clazz , boolean recursively , String methodName , Class < ? > ... parameterTypes ) { \n try { \n return clazz . getDeclaredMethod ( methodName , parameterTypes ) ; \n } catch ( NoSuchMethodException e ) { \n Class < ? > superClass = clazz . getSuperclass ( ) ; \n if ( superClass != null && recursively ) { \n return getDeclaredMethod ( superClass , true , methodName , parameterTypes ) ; \n } } catch ( SecurityException e ) { \n log . error ( \"STR\" , e . getMessage ( ) , e ) ; \n } return null ; \n } ", "commitid": "f37141cf40be79d130db804c39ce61690541d5f1"}
{"project": ["trautonen", "coveralls-maven-plugin", ""], "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/domain/SourceTest.java", "className": "SourceTest", "testName": "testHashCode", "testMethod": "@Test\n public void testHashCode ( ) {\n     Source source1 = new Source ( \"STR\" , \"STR\" , \"STR\" ) ; \n     Source source2 = new Source ( \"STR\" , \"STR\" , \"STR\" ) ; \n     Source source3 = new Source ( \"STR\" , \"STR\" , \"STR\" ) ; \n     assertTrue(source1.hashCode()==source2.hashCode());\n}", "oracle": "assertTrue(source1.hashCode()==source2.hashCode());", "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/domain/Source.java", "focalName": "hashCode", "focalMethod": "@Override\n public int hashCode ( ) { \n return Objects . hash ( this . name , this . digest , this . coverage . length ) ; \n } ", "commitid": "8b8995e42768a25c8db6e85ede62238bf4606cb2"}
{"project": ["fabric8io", "fabric8-maven-plugin", "core"], "classPath": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "className": "SpringBootUtilTest", "testName": "testNonExistentPropertiesParsing", "testMethod": "@Test\n public void testNonExistentPropertiesParsing ( ) {\n     Properties props = SpringBootUtil . getPropertiesResource ( SpringBootUtilTest . class . getResource ( \"STR\" ) ) ; \n     assertNotNull(props);\n}", "oracle": "assertNotNull(props);", "focalFile": "core/src/main/java/io/fabric8/maven/core/util/SpringBootUtil.java", "focalName": "getPropertiesResource", "focalMethod": " protected static Properties getPropertiesResource ( URL resource ) { \n Properties answer = new Properties ( ) ; \n if ( resource != null ) { \n try ( InputStream stream = resource . openStream ( ) ) { \n answer . load ( stream ) ; \n } catch ( IOException e ) { \n throw new IllegalStateException ( \"STR\" + resource , e ) ; \n } } return answer ; \n } ", "commitid": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9"}
{"project": ["xmlet", "XsdParser", ""], "classPath": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "className": "IssuesTest", "testName": "testIssue27Attributes", "testMethod": "@Test\n public void testIssue27Attributes ( ) {\n     XsdParser parser = new XsdParser ( getFilePath ( \"STR\" ) ) ; \n     List < XsdSchema > schemas = parser . getResultXsdSchemas ( ) . collect ( Collectors . toList ( ) ) ; \n     Assert.assertEquals(1,schemas.size());\n}", "oracle": "Assert.assertEquals(1,schemas.size());", "focalFile": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java", "focalName": "getResultXsdSchemas", "focalMethod": " public Stream < XsdSchema > getResultXsdSchemas ( ) { \n return parseElements . values ( ) . stream ( ) . flatMap ( List :: stream ) . filter ( element -> element . getElement ( ) instanceof XsdSchema ) . map ( element -> ( XsdSchema ) element . getElement ( ) ) ; \n } ", "commitid": "8dce9914aac46eea527f6c773a753175e93ad709"}
{"project": ["myabc", "markdownj", "core"], "classPath": "core/src/test/java/org/markdownj/test/LineConventions.java", "className": "LineConventions", "testName": "testWindowsLineConventions", "testMethod": "@Test\n public void testWindowsLineConventions ( ) {\n     MarkdownProcessor markup = new MarkdownProcessor ( ) ; \n     assertEquals(EXPECTED,markup.markdown(\"STR\"));\n}", "oracle": "assertEquals(EXPECTED,markup.markdown(\"STR\"));", "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focalName": "markdown", "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } ", "commitid": "f8ed00caeb69fc602aa2209812d953c26c2a4263"}
